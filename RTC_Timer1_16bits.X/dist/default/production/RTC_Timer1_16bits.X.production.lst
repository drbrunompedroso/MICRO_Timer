

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 10 22:27:35 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    43   000000                     
    44                           ; Generated 23/03/2023 GMT
    45                           ; 
    46                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4520 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78   000000                     _TMR1L	set	4046
    79   000000                     _TMR1H	set	4047
    80   000000                     _PORTDbits	set	3971
    81   000000                     _PORTBbits	set	3969
    82   000000                     _PORTB	set	3969
    83   000000                     _TRISB	set	3987
    84   000000                     _TRISD	set	3989
    85   000000                     _OSCTUNE	set	3995
    86   000000                     _ADCON1	set	4033
    87   000000                     _PORTD	set	3971
    88   000000                     _T1CON	set	4045
    89   000000                     _OSCCON	set	4051
    90   000000                     _INTCON	set	4082
    91   000000                     _PIE1bits	set	3997
    92   000000                     _PIR1bits	set	3998
    93   000000                     _TRISEbits	set	3990
    94   000000                     _PORTEbits	set	3972
    95                           
    96                           	psect	smallconst
    97   000600                     __psmallconst:
    98                           	callstack 0
    99   000600  00                 	db	0
   100   000601                     STR_3:
   101   000601  20                 	db	32
   102   000602  20                 	db	32
   103   000603  20                 	db	32
   104   000604  20                 	db	32
   105   000605  20                 	db	32
   106   000606  20                 	db	32
   107   000607  20                 	db	32
   108   000608  20                 	db	32
   109   000609  20                 	db	32
   110   00060A  20                 	db	32
   111   00060B  20                 	db	32
   112   00060C  20                 	db	32
   113   00060D  20                 	db	32
   114   00060E  20                 	db	32
   115   00060F  20                 	db	32
   116   000610  00                 	db	0
   117   000611                     STR_1:
   118   000611  52                 	db	82	;'R'
   119   000612  45                 	db	69	;'E'
   120   000613  41                 	db	65	;'A'
   121   000614  4C                 	db	76	;'L'
   122   000615  20                 	db	32
   123   000616  54                 	db	84	;'T'
   124   000617  49                 	db	73	;'I'
   125   000618  4D                 	db	77	;'M'
   126   000619  45                 	db	69	;'E'
   127   00061A  20                 	db	32
   128   00061B  43                 	db	67	;'C'
   129   00061C  4C                 	db	76	;'L'
   130   00061D  4F                 	db	79	;'O'
   131   00061E  43                 	db	67	;'C'
   132   00061F  4B                 	db	75	;'K'
   133   000620  00                 	db	0
   134   000621                     STR_2:
   135   000621  25                 	db	37
   136   000622  30                 	db	48	;'0'
   137   000623  32                 	db	50	;'2'
   138   000624  64                 	db	100	;'d'
   139   000625  3A                 	db	58	;':'
   140   000626  25                 	db	37
   141   000627  30                 	db	48	;'0'
   142   000628  32                 	db	50	;'2'
   143   000629  64                 	db	100	;'d'
   144   00062A  3A                 	db	58	;':'
   145   00062B  25                 	db	37
   146   00062C  30                 	db	48	;'0'
   147   00062D  32                 	db	50	;'2'
   148   00062E  64                 	db	100	;'d'
   149   00062F  00                 	db	0
   150   000630  00                 	db	0	; dummy byte at the end
   151   000000                     
   152                           ; #config settings
   153                           
   154                           	psect	cinit
   155   001604                     __pcinit:
   156                           	callstack 0
   157   001604                     start_initialization:
   158                           	callstack 0
   159   001604                     __initialization:
   160                           	callstack 0
   161                           
   162                           ; Clear objects allocated to BANK0 (64 bytes)
   163   001604  EE00  F080         	lfsr	0,__pbssBANK0
   164   001608  0E40               	movlw	64
   165   00160A                     clear_0:
   166   00160A  6AEE               	clrf	postinc0,c
   167   00160C  06E8               	decf	wreg,f,c
   168   00160E  E1FD               	bnz	clear_0
   169                           
   170                           ; Clear objects allocated to COMRAM (11 bytes)
   171   001610  EE00  F067         	lfsr	0,__pbssCOMRAM
   172   001614  0E0B               	movlw	11
   173   001616                     clear_1:
   174   001616  6AEE               	clrf	postinc0,c
   175   001618  06E8               	decf	wreg,f,c
   176   00161A  E1FD               	bnz	clear_1
   177   00161C                     end_of_initialization:
   178                           	callstack 0
   179   00161C                     __end_of__initialization:
   180                           	callstack 0
   181   00161C  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   182   00161E  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   183   001620  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184   001622  6EF8               	movwf	tblptru,c
   185   001624  0100               	movlb	0
   186   001626  EF01  F00A         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189   000067                     __pbssCOMRAM:
   190                           	callstack 0
   191   000067                     _width:
   192                           	callstack 0
   193   000067                     	ds	2
   194   000069                     _prec:
   195                           	callstack 0
   196   000069                     	ds	2
   197   00006B                     _timer_hor:
   198                           	callstack 0
   199   00006B                     	ds	2
   200   00006D                     _timer_min:
   201                           	callstack 0
   202   00006D                     	ds	2
   203   00006F                     _timer_seg:
   204                           	callstack 0
   205   00006F                     	ds	2
   206   000071                     _flags:
   207                           	callstack 0
   208   000071                     	ds	1
   209                           
   210                           	psect	bssBANK0
   211   000080                     __pbssBANK0:
   212                           	callstack 0
   213   000080                     _dbuf:
   214                           	callstack 0
   215   000080                     	ds	32
   216   0000A0                     _bufferLCD:
   217                           	callstack 0
   218   0000A0                     	ds	32
   219                           
   220                           	psect	cstackBANK0
   221   0000C0                     __pcstackBANK0:
   222                           	callstack 0
   223   0000C0                     sprintf@ap:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x0
   227   0000C0                     	ds	2
   228   0000C2                     sprintf@f:
   229                           	callstack 0
   230                           
   231                           ; 11 bytes @ 0x2
   232   0000C2                     	ds	11
   233                           
   234                           	psect	cstackCOMRAM
   235   000001                     __pcstackCOMRAM:
   236                           	callstack 0
   237   000001                     ??_intern_TMR1:
   238   000001                     
   239                           ; 1 bytes @ 0x0
   240   000001                     	ds	1
   241   000002                     ?_isdigit:
   242                           	callstack 0
   243   000002                     ?_isspace:
   244                           	callstack 0
   245   000002                     ?___wmul:
   246                           	callstack 0
   247   000002                     ?___aodiv:
   248                           	callstack 0
   249   000002                     ?___aomod:
   250                           	callstack 0
   251   000002                     set_bit@comp:
   252                           	callstack 0
   253   000002                     ___wmul@multiplier:
   254                           	callstack 0
   255   000002                     isdigit@c:
   256                           	callstack 0
   257   000002                     isspace@c:
   258                           	callstack 0
   259   000002                     fputc@c:
   260                           	callstack 0
   261   000002                     ___aodiv@dividend:
   262                           	callstack 0
   263   000002                     ___aomod@dividend:
   264                           	callstack 0
   265                           
   266                           ; 8 bytes @ 0x1
   267   000002                     	ds	1
   268   000003                     set_bit@cmd:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x2
   272   000003                     	ds	1
   273   000004                     ??_lcd_cmd:
   274   000004                     ??_isdigit:
   275   000004                     ??_isspace:
   276   000004                     ___wmul@multiplicand:
   277                           	callstack 0
   278   000004                     fputc@fp:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x3
   282   000004                     	ds	1
   283   000005                     lcd_cmd@cmd:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0x4
   287   000005                     	ds	1
   288   000006                     ??_lcd_init:
   289   000006                     ??_fputc:
   290   000006                     lcd_send_byte@data:
   291                           	callstack 0
   292   000006                     _isspace$1044:
   293                           	callstack 0
   294   000006                     ___wmul@product:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x5
   298   000006                     	ds	1
   299   000007                     lcd_init@i:
   300                           	callstack 0
   301   000007                     lcd_send_byte@level:
   302                           	callstack 0
   303                           
   304                           ; 1 bytes @ 0x6
   305   000007                     	ds	1
   306   000008                     ?_atoi:
   307                           	callstack 0
   308   000008                     lcd_write@col:
   309                           	callstack 0
   310   000008                     atoi@s:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x7
   314   000008                     	ds	1
   315   000009                     lcd_write@str:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x8
   319   000009                     	ds	1
   320   00000A                     ??_atoi:
   321   00000A                     ___aodiv@divisor:
   322                           	callstack 0
   323   00000A                     ___aomod@divisor:
   324                           	callstack 0
   325                           
   326                           ; 8 bytes @ 0x9
   327   00000A                     	ds	1
   328   00000B                     lcd_write@end:
   329                           	callstack 0
   330   00000B                     fputs@s:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0xA
   334   00000B                     	ds	1
   335   00000C                     lcd_write@lin:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0xB
   339   00000C                     	ds	1
   340   00000D                     atoi@neg:
   341                           	callstack 0
   342   00000D                     fputs@fp:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0xC
   346   00000D                     	ds	2
   347   00000F                     fputs@c:
   348                           	callstack 0
   349   00000F                     atoi@n:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0xE
   353   00000F                     	ds	1
   354   000010                     fputs@i:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0xF
   358   000010                     	ds	2
   359   000012                     ___aodiv@counter:
   360                           	callstack 0
   361   000012                     ___aomod@counter:
   362                           	callstack 0
   363   000012                     pad@fp:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x11
   367   000012                     	ds	1
   368   000013                     ___aodiv@sign:
   369                           	callstack 0
   370   000013                     ___aomod@sign:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x12
   374   000013                     	ds	1
   375   000014                     ?_abs:
   376                           	callstack 0
   377   000014                     pad@buf:
   378                           	callstack 0
   379   000014                     abs@a:
   380                           	callstack 0
   381   000014                     ___aodiv@quotient:
   382                           	callstack 0
   383                           
   384                           ; 8 bytes @ 0x13
   385   000014                     	ds	2
   386   000016                     ??_abs:
   387   000016                     pad@p:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x15
   391   000016                     	ds	2
   392   000018                     ??_pad:
   393                           
   394                           ; 1 bytes @ 0x17
   395   000018                     	ds	1
   396   000019                     pad@i:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x18
   400   000019                     	ds	2
   401   00001B                     pad@w:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x1A
   405   00001B                     	ds	2
   406   00001D                     dtoa@fp:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x1C
   410   00001D                     	ds	2
   411   00001F                     dtoa@d:
   412                           	callstack 0
   413                           
   414                           ; 8 bytes @ 0x1E
   415   00001F                     	ds	8
   416   000027                     ??_dtoa:
   417                           
   418                           ; 1 bytes @ 0x26
   419   000027                     	ds	8
   420   00002F                     _dtoa$995:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x2E
   424   00002F                     	ds	2
   425   000031                     dtoa@p:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x30
   429   000031                     	ds	2
   430   000033                     dtoa@w:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x32
   434   000033                     	ds	2
   435   000035                     dtoa@n:
   436                           	callstack 0
   437                           
   438                           ; 8 bytes @ 0x34
   439   000035                     	ds	8
   440   00003D                     dtoa@s:
   441                           	callstack 0
   442                           
   443                           ; 1 bytes @ 0x3C
   444   00003D                     	ds	1
   445   00003E                     dtoa@i:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x3D
   449   00003E                     	ds	2
   450   000040                     vfpfcnvrt@fp:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x3F
   454   000040                     	ds	2
   455   000042                     vfpfcnvrt@fmt:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x41
   459   000042                     	ds	2
   460   000044                     vfpfcnvrt@ap:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x43
   464   000044                     	ds	2
   465   000046                     ??_vfpfcnvrt:
   466                           
   467                           ; 1 bytes @ 0x45
   468   000046                     	ds	3
   469   000049                     vfpfcnvrt@convarg:
   470                           	callstack 0
   471                           
   472                           ; 8 bytes @ 0x48
   473   000049                     	ds	8
   474   000051                     vfpfcnvrt@done:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x50
   478   000051                     	ds	2
   479   000053                     vfpfcnvrt@cp:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x52
   483   000053                     	ds	2
   484   000055                     ?_vfprintf:
   485                           	callstack 0
   486   000055                     vfprintf@fp:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x54
   490   000055                     	ds	2
   491   000057                     vfprintf@fmt:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x56
   495   000057                     	ds	2
   496   000059                     vfprintf@ap:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x58
   500   000059                     	ds	2
   501   00005B                     vfprintf@cfmt:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x5A
   505   00005B                     	ds	2
   506   00005D                     ?_sprintf:
   507                           	callstack 0
   508   00005D                     sprintf@s:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x5C
   512   00005D                     	ds	2
   513   00005F                     sprintf@fmt:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x5E
   517   00005F                     	ds	8
   518   000067                     
   519                           ; 1 bytes @ 0x66
   520 ;;
   521 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   522 ;;
   523 ;; *************** function _main *****************
   524 ;; Defined at:
   525 ;;		line 147 in file "Program_main.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   539 ;;      Params:         0       0       0       0       0       0       0
   540 ;;      Locals:         0       0       0       0       0       0       0
   541 ;;      Temps:          0       0       0       0       0       0       0
   542 ;;      Totals:         0       0       0       0       0       0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels required when called: 9
   545 ;; This function calls:
   546 ;;		_config_FOSC
   547 ;;		_config_INTERRUPT
   548 ;;		_config_IO
   549 ;;		_config_TIMER1
   550 ;;		_lcd_init
   551 ;;		_lcd_write
   552 ;;		_sprintf
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text0
   559   001402                     __ptext0:
   560                           	callstack 0
   561   001402                     _main:
   562                           	callstack 22
   563   001402                     
   564                           ;Program_main.c: 149:     config_FOSC();
   565   001402  EC55  F00B         	call	_config_FOSC	;wreg free
   566                           
   567                           ;Program_main.c: 150:     config_IO();
   568   001406  EC4E  F00B         	call	_config_IO	;wreg free
   569                           
   570                           ;Program_main.c: 151:     config_INTERRUPT();
   571   00140A  EC5A  F00B         	call	_config_INTERRUPT	;wreg free
   572                           
   573                           ;Program_main.c: 152:     config_TIMER1();
   574   00140E  EC47  F00B         	call	_config_TIMER1	;wreg free
   575   001412                     
   576                           ;Program_main.c: 153:     lcd_init();
   577   001412  ECB2  F009         	call	_lcd_init	;wreg free
   578   001416                     
   579                           ;Program_main.c: 155:     lcd_write(1,1, "REAL TIME CLOCK");
   580   001416  0E01               	movlw	1
   581   001418  6E08               	movwf	lcd_write@col^0,c
   582   00141A  0E11               	movlw	low STR_1
   583   00141C  6E09               	movwf	lcd_write@str^0,c
   584   00141E  0E06               	movlw	high STR_1
   585   001420  6E0A               	movwf	(lcd_write@str+1)^0,c
   586   001422  0E01               	movlw	1
   587   001424  EC62  F009         	call	_lcd_write
   588   001428                     l2239:
   589                           
   590                           ;Program_main.c: 158:     {;Program_main.c: 159:         sprintf(bufferLCD, "%02d:%02d:%
      +                          02d", timer_hor, timer_min, timer_seg);
   591   001428  0EA0               	movlw	low _bufferLCD
   592   00142A  6E5D               	movwf	sprintf@s^0,c
   593   00142C  0E00               	movlw	high _bufferLCD
   594   00142E  6E5E               	movwf	(sprintf@s+1)^0,c
   595   001430  0E21               	movlw	low STR_2
   596   001432  6E5F               	movwf	sprintf@fmt^0,c
   597   001434  0E06               	movlw	high STR_2
   598   001436  6E60               	movwf	(sprintf@fmt+1)^0,c
   599   001438  C06B  F061         	movff	_timer_hor,?_sprintf+4
   600   00143C  C06C  F062         	movff	_timer_hor+1,?_sprintf+5
   601   001440  C06D  F063         	movff	_timer_min,?_sprintf+6
   602   001444  C06E  F064         	movff	_timer_min+1,?_sprintf+7
   603   001448  C06F  F065         	movff	_timer_seg,?_sprintf+8
   604   00144C  C070  F066         	movff	_timer_seg+1,?_sprintf+9
   605   001450  EC37  F00A         	call	_sprintf	;wreg free
   606   001454                     
   607                           ;Program_main.c: 160:         lcd_write(2, 5, bufferLCD);
   608   001454  0E05               	movlw	5
   609   001456  6E08               	movwf	lcd_write@col^0,c
   610   001458  0EA0               	movlw	low _bufferLCD
   611   00145A  6E09               	movwf	lcd_write@str^0,c
   612   00145C  0E00               	movlw	high _bufferLCD
   613   00145E  6E0A               	movwf	(lcd_write@str+1)^0,c
   614   001460  0E02               	movlw	2
   615   001462  EC62  F009         	call	_lcd_write
   616   001466  EF14  F00A         	goto	l2239
   617   00146A  EF07  F000         	goto	start
   618   00146E                     __end_of_main:
   619                           	callstack 0
   620                           
   621 ;; *************** function _sprintf *****************
   622 ;; Defined at:
   623 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  s               2   92[COMRAM] PTR unsigned char 
   626 ;;		 -> bufferLCD(32), 
   627 ;;  fmt             2   94[COMRAM] PTR const unsigned char 
   628 ;;		 -> STR_2(15), 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  f              11    2[BANK0 ] struct _IO_FILE
   631 ;;  ap              2    0[BANK0 ] PTR void [1]
   632 ;;		 -> ?_sprintf(2), 
   633 ;;  ret             2    0        int 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  2   92[COMRAM] int 
   636 ;; Registers used:
   637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   643 ;;      Params:        10       0       0       0       0       0       0
   644 ;;      Locals:         0      13       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0
   646 ;;      Totals:        10      13       0       0       0       0       0
   647 ;;Total ram usage:       23 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 8
   650 ;; This function calls:
   651 ;;		_vfprintf
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text1
   658   00146E                     __ptext1:
   659                           	callstack 0
   660   00146E                     _sprintf:
   661                           	callstack 22
   662   00146E  0E61               	movlw	low (?_sprintf+4)
   663   001470  0100               	movlb	0	; () banked
   664   001472  6FC0               	movwf	sprintf@ap& (0+255),b
   665   001474  0E00               	movlw	high (?_sprintf+4)
   666   001476  6FC1               	movwf	(sprintf@ap+1)& (0+255),b
   667   001478  C05D  F0C2         	movff	sprintf@s,sprintf@f
   668   00147C  C05E  F0C3         	movff	sprintf@s+1,sprintf@f+1
   669   001480                     
   670                           ; BSR set to: 0
   671   001480  0E00               	movlw	0
   672   001482  6FC6               	movwf	(sprintf@f+4)& (0+255),b
   673   001484  0E00               	movlw	0
   674   001486  6FC5               	movwf	(sprintf@f+3)& (0+255),b
   675   001488                     
   676                           ; BSR set to: 0
   677   001488  0E00               	movlw	0
   678   00148A  6FCC               	movwf	(sprintf@f+10)& (0+255),b
   679   00148C  0E00               	movlw	0
   680   00148E  6FCB               	movwf	(sprintf@f+9)& (0+255),b
   681   001490                     
   682                           ; BSR set to: 0
   683   001490  0EC2               	movlw	low sprintf@f
   684   001492  6E55               	movwf	vfprintf@fp^0,c
   685   001494  0E00               	movlw	high sprintf@f
   686   001496  6E56               	movwf	(vfprintf@fp+1)^0,c
   687   001498  C05F  F057         	movff	sprintf@fmt,vfprintf@fmt
   688   00149C  C060  F058         	movff	sprintf@fmt+1,vfprintf@fmt+1
   689   0014A0  0EC0               	movlw	low sprintf@ap
   690   0014A2  6E59               	movwf	vfprintf@ap^0,c
   691   0014A4  0E00               	movlw	high sprintf@ap
   692   0014A6  6E5A               	movwf	(vfprintf@ap+1)^0,c
   693   0014A8  EC60  F00A         	call	_vfprintf	;wreg free
   694   0014AC  0100               	movlb	0	; () banked
   695   0014AE  51C5               	movf	(sprintf@f+3)& (0+255),w,b
   696   0014B0  245D               	addwf	sprintf@s^0,w,c
   697   0014B2  6ED9               	movwf	fsr2l,c
   698   0014B4  51C6               	movf	(sprintf@f+4)& (0+255),w,b
   699   0014B6  205E               	addwfc	(sprintf@s+1)^0,w,c
   700   0014B8  6EDA               	movwf	fsr2h,c
   701   0014BA  0E00               	movlw	0
   702   0014BC  6EDF               	movwf	indf2,c
   703   0014BE                     
   704                           ; BSR set to: 0
   705   0014BE  0012               	return		;funcret
   706   0014C0                     __end_of_sprintf:
   707                           	callstack 0
   708                           
   709 ;; *************** function _vfprintf *****************
   710 ;; Defined at:
   711 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  fp              2   84[COMRAM] PTR struct _IO_FILE
   714 ;;		 -> sprintf@f(11), 
   715 ;;  fmt             2   86[COMRAM] PTR const unsigned char 
   716 ;;		 -> STR_2(15), 
   717 ;;  ap              2   88[COMRAM] PTR PTR void 
   718 ;;		 -> sprintf@ap(2), 
   719 ;; Auto vars:     Size  Location     Type
   720 ;;  cfmt            2   90[COMRAM] PTR unsigned char 
   721 ;;		 -> STR_2(15), 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  2   84[COMRAM] int 
   724 ;; Registers used:
   725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   731 ;;      Params:         6       0       0       0       0       0       0
   732 ;;      Locals:         2       0       0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0
   734 ;;      Totals:         8       0       0       0       0       0       0
   735 ;;Total ram usage:        8 bytes
   736 ;; Hardware stack levels used: 1
   737 ;; Hardware stack levels required when called: 7
   738 ;; This function calls:
   739 ;;		_vfpfcnvrt
   740 ;; This function is called by:
   741 ;;		_sprintf
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text2
   746   0014C0                     __ptext2:
   747                           	callstack 0
   748   0014C0                     _vfprintf:
   749                           	callstack 22
   750   0014C0                     
   751                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   752   0014C0  C057  F05B         	movff	vfprintf@fmt,vfprintf@cfmt
   753   0014C4  C058  F05C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   754                           
   755                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   756   0014C8  EF74  F00A         	goto	l2215
   757   0014CC                     l2213:
   758                           
   759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   760   0014CC  C055  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   761   0014D0  C056  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   762   0014D4  0E5B               	movlw	low vfprintf@cfmt
   763   0014D6  6E42               	movwf	vfpfcnvrt@fmt^0,c
   764   0014D8  0E00               	movlw	high vfprintf@cfmt
   765   0014DA  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   766   0014DC  C059  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   767   0014E0  C05A  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   768   0014E4  EC73  F004         	call	_vfpfcnvrt	;wreg free
   769   0014E8                     l2215:
   770                           
   771                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   772   0014E8  C05B  FFF6         	movff	vfprintf@cfmt,tblptrl
   773   0014EC  C05C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   774   0014F0                     	if	0	;tblptru may be non-zero
   775   0014F0                     	endif
   776   0014F0                     	if	0	;tblptru may be non-zero
   777   0014F0                     	endif
   778   0014F0  0008               	tblrd		*
   779   0014F2  50F5               	movf	tablat,w,c
   780   0014F4  0900               	iorlw	0
   781   0014F6  A4D8               	btfss	status,2,c
   782   0014F8  EF80  F00A         	goto	u1771
   783   0014FC  EF82  F00A         	goto	u1770
   784   001500                     u1771:
   785   001500  EF66  F00A         	goto	l2213
   786   001504                     u1770:
   787   001504                     
   788                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   789   001504  0E00               	movlw	0
   790   001506  6E56               	movwf	(?_vfprintf+1)^0,c
   791   001508  0E00               	movlw	0
   792   00150A  6E55               	movwf	?_vfprintf^0,c
   793   00150C  0012               	return		;funcret
   794   00150E                     __end_of_vfprintf:
   795                           	callstack 0
   796                           
   797 ;; *************** function _vfpfcnvrt *****************
   798 ;; Defined at:
   799 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   802 ;;		 -> sprintf@f(11), 
   803 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   804 ;;		 -> vfprintf@cfmt(2), 
   805 ;;  ap              2   67[COMRAM] PTR PTR void 
   806 ;;		 -> sprintf@ap(2), 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  convarg         8   72[COMRAM] struct .
   809 ;;  cp              2   82[COMRAM] PTR unsigned char 
   810 ;;		 -> STR_2(15), 
   811 ;;  done            2   80[COMRAM] int 
   812 ;;  i               2    0        int 
   813 ;;  c               1    0        unsigned char 
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   823 ;;      Params:         6       0       0       0       0       0       0
   824 ;;      Locals:        12       0       0       0       0       0       0
   825 ;;      Temps:          3       0       0       0       0       0       0
   826 ;;      Totals:        21       0       0       0       0       0       0
   827 ;;Total ram usage:       21 bytes
   828 ;; Hardware stack levels used: 1
   829 ;; Hardware stack levels required when called: 6
   830 ;; This function calls:
   831 ;;		_atoi
   832 ;;		_dtoa
   833 ;;		_fputc
   834 ;;		_isdigit
   835 ;; This function is called by:
   836 ;;		_vfprintf
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text3
   841   0008E6                     __ptext3:
   842                           	callstack 0
   843   0008E6                     _vfpfcnvrt:
   844                           	callstack 22
   845   0008E6                     
   846                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   847   0008E6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   848   0008EA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   849   0008EE  CFDE FFF6          	movff	postinc2,tblptrl
   850   0008F2  CFDD FFF7          	movff	postdec2,tblptrh
   851   0008F6                     	if	0	;tblptru may be non-zero
   852   0008F6                     	endif
   853   0008F6                     	if	0	;tblptru may be non-zero
   854   0008F6                     	endif
   855   0008F6  0008               	tblrd		*
   856   0008F8  50F5               	movf	tablat,w,c
   857   0008FA  0A25               	xorlw	37
   858   0008FC  A4D8               	btfss	status,2,c
   859   0008FE  EF83  F004         	goto	u1701
   860   000902  EF85  F004         	goto	u1700
   861   000906                     u1701:
   862   000906  EFAB  F005         	goto	l2201
   863   00090A                     u1700:
   864   00090A                     
   865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   866   00090A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   867   00090E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   868   000912  2ADE               	incf	postinc2,f,c
   869   000914  0E00               	movlw	0
   870   000916  22DD               	addwfc	postdec2,f,c
   871   000918                     
   872                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   873   000918  0E00               	movlw	0
   874   00091A  6E68               	movwf	(_width+1)^0,c
   875   00091C  0E00               	movlw	0
   876   00091E  6E67               	movwf	_width^0,c
   877   000920  C067  F071         	movff	_width,_flags
   878   000924                     
   879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   880   000924  6869               	setf	_prec^0,c
   881   000926  686A               	setf	(_prec+1)^0,c
   882   000928                     
   883                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   884   000928  0E00               	movlw	0
   885   00092A  6E52               	movwf	(vfpfcnvrt@done+1)^0,c
   886   00092C  0E00               	movlw	0
   887   00092E  6E51               	movwf	vfpfcnvrt@done^0,c
   888                           
   889                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   890   000930  EFC4  F004         	goto	l2167
   891   000934                     l2157:
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   894   000934  8271               	bsf	_flags^0,1,c
   895   000936                     
   896                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   897   000936  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   898   00093A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   899   00093E  2ADE               	incf	postinc2,f,c
   900   000940  0E00               	movlw	0
   901   000942  22DD               	addwfc	postdec2,f,c
   902                           
   903                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   904   000944  EFC4  F004         	goto	l2167
   905   000948                     l2161:
   906                           
   907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   908   000948  0E00               	movlw	0
   909   00094A  6E52               	movwf	(vfpfcnvrt@done+1)^0,c
   910   00094C  0E01               	movlw	1
   911   00094E  6E51               	movwf	vfpfcnvrt@done^0,c
   912                           
   913                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   914   000950  EFC4  F004         	goto	l2167
   915   000954                     l2165:
   916   000954  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   917   000958  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   918   00095C  CFDE FFF6          	movff	postinc2,tblptrl
   919   000960  CFDD FFF7          	movff	postdec2,tblptrh
   920   000964                     	if	0	;tblptru may be non-zero
   921   000964                     	endif
   922   000964                     	if	0	;tblptru may be non-zero
   923   000964                     	endif
   924   000964  0008               	tblrd		*
   925   000966  50F5               	movf	tablat,w,c
   926   000968  6E46               	movwf	??_vfpfcnvrt^0,c
   927   00096A  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
   928                           
   929                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   930                           ; Switch size 1, requested type "simple"
   931                           ; Number of cases is 1, Range of values is 0 to 0
   932                           ; switch strategies available:
   933                           ; Name         Instructions Cycles
   934                           ; simple_byte            4     3 (average)
   935                           ;	Chosen strategy is simple_byte
   936   00096C  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
   937   00096E  0A00               	xorlw	0	; case 0
   938   000970  B4D8               	btfsc	status,2,c
   939   000972  EFBD  F004         	goto	l2283
   940   000976  EFA4  F004         	goto	l2161
   941   00097A                     l2283:
   942                           
   943                           ; Switch size 1, requested type "simple"
   944                           ; Number of cases is 1, Range of values is 48 to 48
   945                           ; switch strategies available:
   946                           ; Name         Instructions Cycles
   947                           ; simple_byte            4     3 (average)
   948                           ;	Chosen strategy is simple_byte
   949   00097A  5046               	movf	??_vfpfcnvrt^0,w,c
   950   00097C  0A30               	xorlw	48	; case 48
   951   00097E  B4D8               	btfsc	status,2,c
   952   000980  EF9A  F004         	goto	l2157
   953   000984  EFA4  F004         	goto	l2161
   954   000988                     l2167:
   955                           
   956                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   957   000988  5051               	movf	vfpfcnvrt@done^0,w,c
   958   00098A  1052               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   959   00098C  B4D8               	btfsc	status,2,c
   960   00098E  EFCB  F004         	goto	u1711
   961   000992  EFCD  F004         	goto	u1710
   962   000996                     u1711:
   963   000996  EFAA  F004         	goto	l2165
   964   00099A                     u1710:
   965   00099A                     
   966                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
   967   00099A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   968   00099E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   969   0009A2  CFDE FFF6          	movff	postinc2,tblptrl
   970   0009A6  CFDD FFF7          	movff	postdec2,tblptrh
   971   0009AA                     	if	0	;tblptru may be non-zero
   972   0009AA                     	endif
   973   0009AA                     	if	0	;tblptru may be non-zero
   974   0009AA                     	endif
   975   0009AA  0008               	tblrd		*
   976   0009AC  50F5               	movf	tablat,w,c
   977   0009AE  0A2A               	xorlw	42
   978   0009B0  A4D8               	btfss	status,2,c
   979   0009B2  EFDD  F004         	goto	u1721
   980   0009B6  EFDF  F004         	goto	u1720
   981   0009BA                     u1721:
   982   0009BA  EF08  F005         	goto	l2177
   983   0009BE                     u1720:
   984   0009BE                     
   985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
   986   0009BE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   987   0009C2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   988   0009C6  2ADE               	incf	postinc2,f,c
   989   0009C8  0E00               	movlw	0
   990   0009CA  22DD               	addwfc	postdec2,f,c
   991                           
   992                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
   993   0009CC  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   994   0009D0  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   995   0009D4  CFDF F046          	movff	indf2,??_vfpfcnvrt
   996   0009D8  0E02               	movlw	2
   997   0009DA  26DE               	addwf	postinc2,f,c
   998   0009DC  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   999   0009E0  0E00               	movlw	0
  1000   0009E2  22DD               	addwfc	postdec2,f,c
  1001   0009E4  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1002   0009E8  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1003   0009EC  CFDE F067          	movff	postinc2,_width
  1004   0009F0  CFDD F068          	movff	postdec2,_width+1
  1005   0009F4                     
  1006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1007   0009F4  BE68               	btfsc	(_width+1)^0,7,c
  1008   0009F6  EF01  F005         	goto	u1730
  1009   0009FA  EFFF  F004         	goto	u1731
  1010   0009FE                     u1731:
  1011   0009FE  EF3B  F005         	goto	l2185
  1012   000A02                     u1730:
  1013   000A02                     
  1014                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1015   000A02  8071               	bsf	_flags^0,0,c
  1016                           
  1017                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1018   000A04  6C67               	negf	_width^0,c
  1019   000A06  1E68               	comf	(_width+1)^0,f,c
  1020   000A08  B0D8               	btfsc	status,0,c
  1021   000A0A  2A68               	incf	(_width+1)^0,f,c
  1022   000A0C  EF3B  F005         	goto	l2185
  1023   000A10                     l2177:
  1024                           
  1025                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1026   000A10  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1027   000A14  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1028   000A18  CFDE F008          	movff	postinc2,atoi@s
  1029   000A1C  CFDD F009          	movff	postdec2,atoi@s+1
  1030   000A20  EC36  F007         	call	_atoi	;wreg free
  1031   000A24  C008  F067         	movff	?_atoi,_width
  1032   000A28  C009  F068         	movff	?_atoi+1,_width+1
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1035   000A2C  EF1F  F005         	goto	l2183
  1036   000A30                     l2179:
  1037                           
  1038                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1039   000A30  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1040   000A34  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1041   000A38  2ADE               	incf	postinc2,f,c
  1042   000A3A  0E00               	movlw	0
  1043   000A3C  22DD               	addwfc	postdec2,f,c
  1044   000A3E                     l2183:
  1045   000A3E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1046   000A42  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1047   000A46  CFDE FFF6          	movff	postinc2,tblptrl
  1048   000A4A  CFDD FFF7          	movff	postdec2,tblptrh
  1049   000A4E                     	if	0	;tblptru may be non-zero
  1050   000A4E                     	endif
  1051   000A4E                     	if	0	;tblptru may be non-zero
  1052   000A4E                     	endif
  1053   000A4E  0008               	tblrd		*
  1054   000A50  CFF5 F046          	movff	tablat,??_vfpfcnvrt
  1055   000A54  0ED0               	movlw	208
  1056   000A56  2446               	addwf	??_vfpfcnvrt^0,w,c
  1057   000A58  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  1058   000A5A  6A48               	clrf	(??_vfpfcnvrt+2)^0,c
  1059   000A5C  0EFF               	movlw	255
  1060   000A5E  2248               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1061   000A60  5048               	movf	(??_vfpfcnvrt+2)^0,w,c
  1062   000A62  E109               	bnz	u1740
  1063   000A64  0E0A               	movlw	10
  1064   000A66  5C47               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1065   000A68  A0D8               	btfss	status,0,c
  1066   000A6A  EF39  F005         	goto	u1741
  1067   000A6E  EF3B  F005         	goto	u1740
  1068   000A72                     u1741:
  1069   000A72  EF18  F005         	goto	l2179
  1070   000A76                     u1740:
  1071   000A76                     l2185:
  1072                           
  1073                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1074   000A76  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1075   000A7A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1076   000A7E  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
  1077   000A82  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
  1078   000A86                     
  1079                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1080   000A86  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1081   000A8A  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1082   000A8E                     	if	0	;tblptru may be non-zero
  1083   000A8E                     	endif
  1084   000A8E                     	if	0	;tblptru may be non-zero
  1085   000A8E                     	endif
  1086   000A8E  0008               	tblrd		*
  1087   000A90  50F5               	movf	tablat,w,c
  1088   000A92  0A64               	xorlw	100
  1089   000A94  B4D8               	btfsc	status,2,c
  1090   000A96  EF4F  F005         	goto	u1751
  1091   000A9A  EF51  F005         	goto	u1750
  1092   000A9E                     u1751:
  1093   000A9E  EF5F  F005         	goto	l2191
  1094   000AA2                     u1750:
  1095   000AA2  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1096   000AA6  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1097   000AAA                     	if	0	;tblptru may be non-zero
  1098   000AAA                     	endif
  1099   000AAA                     	if	0	;tblptru may be non-zero
  1100   000AAA                     	endif
  1101   000AAA  0008               	tblrd		*
  1102   000AAC  50F5               	movf	tablat,w,c
  1103   000AAE  0A69               	xorlw	105
  1104   000AB0  A4D8               	btfss	status,2,c
  1105   000AB2  EF5D  F005         	goto	u1761
  1106   000AB6  EF5F  F005         	goto	u1760
  1107   000ABA                     u1761:
  1108   000ABA  EFA2  F005         	goto	l2197
  1109   000ABE                     u1760:
  1110   000ABE                     l2191:
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1113   000ABE  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1114   000AC2  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1115   000AC6  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1116   000ACA  0E02               	movlw	2
  1117   000ACC  26DE               	addwf	postinc2,f,c
  1118   000ACE  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1119   000AD2  0E00               	movlw	0
  1120   000AD4  22DD               	addwfc	postdec2,f,c
  1121   000AD6  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1122   000ADA  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1123   000ADE  CFDE F049          	movff	postinc2,vfpfcnvrt@convarg
  1124   000AE2  CFDD F04A          	movff	postdec2,vfpfcnvrt@convarg+1
  1125   000AE6  0E00               	movlw	0
  1126   000AE8  BE4A               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1127   000AEA  0EFF               	movlw	-1
  1128   000AEC  6E4B               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1129   000AEE  6E4C               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1130   000AF0  6E4D               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1131   000AF2  6E4E               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1132   000AF4  6E4F               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1133   000AF6  6E50               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1134                           
  1135                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1136   000AF8  0E01               	movlw	1
  1137   000AFA  2453               	addwf	vfpfcnvrt@cp^0,w,c
  1138   000AFC  6E46               	movwf	??_vfpfcnvrt^0,c
  1139   000AFE  0E00               	movlw	0
  1140   000B00  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1141   000B02  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  1142   000B04  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1143   000B08  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1144   000B0C  C046  FFDE         	movff	??_vfpfcnvrt,postinc2
  1145   000B10  C047  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1146   000B14                     
  1147                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1148   000B14  C040  F01D         	movff	vfpfcnvrt@fp,dtoa@fp
  1149   000B18  C041  F01E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1150   000B1C  C049  F01F         	movff	vfpfcnvrt@convarg,dtoa@d
  1151   000B20  C04A  F020         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1152   000B24  C04B  F021         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1153   000B28  C04C  F022         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1154   000B2C  C04D  F023         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1155   000B30  C04E  F024         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1156   000B34  C04F  F025         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1157   000B38  C050  F026         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1158   000B3C  EC19  F003         	call	_dtoa	;wreg free
  1159   000B40  EFBF  F005         	goto	l868
  1160   000B44                     l2197:
  1161                           
  1162                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1163   000B44  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1164   000B48  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1165   000B4C  2ADE               	incf	postinc2,f,c
  1166   000B4E  0E00               	movlw	0
  1167   000B50  22DD               	addwfc	postdec2,f,c
  1168   000B52  EFBF  F005         	goto	l868
  1169   000B56                     l2201:
  1170                           
  1171                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1172   000B56  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1173   000B5A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1174   000B5E  CFDE FFF6          	movff	postinc2,tblptrl
  1175   000B62  CFDD FFF7          	movff	postdec2,tblptrh
  1176   000B66                     	if	0	;tblptru may be non-zero
  1177   000B66                     	endif
  1178   000B66                     	if	0	;tblptru may be non-zero
  1179   000B66                     	endif
  1180   000B66  0008               	tblrd		*
  1181   000B68  50F5               	movf	tablat,w,c
  1182   000B6A  6E02               	movwf	fputc@c^0,c
  1183   000B6C  6A03               	clrf	(fputc@c+1)^0,c
  1184   000B6E  C040  F004         	movff	vfpfcnvrt@fp,fputc@fp
  1185   000B72  C041  F005         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1186   000B76  EC4D  F008         	call	_fputc	;wreg free
  1187   000B7A  EFA2  F005         	goto	l2197
  1188   000B7E                     l868:
  1189   000B7E  0012               	return		;funcret
  1190   000B80                     __end_of_vfpfcnvrt:
  1191                           	callstack 0
  1192                           
  1193 ;; *************** function _dtoa *****************
  1194 ;; Defined at:
  1195 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
  1198 ;;		 -> sprintf@f(11), 
  1199 ;;  d               8   30[COMRAM] long long 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  n               8   52[COMRAM] long long 
  1202 ;;  i               2   61[COMRAM] int 
  1203 ;;  w               2   50[COMRAM] int 
  1204 ;;  p               2   48[COMRAM] int 
  1205 ;;  s               1   60[COMRAM] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1215 ;;      Params:        10       0       0       0       0       0       0
  1216 ;;      Locals:        17       0       0       0       0       0       0
  1217 ;;      Temps:          8       0       0       0       0       0       0
  1218 ;;      Totals:        35       0       0       0       0       0       0
  1219 ;;Total ram usage:       35 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; Hardware stack levels required when called: 5
  1222 ;; This function calls:
  1223 ;;		___aodiv
  1224 ;;		___aomod
  1225 ;;		_abs
  1226 ;;		_pad
  1227 ;; This function is called by:
  1228 ;;		_vfpfcnvrt
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text4
  1233   000632                     __ptext4:
  1234                           	callstack 0
  1235   000632                     _dtoa:
  1236                           	callstack 22
  1237   000632                     
  1238                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1239   000632  C01F  F035         	movff	dtoa@d,dtoa@n
  1240   000636  C020  F036         	movff	dtoa@d+1,dtoa@n+1
  1241   00063A  C021  F037         	movff	dtoa@d+2,dtoa@n+2
  1242   00063E  C022  F038         	movff	dtoa@d+3,dtoa@n+3
  1243   000642  C023  F039         	movff	dtoa@d+4,dtoa@n+4
  1244   000646  C024  F03A         	movff	dtoa@d+5,dtoa@n+5
  1245   00064A  C025  F03B         	movff	dtoa@d+6,dtoa@n+6
  1246   00064E  C026  F03C         	movff	dtoa@d+7,dtoa@n+7
  1247   000652                     
  1248                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1249   000652  BE3C               	btfsc	(dtoa@n+7)^0,7,c
  1250   000654  EF2E  F003         	goto	u1531
  1251   000658  EF31  F003         	goto	u1530
  1252   00065C                     u1531:
  1253   00065C  0E01               	movlw	1
  1254   00065E  EF32  F003         	goto	u1540
  1255   000662                     u1530:
  1256   000662  0E00               	movlw	0
  1257   000664                     u1540:
  1258   000664  6E3D               	movwf	dtoa@s^0,c
  1259   000666                     
  1260                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1261   000666  503D               	movf	dtoa@s^0,w,c
  1262   000668  B4D8               	btfsc	status,2,c
  1263   00066A  EF39  F003         	goto	u1551
  1264   00066E  EF3B  F003         	goto	u1550
  1265   000672                     u1551:
  1266   000672  EF4B  F003         	goto	l2063
  1267   000676                     u1550:
  1268   000676                     
  1269                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1270   000676  1E3C               	comf	(dtoa@n+7)^0,f,c
  1271   000678  1E3B               	comf	(dtoa@n+6)^0,f,c
  1272   00067A  1E3A               	comf	(dtoa@n+5)^0,f,c
  1273   00067C  1E39               	comf	(dtoa@n+4)^0,f,c
  1274   00067E  1E38               	comf	(dtoa@n+3)^0,f,c
  1275   000680  1E37               	comf	(dtoa@n+2)^0,f,c
  1276   000682  1E36               	comf	(dtoa@n+1)^0,f,c
  1277   000684  6C35               	negf	dtoa@n^0,c
  1278   000686  0E00               	movlw	0
  1279   000688  2236               	addwfc	(dtoa@n+1)^0,f,c
  1280   00068A  2237               	addwfc	(dtoa@n+2)^0,f,c
  1281   00068C  2238               	addwfc	(dtoa@n+3)^0,f,c
  1282   00068E  2239               	addwfc	(dtoa@n+4)^0,f,c
  1283   000690  223A               	addwfc	(dtoa@n+5)^0,f,c
  1284   000692  223B               	addwfc	(dtoa@n+6)^0,f,c
  1285   000694  223C               	addwfc	(dtoa@n+7)^0,f,c
  1286   000696                     l2063:
  1287                           
  1288                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1289   000696  BE6A               	btfsc	(_prec+1)^0,7,c
  1290   000698  EF50  F003         	goto	u1561
  1291   00069C  EF52  F003         	goto	u1560
  1292   0006A0                     u1561:
  1293   0006A0  EF53  F003         	goto	l2067
  1294   0006A4                     u1560:
  1295   0006A4                     
  1296                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1297   0006A4  9271               	bcf	_flags^0,1,c
  1298   0006A6                     l2067:
  1299                           
  1300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1301   0006A6  BE6A               	btfsc	(_prec+1)^0,7,c
  1302   0006A8  EF60  F003         	goto	u1570
  1303   0006AC  506A               	movf	(_prec+1)^0,w,c
  1304   0006AE  E106               	bnz	u1571
  1305   0006B0  0469               	decf	_prec^0,w,c
  1306   0006B2  B0D8               	btfsc	status,0,c
  1307   0006B4  EF5E  F003         	goto	u1571
  1308   0006B8  EF60  F003         	goto	u1570
  1309   0006BC                     u1571:
  1310   0006BC  EF66  F003         	goto	l830
  1311   0006C0                     u1570:
  1312   0006C0  0E00               	movlw	0
  1313   0006C2  6E32               	movwf	(dtoa@p+1)^0,c
  1314   0006C4  0E01               	movlw	1
  1315   0006C6  6E31               	movwf	dtoa@p^0,c
  1316   0006C8  EF6A  F003         	goto	l832
  1317   0006CC                     l830:
  1318   0006CC  C069  F031         	movff	_prec,dtoa@p
  1319   0006D0  C06A  F032         	movff	_prec+1,dtoa@p+1
  1320   0006D4                     l832:
  1321                           
  1322                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1323   0006D4  C067  F033         	movff	_width,dtoa@w
  1324   0006D8  C068  F034         	movff	_width+1,dtoa@w+1
  1325   0006DC                     
  1326                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1327   0006DC  503D               	movf	dtoa@s^0,w,c
  1328   0006DE  B4D8               	btfsc	status,2,c
  1329   0006E0  EF74  F003         	goto	u1581
  1330   0006E4  EF76  F003         	goto	u1580
  1331   0006E8                     u1581:
  1332   0006E8  EF8D  F003         	goto	l833
  1333   0006EC                     u1580:
  1334   0006EC                     
  1335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1336   0006EC  0633               	decf	dtoa@w^0,f,c
  1337   0006EE  A0D8               	btfss	status,0,c
  1338   0006F0  0634               	decf	(dtoa@w+1)^0,f,c
  1339   0006F2                     
  1340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1341   0006F2  503D               	movf	dtoa@s^0,w,c
  1342   0006F4  A4D8               	btfss	status,2,c
  1343   0006F6  EF7F  F003         	goto	u1591
  1344   0006FA  EF81  F003         	goto	u1590
  1345   0006FE                     u1591:
  1346   0006FE  EF87  F003         	goto	l2079
  1347   000702                     u1590:
  1348   000702  0E00               	movlw	0
  1349   000704  6E30               	movwf	(_dtoa$995+1)^0,c
  1350   000706  0E2B               	movlw	43
  1351   000708  6E2F               	movwf	_dtoa$995^0,c
  1352   00070A  EF8B  F003         	goto	l2081
  1353   00070E                     l2079:
  1354   00070E  0E00               	movlw	0
  1355   000710  6E30               	movwf	(_dtoa$995+1)^0,c
  1356   000712  0E2D               	movlw	45
  1357   000714  6E2F               	movwf	_dtoa$995^0,c
  1358   000716                     l2081:
  1359   000716  C02F  F03D         	movff	_dtoa$995,dtoa@s
  1360   00071A                     l833:
  1361                           
  1362                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1363   00071A  0E00               	movlw	0
  1364   00071C  6E3F               	movwf	(dtoa@i+1)^0,c
  1365   00071E  0E1F               	movlw	31
  1366   000720  6E3E               	movwf	dtoa@i^0,c
  1367   000722                     
  1368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1369   000722  0E00               	movlw	0
  1370   000724  0100               	movlb	0	; () banked
  1371   000726  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1372                           
  1373                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1374   000728  EF12  F004         	goto	l2095
  1375   00072C                     l2085:
  1376                           
  1377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1378   00072C  063E               	decf	dtoa@i^0,f,c
  1379   00072E  A0D8               	btfss	status,0,c
  1380   000730  063F               	decf	(dtoa@i+1)^0,f,c
  1381   000732                     
  1382                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1383   000732  0E80               	movlw	low _dbuf
  1384   000734  243E               	addwf	dtoa@i^0,w,c
  1385   000736  6ED9               	movwf	fsr2l,c
  1386   000738  0E00               	movlw	high _dbuf
  1387   00073A  203F               	addwfc	(dtoa@i+1)^0,w,c
  1388   00073C  6EDA               	movwf	fsr2h,c
  1389   00073E  C035  F002         	movff	dtoa@n,___aomod@dividend
  1390   000742  C036  F003         	movff	dtoa@n+1,___aomod@dividend+1
  1391   000746  C037  F004         	movff	dtoa@n+2,___aomod@dividend+2
  1392   00074A  C038  F005         	movff	dtoa@n+3,___aomod@dividend+3
  1393   00074E  C039  F006         	movff	dtoa@n+4,___aomod@dividend+4
  1394   000752  C03A  F007         	movff	dtoa@n+5,___aomod@dividend+5
  1395   000756  C03B  F008         	movff	dtoa@n+6,___aomod@dividend+6
  1396   00075A  C03C  F009         	movff	dtoa@n+7,___aomod@dividend+7
  1397   00075E  0E0A               	movlw	10
  1398   000760  6E0A               	movwf	___aomod@divisor^0,c
  1399   000762  0E00               	movlw	0
  1400   000764  6E0B               	movwf	(___aomod@divisor+1)^0,c
  1401   000766  0E00               	movlw	0
  1402   000768  6E0C               	movwf	(___aomod@divisor+2)^0,c
  1403   00076A  0E00               	movlw	0
  1404   00076C  6E0D               	movwf	(___aomod@divisor+3)^0,c
  1405   00076E  0E00               	movlw	0
  1406   000770  6E0E               	movwf	(___aomod@divisor+4)^0,c
  1407   000772  0E00               	movlw	0
  1408   000774  6E0F               	movwf	(___aomod@divisor+5)^0,c
  1409   000776  0E00               	movlw	0
  1410   000778  6E10               	movwf	(___aomod@divisor+6)^0,c
  1411   00077A  0E00               	movlw	0
  1412   00077C  6E11               	movwf	(___aomod@divisor+7)^0,c
  1413   00077E  EC84  F006         	call	___aomod	;wreg free
  1414   000782  C002  F027         	movff	?___aomod,??_dtoa
  1415   000786  C003  F028         	movff	?___aomod+1,??_dtoa+1
  1416   00078A  C004  F029         	movff	?___aomod+2,??_dtoa+2
  1417   00078E  C005  F02A         	movff	?___aomod+3,??_dtoa+3
  1418   000792  C006  F02B         	movff	?___aomod+4,??_dtoa+4
  1419   000796  C007  F02C         	movff	?___aomod+5,??_dtoa+5
  1420   00079A  C008  F02D         	movff	?___aomod+6,??_dtoa+6
  1421   00079E  C009  F02E         	movff	?___aomod+7,??_dtoa+7
  1422   0007A2  C027  F014         	movff	??_dtoa,abs@a
  1423   0007A6  C028  F015         	movff	??_dtoa+1,abs@a+1
  1424   0007AA  ECCC  F00A         	call	_abs	;wreg free
  1425   0007AE  5014               	movf	?_abs^0,w,c
  1426   0007B0  0F30               	addlw	48
  1427   0007B2  6EDF               	movwf	indf2,c
  1428   0007B4                     
  1429                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1430   0007B4  0631               	decf	dtoa@p^0,f,c
  1431   0007B6  A0D8               	btfss	status,0,c
  1432   0007B8  0632               	decf	(dtoa@p+1)^0,f,c
  1433   0007BA                     
  1434                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1435   0007BA  0633               	decf	dtoa@w^0,f,c
  1436   0007BC  A0D8               	btfss	status,0,c
  1437   0007BE  0634               	decf	(dtoa@w+1)^0,f,c
  1438   0007C0                     
  1439                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1440   0007C0  C035  F002         	movff	dtoa@n,___aodiv@dividend
  1441   0007C4  C036  F003         	movff	dtoa@n+1,___aodiv@dividend+1
  1442   0007C8  C037  F004         	movff	dtoa@n+2,___aodiv@dividend+2
  1443   0007CC  C038  F005         	movff	dtoa@n+3,___aodiv@dividend+3
  1444   0007D0  C039  F006         	movff	dtoa@n+4,___aodiv@dividend+4
  1445   0007D4  C03A  F007         	movff	dtoa@n+5,___aodiv@dividend+5
  1446   0007D8  C03B  F008         	movff	dtoa@n+6,___aodiv@dividend+6
  1447   0007DC  C03C  F009         	movff	dtoa@n+7,___aodiv@dividend+7
  1448   0007E0  0E0A               	movlw	10
  1449   0007E2  6E0A               	movwf	___aodiv@divisor^0,c
  1450   0007E4  0E00               	movlw	0
  1451   0007E6  6E0B               	movwf	(___aodiv@divisor+1)^0,c
  1452   0007E8  0E00               	movlw	0
  1453   0007EA  6E0C               	movwf	(___aodiv@divisor+2)^0,c
  1454   0007EC  0E00               	movlw	0
  1455   0007EE  6E0D               	movwf	(___aodiv@divisor+3)^0,c
  1456   0007F0  0E00               	movlw	0
  1457   0007F2  6E0E               	movwf	(___aodiv@divisor+4)^0,c
  1458   0007F4  0E00               	movlw	0
  1459   0007F6  6E0F               	movwf	(___aodiv@divisor+5)^0,c
  1460   0007F8  0E00               	movlw	0
  1461   0007FA  6E10               	movwf	(___aodiv@divisor+6)^0,c
  1462   0007FC  0E00               	movlw	0
  1463   0007FE  6E11               	movwf	(___aodiv@divisor+7)^0,c
  1464   000800  ECC0  F005         	call	___aodiv	;wreg free
  1465   000804  C002  F035         	movff	?___aodiv,dtoa@n
  1466   000808  C003  F036         	movff	?___aodiv+1,dtoa@n+1
  1467   00080C  C004  F037         	movff	?___aodiv+2,dtoa@n+2
  1468   000810  C005  F038         	movff	?___aodiv+3,dtoa@n+3
  1469   000814  C006  F039         	movff	?___aodiv+4,dtoa@n+4
  1470   000818  C007  F03A         	movff	?___aodiv+5,dtoa@n+5
  1471   00081C  C008  F03B         	movff	?___aodiv+6,dtoa@n+6
  1472   000820  C009  F03C         	movff	?___aodiv+7,dtoa@n+7
  1473   000824                     l2095:
  1474                           
  1475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1476   000824  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1477   000826  EF1D  F004         	goto	u1601
  1478   00082A  503F               	movf	(dtoa@i+1)^0,w,c
  1479   00082C  E108               	bnz	u1600
  1480   00082E  043E               	decf	dtoa@i^0,w,c
  1481   000830  A0D8               	btfss	status,0,c
  1482   000832  EF1D  F004         	goto	u1601
  1483   000836  EF1F  F004         	goto	u1600
  1484   00083A                     u1601:
  1485   00083A  EF4F  F004         	goto	l2105
  1486   00083E                     u1600:
  1487   00083E  5035               	movf	dtoa@n^0,w,c
  1488   000840  1036               	iorwf	(dtoa@n+1)^0,w,c
  1489   000842  1037               	iorwf	(dtoa@n+2)^0,w,c
  1490   000844  1038               	iorwf	(dtoa@n+3)^0,w,c
  1491   000846  1039               	iorwf	(dtoa@n+4)^0,w,c
  1492   000848  103A               	iorwf	(dtoa@n+5)^0,w,c
  1493   00084A  103B               	iorwf	(dtoa@n+6)^0,w,c
  1494   00084C  103C               	iorwf	(dtoa@n+7)^0,w,c
  1495   00084E  A4D8               	btfss	status,2,c
  1496   000850  EF2C  F004         	goto	u1611
  1497   000854  EF2E  F004         	goto	u1610
  1498   000858                     u1611:
  1499   000858  EF96  F003         	goto	l2085
  1500   00085C                     u1610:
  1501   00085C  BE32               	btfsc	(dtoa@p+1)^0,7,c
  1502   00085E  EF3B  F004         	goto	u1620
  1503   000862  5032               	movf	(dtoa@p+1)^0,w,c
  1504   000864  E106               	bnz	u1621
  1505   000866  0431               	decf	dtoa@p^0,w,c
  1506   000868  B0D8               	btfsc	status,0,c
  1507   00086A  EF39  F004         	goto	u1621
  1508   00086E  EF3B  F004         	goto	u1620
  1509   000872                     u1621:
  1510   000872  EF96  F003         	goto	l2085
  1511   000876                     u1620:
  1512   000876  BE34               	btfsc	(dtoa@w+1)^0,7,c
  1513   000878  EF46  F004         	goto	u1631
  1514   00087C  5034               	movf	(dtoa@w+1)^0,w,c
  1515   00087E  E108               	bnz	u1630
  1516   000880  0433               	decf	dtoa@w^0,w,c
  1517   000882  A0D8               	btfss	status,0,c
  1518   000884  EF46  F004         	goto	u1631
  1519   000888  EF48  F004         	goto	u1630
  1520   00088C                     u1631:
  1521   00088C  EF4F  F004         	goto	l2105
  1522   000890                     u1630:
  1523   000890  B271               	btfsc	_flags^0,1,c
  1524   000892  EF4D  F004         	goto	u1641
  1525   000896  EF4F  F004         	goto	u1640
  1526   00089A                     u1641:
  1527   00089A  EF96  F003         	goto	l2085
  1528   00089E                     u1640:
  1529   00089E                     l2105:
  1530                           
  1531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1532   00089E  503D               	movf	dtoa@s^0,w,c
  1533   0008A0  B4D8               	btfsc	status,2,c
  1534   0008A2  EF55  F004         	goto	u1651
  1535   0008A6  EF57  F004         	goto	u1650
  1536   0008AA                     u1651:
  1537   0008AA  EF62  F004         	goto	l2111
  1538   0008AE                     u1650:
  1539   0008AE                     
  1540                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1541   0008AE  063E               	decf	dtoa@i^0,f,c
  1542   0008B0  A0D8               	btfss	status,0,c
  1543   0008B2  063F               	decf	(dtoa@i+1)^0,f,c
  1544   0008B4                     
  1545                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1546   0008B4  0E80               	movlw	low _dbuf
  1547   0008B6  243E               	addwf	dtoa@i^0,w,c
  1548   0008B8  6ED9               	movwf	fsr2l,c
  1549   0008BA  0E00               	movlw	high _dbuf
  1550   0008BC  203F               	addwfc	(dtoa@i+1)^0,w,c
  1551   0008BE  6EDA               	movwf	fsr2h,c
  1552   0008C0  C03D  FFDF         	movff	dtoa@s,indf2
  1553   0008C4                     l2111:
  1554                           
  1555                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1556   0008C4  C01D  F012         	movff	dtoa@fp,pad@fp
  1557   0008C8  C01E  F013         	movff	dtoa@fp+1,pad@fp+1
  1558   0008CC  0E80               	movlw	low _dbuf
  1559   0008CE  243E               	addwf	dtoa@i^0,w,c
  1560   0008D0  6E14               	movwf	pad@buf^0,c
  1561   0008D2  0E00               	movlw	high _dbuf
  1562   0008D4  203F               	addwfc	(dtoa@i+1)^0,w,c
  1563   0008D6  6E15               	movwf	(pad@buf+1)^0,c
  1564   0008D8  C033  F016         	movff	dtoa@w,pad@p
  1565   0008DC  C034  F017         	movff	dtoa@w+1,pad@p+1
  1566   0008E0  EC0D  F009         	call	_pad	;wreg free
  1567   0008E4  0012               	return		;funcret
  1568   0008E6                     __end_of_dtoa:
  1569                           	callstack 0
  1570                           
  1571 ;; *************** function _pad *****************
  1572 ;; Defined at:
  1573 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1576 ;;		 -> sprintf@f(11), 
  1577 ;;  buf             2   19[COMRAM] PTR unsigned char 
  1578 ;;		 -> dbuf(32), 
  1579 ;;  p               2   21[COMRAM] int 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  w               2   26[COMRAM] int 
  1582 ;;  i               2   24[COMRAM] int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1592 ;;      Params:         6       0       0       0       0       0       0
  1593 ;;      Locals:         4       0       0       0       0       0       0
  1594 ;;      Temps:          1       0       0       0       0       0       0
  1595 ;;      Totals:        11       0       0       0       0       0       0
  1596 ;;Total ram usage:       11 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 4
  1599 ;; This function calls:
  1600 ;;		_fputc
  1601 ;;		_fputs
  1602 ;; This function is called by:
  1603 ;;		_dtoa
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text5
  1608   00121A                     __ptext5:
  1609                           	callstack 0
  1610   00121A                     _pad:
  1611                           	callstack 22
  1612   00121A                     
  1613                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1614   00121A  A071               	btfss	_flags^0,0,c
  1615   00121C  EF12  F009         	goto	u1441
  1616   001220  EF14  F009         	goto	u1440
  1617   001224                     u1441:
  1618   001224  EF1E  F009         	goto	l2021
  1619   001228                     u1440:
  1620   001228                     
  1621                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1622   001228  C014  F00B         	movff	pad@buf,fputs@s
  1623   00122C  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1624   001230  C012  F00D         	movff	pad@fp,fputs@fp
  1625   001234  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1626   001238  ECAA  F00A         	call	_fputs	;wreg free
  1627   00123C                     l2021:
  1628                           
  1629                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1630   00123C  BE17               	btfsc	(pad@p+1)^0,7,c
  1631   00123E  EF23  F009         	goto	u1451
  1632   001242  EF25  F009         	goto	u1450
  1633   001246                     u1451:
  1634   001246  EF2B  F009         	goto	l2025
  1635   00124A                     u1450:
  1636   00124A  C016  F01B         	movff	pad@p,pad@w
  1637   00124E  C017  F01C         	movff	pad@p+1,pad@w+1
  1638   001252  EF2F  F009         	goto	l819
  1639   001256                     l2025:
  1640   001256  0E00               	movlw	0
  1641   001258  6E1C               	movwf	(pad@w+1)^0,c
  1642   00125A  0E00               	movlw	0
  1643   00125C  6E1B               	movwf	pad@w^0,c
  1644   00125E                     l819:
  1645                           
  1646                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1647   00125E  0E00               	movlw	0
  1648   001260  6E1A               	movwf	(pad@i+1)^0,c
  1649   001262  0E00               	movlw	0
  1650   001264  6E19               	movwf	pad@i^0,c
  1651                           
  1652                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1653   001266  EF41  F009         	goto	l2031
  1654   00126A                     l2027:
  1655                           
  1656                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1657   00126A  0E00               	movlw	0
  1658   00126C  6E03               	movwf	(fputc@c+1)^0,c
  1659   00126E  0E20               	movlw	32
  1660   001270  6E02               	movwf	fputc@c^0,c
  1661   001272  C012  F004         	movff	pad@fp,fputc@fp
  1662   001276  C013  F005         	movff	pad@fp+1,fputc@fp+1
  1663   00127A  EC4D  F008         	call	_fputc	;wreg free
  1664   00127E                     
  1665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1666   00127E  4A19               	infsnz	pad@i^0,f,c
  1667   001280  2A1A               	incf	(pad@i+1)^0,f,c
  1668   001282                     l2031:
  1669                           
  1670                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1671   001282  501B               	movf	pad@w^0,w,c
  1672   001284  5C19               	subwf	pad@i^0,w,c
  1673   001286  501A               	movf	(pad@i+1)^0,w,c
  1674   001288  0A80               	xorlw	128
  1675   00128A  6E18               	movwf	??_pad^0,c
  1676   00128C  501C               	movf	(pad@w+1)^0,w,c
  1677   00128E  0A80               	xorlw	128
  1678   001290  5818               	subwfb	??_pad^0,w,c
  1679   001292  A0D8               	btfss	status,0,c
  1680   001294  EF4E  F009         	goto	u1461
  1681   001298  EF50  F009         	goto	u1460
  1682   00129C                     u1461:
  1683   00129C  EF35  F009         	goto	l2027
  1684   0012A0                     u1460:
  1685   0012A0                     
  1686                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1687   0012A0  B071               	btfsc	_flags^0,0,c
  1688   0012A2  EF55  F009         	goto	u1471
  1689   0012A6  EF57  F009         	goto	u1470
  1690   0012AA                     u1471:
  1691   0012AA  EF61  F009         	goto	l824
  1692   0012AE                     u1470:
  1693   0012AE                     
  1694                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1695   0012AE  C014  F00B         	movff	pad@buf,fputs@s
  1696   0012B2  C015  F00C         	movff	pad@buf+1,fputs@s+1
  1697   0012B6  C012  F00D         	movff	pad@fp,fputs@fp
  1698   0012BA  C013  F00E         	movff	pad@fp+1,fputs@fp+1
  1699   0012BE  ECAA  F00A         	call	_fputs	;wreg free
  1700   0012C2                     l824:
  1701   0012C2  0012               	return		;funcret
  1702   0012C4                     __end_of_pad:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _fputs *****************
  1706 ;; Defined at:
  1707 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  s               2   10[COMRAM] PTR const unsigned char 
  1710 ;;		 -> dbuf(32), 
  1711 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  1712 ;;		 -> sprintf@f(11), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  i               2   15[COMRAM] int 
  1715 ;;  c               1   14[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2   10[COMRAM] int 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         4       0       0       0       0       0       0
  1726 ;;      Locals:         3       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:         7       0       0       0       0       0       0
  1729 ;;Total ram usage:        7 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 3
  1732 ;; This function calls:
  1733 ;;		_fputc
  1734 ;; This function is called by:
  1735 ;;		_pad
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text6
  1740   001554                     __ptext6:
  1741                           	callstack 0
  1742   001554                     _fputs:
  1743                           	callstack 22
  1744   001554  0E00               	movlw	0
  1745   001556  6E11               	movwf	(fputs@i+1)^0,c
  1746   001558  0E00               	movlw	0
  1747   00155A  6E10               	movwf	fputs@i^0,c
  1748   00155C  EFBB  F00A         	goto	l1929
  1749   001560                     l1925:
  1750   001560  C00F  F002         	movff	fputs@c,fputc@c
  1751   001564  6A03               	clrf	(fputc@c+1)^0,c
  1752   001566  C00D  F004         	movff	fputs@fp,fputc@fp
  1753   00156A  C00E  F005         	movff	fputs@fp+1,fputc@fp+1
  1754   00156E  EC4D  F008         	call	_fputc	;wreg free
  1755   001572  4A10               	infsnz	fputs@i^0,f,c
  1756   001574  2A11               	incf	(fputs@i+1)^0,f,c
  1757   001576                     l1929:
  1758   001576  5010               	movf	fputs@i^0,w,c
  1759   001578  240B               	addwf	fputs@s^0,w,c
  1760   00157A  6ED9               	movwf	fsr2l,c
  1761   00157C  5011               	movf	(fputs@i+1)^0,w,c
  1762   00157E  200C               	addwfc	(fputs@s+1)^0,w,c
  1763   001580  6EDA               	movwf	fsr2h,c
  1764   001582  50DF               	movf	indf2,w,c
  1765   001584  6E0F               	movwf	fputs@c^0,c
  1766   001586  500F               	movf	fputs@c^0,w,c
  1767   001588  A4D8               	btfss	status,2,c
  1768   00158A  EFC9  F00A         	goto	u1301
  1769   00158E  EFCB  F00A         	goto	u1300
  1770   001592                     u1301:
  1771   001592  EFB0  F00A         	goto	l1925
  1772   001596                     u1300:
  1773   001596  0012               	return		;funcret
  1774   001598                     __end_of_fputs:
  1775                           	callstack 0
  1776                           
  1777 ;; *************** function _fputc *****************
  1778 ;; Defined at:
  1779 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  c               2    1[COMRAM] int 
  1782 ;;  fp              2    3[COMRAM] PTR struct _IO_FILE
  1783 ;;		 -> sprintf@f(11), 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  2    1[COMRAM] int 
  1788 ;; Registers used:
  1789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1795 ;;      Params:         4       0       0       0       0       0       0
  1796 ;;      Locals:         0       0       0       0       0       0       0
  1797 ;;      Temps:          5       0       0       0       0       0       0
  1798 ;;      Totals:         9       0       0       0       0       0       0
  1799 ;;Total ram usage:        9 bytes
  1800 ;; Hardware stack levels used: 1
  1801 ;; Hardware stack levels required when called: 2
  1802 ;; This function calls:
  1803 ;;		_putch
  1804 ;; This function is called by:
  1805 ;;		_pad
  1806 ;;		_vfpfcnvrt
  1807 ;;		_fputs
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text7
  1812   00109A                     __ptext7:
  1813                           	callstack 0
  1814   00109A                     _fputc:
  1815                           	callstack 25
  1816   00109A  5004               	movf	fputc@fp^0,w,c
  1817   00109C  1005               	iorwf	(fputc@fp+1)^0,w,c
  1818   00109E  B4D8               	btfsc	status,2,c
  1819   0010A0  EF54  F008         	goto	u1261
  1820   0010A4  EF56  F008         	goto	u1260
  1821   0010A8                     u1261:
  1822   0010A8  EF5F  F008         	goto	l1913
  1823   0010AC                     u1260:
  1824   0010AC  5004               	movf	fputc@fp^0,w,c
  1825   0010AE  1005               	iorwf	(fputc@fp+1)^0,w,c
  1826   0010B0  A4D8               	btfss	status,2,c
  1827   0010B2  EF5D  F008         	goto	u1271
  1828   0010B6  EF5F  F008         	goto	u1270
  1829   0010BA                     u1271:
  1830   0010BA  EF64  F008         	goto	l1915
  1831   0010BE                     u1270:
  1832   0010BE                     l1913:
  1833   0010BE  5002               	movf	fputc@c^0,w,c
  1834   0010C0  EC5E  F00B         	call	_putch
  1835   0010C4  EFB1  F008         	goto	l932
  1836   0010C8                     l1915:
  1837   0010C8  EE20 F009          	lfsr	2,9
  1838   0010CC  5004               	movf	fputc@fp^0,w,c
  1839   0010CE  26D9               	addwf	fsr2l,f,c
  1840   0010D0  5005               	movf	(fputc@fp+1)^0,w,c
  1841   0010D2  22DA               	addwfc	fsr2h,f,c
  1842   0010D4  50DE               	movf	postinc2,w,c
  1843   0010D6  10DE               	iorwf	postinc2,w,c
  1844   0010D8  B4D8               	btfsc	status,2,c
  1845   0010DA  EF71  F008         	goto	u1281
  1846   0010DE  EF73  F008         	goto	u1280
  1847   0010E2                     u1281:
  1848   0010E2  EF8E  F008         	goto	l1919
  1849   0010E6                     u1280:
  1850   0010E6  EE20 F009          	lfsr	2,9
  1851   0010EA  5004               	movf	fputc@fp^0,w,c
  1852   0010EC  26D9               	addwf	fsr2l,f,c
  1853   0010EE  5005               	movf	(fputc@fp+1)^0,w,c
  1854   0010F0  22DA               	addwfc	fsr2h,f,c
  1855   0010F2  EE10 F003          	lfsr	1,3
  1856   0010F6  5004               	movf	fputc@fp^0,w,c
  1857   0010F8  26E1               	addwf	fsr1l,f,c
  1858   0010FA  5005               	movf	(fputc@fp+1)^0,w,c
  1859   0010FC  22E2               	addwfc	fsr1h,f,c
  1860   0010FE  50DE               	movf	postinc2,w,c
  1861   001100  5CE6               	subwf	postinc1,w,c
  1862   001102  50E6               	movf	postinc1,w,c
  1863   001104  0A80               	xorlw	128
  1864   001106  6E0A               	movwf	(??_fputc+4)^0,c
  1865   001108  50DE               	movf	postinc2,w,c
  1866   00110A  0A80               	xorlw	128
  1867   00110C  580A               	subwfb	(??_fputc+4)^0,w,c
  1868   00110E  B0D8               	btfsc	status,0,c
  1869   001110  EF8C  F008         	goto	u1291
  1870   001114  EF8E  F008         	goto	u1290
  1871   001118                     u1291:
  1872   001118  EFB1  F008         	goto	l932
  1873   00111C                     u1290:
  1874   00111C                     l1919:
  1875   00111C  EE20 F003          	lfsr	2,3
  1876   001120  5004               	movf	fputc@fp^0,w,c
  1877   001122  26D9               	addwf	fsr2l,f,c
  1878   001124  5005               	movf	(fputc@fp+1)^0,w,c
  1879   001126  22DA               	addwfc	fsr2h,f,c
  1880   001128  CFDE F006          	movff	postinc2,??_fputc
  1881   00112C  CFDD F007          	movff	postdec2,??_fputc+1
  1882   001130  C004  FFD9         	movff	fputc@fp,fsr2l
  1883   001134  C005  FFDA         	movff	fputc@fp+1,fsr2h
  1884   001138  CFDE F008          	movff	postinc2,??_fputc+2
  1885   00113C  CFDD F009          	movff	postdec2,??_fputc+3
  1886   001140  5006               	movf	??_fputc^0,w,c
  1887   001142  2408               	addwf	(??_fputc+2)^0,w,c
  1888   001144  6ED9               	movwf	fsr2l,c
  1889   001146  5007               	movf	(??_fputc+1)^0,w,c
  1890   001148  2009               	addwfc	(??_fputc+3)^0,w,c
  1891   00114A  6EDA               	movwf	fsr2h,c
  1892   00114C  C002  FFDF         	movff	fputc@c,indf2
  1893   001150  EE20 F003          	lfsr	2,3
  1894   001154  5004               	movf	fputc@fp^0,w,c
  1895   001156  26D9               	addwf	fsr2l,f,c
  1896   001158  5005               	movf	(fputc@fp+1)^0,w,c
  1897   00115A  22DA               	addwfc	fsr2h,f,c
  1898   00115C  2ADE               	incf	postinc2,f,c
  1899   00115E  0E00               	movlw	0
  1900   001160  22DD               	addwfc	postdec2,f,c
  1901   001162                     l932:
  1902   001162  0012               	return		;funcret
  1903   001164                     __end_of_fputc:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _putch *****************
  1907 ;; Defined at:
  1908 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  c               1    wreg     unsigned char 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  c               1    0[COMRAM] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         0       0       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0
  1925 ;;      Totals:         0       0       0       0       0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used: 1
  1928 ;; Hardware stack levels required when called: 1
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_fputc
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text8
  1937   0016BC                     __ptext8:
  1938                           	callstack 0
  1939   0016BC                     _putch:
  1940                           	callstack 25
  1941   0016BC  0012               	return		;funcret
  1942   0016BE                     __end_of_putch:
  1943                           	callstack 0
  1944                           
  1945 ;; *************** function _abs *****************
  1946 ;; Defined at:
  1947 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  a               2   19[COMRAM] int 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  2   19[COMRAM] int 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1961 ;;      Params:         2       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0
  1963 ;;      Temps:          2       0       0       0       0       0       0
  1964 ;;      Totals:         4       0       0       0       0       0       0
  1965 ;;Total ram usage:        4 bytes
  1966 ;; Hardware stack levels used: 1
  1967 ;; Hardware stack levels required when called: 1
  1968 ;; This function calls:
  1969 ;;		Nothing
  1970 ;; This function is called by:
  1971 ;;		_dtoa
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text9
  1976   001598                     __ptext9:
  1977                           	callstack 0
  1978   001598                     _abs:
  1979                           	callstack 25
  1980   001598  BE15               	btfsc	(abs@a+1)^0,7,c
  1981   00159A  EFD9  F00A         	goto	u1480
  1982   00159E  5015               	movf	(abs@a+1)^0,w,c
  1983   0015A0  E106               	bnz	u1481
  1984   0015A2  0414               	decf	abs@a^0,w,c
  1985   0015A4  B0D8               	btfsc	status,0,c
  1986   0015A6  EFD7  F00A         	goto	u1481
  1987   0015AA  EFD9  F00A         	goto	u1480
  1988   0015AE                     u1481:
  1989   0015AE  EFE7  F00A         	goto	l878
  1990   0015B2                     u1480:
  1991   0015B2  C014  F016         	movff	abs@a,??_abs
  1992   0015B6  C015  F017         	movff	abs@a+1,??_abs+1
  1993   0015BA  1E16               	comf	??_abs^0,f,c
  1994   0015BC  1E17               	comf	(??_abs+1)^0,f,c
  1995   0015BE  4A16               	infsnz	??_abs^0,f,c
  1996   0015C0  2A17               	incf	(??_abs+1)^0,f,c
  1997   0015C2  C016  F014         	movff	??_abs,?_abs
  1998   0015C6  C017  F015         	movff	??_abs+1,?_abs+1
  1999   0015CA  EFEB  F00A         	goto	l881
  2000   0015CE                     l878:
  2001   0015CE  C014  F014         	movff	abs@a,?_abs
  2002   0015D2  C015  F015         	movff	abs@a+1,?_abs+1
  2003   0015D6                     l881:
  2004   0015D6  0012               	return		;funcret
  2005   0015D8                     __end_of_abs:
  2006                           	callstack 0
  2007                           
  2008 ;; *************** function ___aomod *****************
  2009 ;; Defined at:
  2010 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  dividend        8    1[COMRAM] long long 
  2013 ;;  divisor         8    9[COMRAM] long long 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  sign            1   18[COMRAM] unsigned char 
  2016 ;;  counter         1   17[COMRAM] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  8    1[COMRAM] long long 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2026 ;;      Params:        16       0       0       0       0       0       0
  2027 ;;      Locals:         2       0       0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0       0       0
  2029 ;;      Totals:        18       0       0       0       0       0       0
  2030 ;;Total ram usage:       18 bytes
  2031 ;; Hardware stack levels used: 1
  2032 ;; Hardware stack levels required when called: 1
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_dtoa
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text10
  2041   000D08                     __ptext10:
  2042                           	callstack 0
  2043   000D08                     ___aomod:
  2044                           	callstack 25
  2045   000D08  0E00               	movlw	0
  2046   000D0A  6E13               	movwf	___aomod@sign^0,c
  2047   000D0C  BE09               	btfsc	(___aomod@dividend+7)^0,7,c
  2048   000D0E  EF8D  F006         	goto	u1380
  2049   000D12  EF8B  F006         	goto	u1381
  2050   000D16                     u1381:
  2051   000D16  EF9F  F006         	goto	l1989
  2052   000D1A                     u1380:
  2053   000D1A  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2054   000D1C  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2055   000D1E  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2056   000D20  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2057   000D22  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2058   000D24  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2059   000D26  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2060   000D28  6C02               	negf	___aomod@dividend^0,c
  2061   000D2A  0E00               	movlw	0
  2062   000D2C  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2063   000D2E  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2064   000D30  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2065   000D32  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2066   000D34  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2067   000D36  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2068   000D38  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2069   000D3A  0E01               	movlw	1
  2070   000D3C  6E13               	movwf	___aomod@sign^0,c
  2071   000D3E                     l1989:
  2072   000D3E  BE11               	btfsc	(___aomod@divisor+7)^0,7,c
  2073   000D40  EFA6  F006         	goto	u1390
  2074   000D44  EFA4  F006         	goto	u1391
  2075   000D48                     u1391:
  2076   000D48  EFB6  F006         	goto	l1993
  2077   000D4C                     u1390:
  2078   000D4C  1E11               	comf	(___aomod@divisor+7)^0,f,c
  2079   000D4E  1E10               	comf	(___aomod@divisor+6)^0,f,c
  2080   000D50  1E0F               	comf	(___aomod@divisor+5)^0,f,c
  2081   000D52  1E0E               	comf	(___aomod@divisor+4)^0,f,c
  2082   000D54  1E0D               	comf	(___aomod@divisor+3)^0,f,c
  2083   000D56  1E0C               	comf	(___aomod@divisor+2)^0,f,c
  2084   000D58  1E0B               	comf	(___aomod@divisor+1)^0,f,c
  2085   000D5A  6C0A               	negf	___aomod@divisor^0,c
  2086   000D5C  0E00               	movlw	0
  2087   000D5E  220B               	addwfc	(___aomod@divisor+1)^0,f,c
  2088   000D60  220C               	addwfc	(___aomod@divisor+2)^0,f,c
  2089   000D62  220D               	addwfc	(___aomod@divisor+3)^0,f,c
  2090   000D64  220E               	addwfc	(___aomod@divisor+4)^0,f,c
  2091   000D66  220F               	addwfc	(___aomod@divisor+5)^0,f,c
  2092   000D68  2210               	addwfc	(___aomod@divisor+6)^0,f,c
  2093   000D6A  2211               	addwfc	(___aomod@divisor+7)^0,f,c
  2094   000D6C                     l1993:
  2095   000D6C  500A               	movf	___aomod@divisor^0,w,c
  2096   000D6E  100B               	iorwf	(___aomod@divisor+1)^0,w,c
  2097   000D70  100C               	iorwf	(___aomod@divisor+2)^0,w,c
  2098   000D72  100D               	iorwf	(___aomod@divisor+3)^0,w,c
  2099   000D74  100E               	iorwf	(___aomod@divisor+4)^0,w,c
  2100   000D76  100F               	iorwf	(___aomod@divisor+5)^0,w,c
  2101   000D78  1010               	iorwf	(___aomod@divisor+6)^0,w,c
  2102   000D7A  1011               	iorwf	(___aomod@divisor+7)^0,w,c
  2103   000D7C  B4D8               	btfsc	status,2,c
  2104   000D7E  EFC3  F006         	goto	u1401
  2105   000D82  EFC5  F006         	goto	u1400
  2106   000D86                     u1401:
  2107   000D86  EF0D  F007         	goto	l2009
  2108   000D8A                     u1400:
  2109   000D8A  0E01               	movlw	1
  2110   000D8C  6E12               	movwf	___aomod@counter^0,c
  2111   000D8E  EFD3  F006         	goto	l1999
  2112   000D92                     l1997:
  2113   000D92  90D8               	bcf	status,0,c
  2114   000D94  360A               	rlcf	___aomod@divisor^0,f,c
  2115   000D96  360B               	rlcf	(___aomod@divisor+1)^0,f,c
  2116   000D98  360C               	rlcf	(___aomod@divisor+2)^0,f,c
  2117   000D9A  360D               	rlcf	(___aomod@divisor+3)^0,f,c
  2118   000D9C  360E               	rlcf	(___aomod@divisor+4)^0,f,c
  2119   000D9E  360F               	rlcf	(___aomod@divisor+5)^0,f,c
  2120   000DA0  3610               	rlcf	(___aomod@divisor+6)^0,f,c
  2121   000DA2  3611               	rlcf	(___aomod@divisor+7)^0,f,c
  2122   000DA4  2A12               	incf	___aomod@counter^0,f,c
  2123   000DA6                     l1999:
  2124   000DA6  AE11               	btfss	(___aomod@divisor+7)^0,7,c
  2125   000DA8  EFD8  F006         	goto	u1411
  2126   000DAC  EFDA  F006         	goto	u1410
  2127   000DB0                     u1411:
  2128   000DB0  EFC9  F006         	goto	l1997
  2129   000DB4                     u1410:
  2130   000DB4                     l2001:
  2131   000DB4  500A               	movf	___aomod@divisor^0,w,c
  2132   000DB6  5C02               	subwf	___aomod@dividend^0,w,c
  2133   000DB8  500B               	movf	(___aomod@divisor+1)^0,w,c
  2134   000DBA  5803               	subwfb	(___aomod@dividend+1)^0,w,c
  2135   000DBC  500C               	movf	(___aomod@divisor+2)^0,w,c
  2136   000DBE  5804               	subwfb	(___aomod@dividend+2)^0,w,c
  2137   000DC0  500D               	movf	(___aomod@divisor+3)^0,w,c
  2138   000DC2  5805               	subwfb	(___aomod@dividend+3)^0,w,c
  2139   000DC4  500E               	movf	(___aomod@divisor+4)^0,w,c
  2140   000DC6  5806               	subwfb	(___aomod@dividend+4)^0,w,c
  2141   000DC8  500F               	movf	(___aomod@divisor+5)^0,w,c
  2142   000DCA  5807               	subwfb	(___aomod@dividend+5)^0,w,c
  2143   000DCC  5010               	movf	(___aomod@divisor+6)^0,w,c
  2144   000DCE  5808               	subwfb	(___aomod@dividend+6)^0,w,c
  2145   000DD0  5011               	movf	(___aomod@divisor+7)^0,w,c
  2146   000DD2  5809               	subwfb	(___aomod@dividend+7)^0,w,c
  2147   000DD4  A0D8               	btfss	status,0,c
  2148   000DD6  EFEF  F006         	goto	u1421
  2149   000DDA  EFF1  F006         	goto	u1420
  2150   000DDE                     u1421:
  2151   000DDE  EF01  F007         	goto	l2005
  2152   000DE2                     u1420:
  2153   000DE2  500A               	movf	___aomod@divisor^0,w,c
  2154   000DE4  5E02               	subwf	___aomod@dividend^0,f,c
  2155   000DE6  500B               	movf	(___aomod@divisor+1)^0,w,c
  2156   000DE8  5A03               	subwfb	(___aomod@dividend+1)^0,f,c
  2157   000DEA  500C               	movf	(___aomod@divisor+2)^0,w,c
  2158   000DEC  5A04               	subwfb	(___aomod@dividend+2)^0,f,c
  2159   000DEE  500D               	movf	(___aomod@divisor+3)^0,w,c
  2160   000DF0  5A05               	subwfb	(___aomod@dividend+3)^0,f,c
  2161   000DF2  500E               	movf	(___aomod@divisor+4)^0,w,c
  2162   000DF4  5A06               	subwfb	(___aomod@dividend+4)^0,f,c
  2163   000DF6  500F               	movf	(___aomod@divisor+5)^0,w,c
  2164   000DF8  5A07               	subwfb	(___aomod@dividend+5)^0,f,c
  2165   000DFA  5010               	movf	(___aomod@divisor+6)^0,w,c
  2166   000DFC  5A08               	subwfb	(___aomod@dividend+6)^0,f,c
  2167   000DFE  5011               	movf	(___aomod@divisor+7)^0,w,c
  2168   000E00  5A09               	subwfb	(___aomod@dividend+7)^0,f,c
  2169   000E02                     l2005:
  2170   000E02  90D8               	bcf	status,0,c
  2171   000E04  3211               	rrcf	(___aomod@divisor+7)^0,f,c
  2172   000E06  3210               	rrcf	(___aomod@divisor+6)^0,f,c
  2173   000E08  320F               	rrcf	(___aomod@divisor+5)^0,f,c
  2174   000E0A  320E               	rrcf	(___aomod@divisor+4)^0,f,c
  2175   000E0C  320D               	rrcf	(___aomod@divisor+3)^0,f,c
  2176   000E0E  320C               	rrcf	(___aomod@divisor+2)^0,f,c
  2177   000E10  320B               	rrcf	(___aomod@divisor+1)^0,f,c
  2178   000E12  320A               	rrcf	___aomod@divisor^0,f,c
  2179   000E14  2E12               	decfsz	___aomod@counter^0,f,c
  2180   000E16  EFDA  F006         	goto	l2001
  2181   000E1A                     l2009:
  2182   000E1A  5013               	movf	___aomod@sign^0,w,c
  2183   000E1C  B4D8               	btfsc	status,2,c
  2184   000E1E  EF13  F007         	goto	u1431
  2185   000E22  EF15  F007         	goto	u1430
  2186   000E26                     u1431:
  2187   000E26  EF25  F007         	goto	l2013
  2188   000E2A                     u1430:
  2189   000E2A  1E09               	comf	(___aomod@dividend+7)^0,f,c
  2190   000E2C  1E08               	comf	(___aomod@dividend+6)^0,f,c
  2191   000E2E  1E07               	comf	(___aomod@dividend+5)^0,f,c
  2192   000E30  1E06               	comf	(___aomod@dividend+4)^0,f,c
  2193   000E32  1E05               	comf	(___aomod@dividend+3)^0,f,c
  2194   000E34  1E04               	comf	(___aomod@dividend+2)^0,f,c
  2195   000E36  1E03               	comf	(___aomod@dividend+1)^0,f,c
  2196   000E38  6C02               	negf	___aomod@dividend^0,c
  2197   000E3A  0E00               	movlw	0
  2198   000E3C  2203               	addwfc	(___aomod@dividend+1)^0,f,c
  2199   000E3E  2204               	addwfc	(___aomod@dividend+2)^0,f,c
  2200   000E40  2205               	addwfc	(___aomod@dividend+3)^0,f,c
  2201   000E42  2206               	addwfc	(___aomod@dividend+4)^0,f,c
  2202   000E44  2207               	addwfc	(___aomod@dividend+5)^0,f,c
  2203   000E46  2208               	addwfc	(___aomod@dividend+6)^0,f,c
  2204   000E48  2209               	addwfc	(___aomod@dividend+7)^0,f,c
  2205   000E4A                     l2013:
  2206   000E4A  C002  F002         	movff	___aomod@dividend,?___aomod
  2207   000E4E  C003  F003         	movff	___aomod@dividend+1,?___aomod+1
  2208   000E52  C004  F004         	movff	___aomod@dividend+2,?___aomod+2
  2209   000E56  C005  F005         	movff	___aomod@dividend+3,?___aomod+3
  2210   000E5A  C006  F006         	movff	___aomod@dividend+4,?___aomod+4
  2211   000E5E  C007  F007         	movff	___aomod@dividend+5,?___aomod+5
  2212   000E62  C008  F008         	movff	___aomod@dividend+6,?___aomod+6
  2213   000E66  C009  F009         	movff	___aomod@dividend+7,?___aomod+7
  2214   000E6A  0012               	return		;funcret
  2215   000E6C                     __end_of___aomod:
  2216                           	callstack 0
  2217                           
  2218 ;; *************** function ___aodiv *****************
  2219 ;; Defined at:
  2220 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  dividend        8    1[COMRAM] long long 
  2223 ;;  divisor         8    9[COMRAM] long long 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  quotient        8   19[COMRAM] long long 
  2226 ;;  sign            1   18[COMRAM] unsigned char 
  2227 ;;  counter         1   17[COMRAM] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  8    1[COMRAM] long long 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2237 ;;      Params:        16       0       0       0       0       0       0
  2238 ;;      Locals:        10       0       0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0
  2240 ;;      Totals:        26       0       0       0       0       0       0
  2241 ;;Total ram usage:       26 bytes
  2242 ;; Hardware stack levels used: 1
  2243 ;; Hardware stack levels required when called: 1
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_dtoa
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text11
  2252   000B80                     __ptext11:
  2253                           	callstack 0
  2254   000B80                     ___aodiv:
  2255                           	callstack 25
  2256   000B80  0E00               	movlw	0
  2257   000B82  6E13               	movwf	___aodiv@sign^0,c
  2258   000B84  BE11               	btfsc	(___aodiv@divisor+7)^0,7,c
  2259   000B86  EFC9  F005         	goto	u1310
  2260   000B8A  EFC7  F005         	goto	u1311
  2261   000B8E                     u1311:
  2262   000B8E  EFDB  F005         	goto	l1945
  2263   000B92                     u1310:
  2264   000B92  1E11               	comf	(___aodiv@divisor+7)^0,f,c
  2265   000B94  1E10               	comf	(___aodiv@divisor+6)^0,f,c
  2266   000B96  1E0F               	comf	(___aodiv@divisor+5)^0,f,c
  2267   000B98  1E0E               	comf	(___aodiv@divisor+4)^0,f,c
  2268   000B9A  1E0D               	comf	(___aodiv@divisor+3)^0,f,c
  2269   000B9C  1E0C               	comf	(___aodiv@divisor+2)^0,f,c
  2270   000B9E  1E0B               	comf	(___aodiv@divisor+1)^0,f,c
  2271   000BA0  6C0A               	negf	___aodiv@divisor^0,c
  2272   000BA2  0E00               	movlw	0
  2273   000BA4  220B               	addwfc	(___aodiv@divisor+1)^0,f,c
  2274   000BA6  220C               	addwfc	(___aodiv@divisor+2)^0,f,c
  2275   000BA8  220D               	addwfc	(___aodiv@divisor+3)^0,f,c
  2276   000BAA  220E               	addwfc	(___aodiv@divisor+4)^0,f,c
  2277   000BAC  220F               	addwfc	(___aodiv@divisor+5)^0,f,c
  2278   000BAE  2210               	addwfc	(___aodiv@divisor+6)^0,f,c
  2279   000BB0  2211               	addwfc	(___aodiv@divisor+7)^0,f,c
  2280   000BB2  0E01               	movlw	1
  2281   000BB4  6E13               	movwf	___aodiv@sign^0,c
  2282   000BB6                     l1945:
  2283   000BB6  BE09               	btfsc	(___aodiv@dividend+7)^0,7,c
  2284   000BB8  EFE2  F005         	goto	u1320
  2285   000BBC  EFE0  F005         	goto	u1321
  2286   000BC0                     u1321:
  2287   000BC0  EFF4  F005         	goto	l1951
  2288   000BC4                     u1320:
  2289   000BC4  1E09               	comf	(___aodiv@dividend+7)^0,f,c
  2290   000BC6  1E08               	comf	(___aodiv@dividend+6)^0,f,c
  2291   000BC8  1E07               	comf	(___aodiv@dividend+5)^0,f,c
  2292   000BCA  1E06               	comf	(___aodiv@dividend+4)^0,f,c
  2293   000BCC  1E05               	comf	(___aodiv@dividend+3)^0,f,c
  2294   000BCE  1E04               	comf	(___aodiv@dividend+2)^0,f,c
  2295   000BD0  1E03               	comf	(___aodiv@dividend+1)^0,f,c
  2296   000BD2  6C02               	negf	___aodiv@dividend^0,c
  2297   000BD4  0E00               	movlw	0
  2298   000BD6  2203               	addwfc	(___aodiv@dividend+1)^0,f,c
  2299   000BD8  2204               	addwfc	(___aodiv@dividend+2)^0,f,c
  2300   000BDA  2205               	addwfc	(___aodiv@dividend+3)^0,f,c
  2301   000BDC  2206               	addwfc	(___aodiv@dividend+4)^0,f,c
  2302   000BDE  2207               	addwfc	(___aodiv@dividend+5)^0,f,c
  2303   000BE0  2208               	addwfc	(___aodiv@dividend+6)^0,f,c
  2304   000BE2  2209               	addwfc	(___aodiv@dividend+7)^0,f,c
  2305   000BE4  0E01               	movlw	1
  2306   000BE6  1A13               	xorwf	___aodiv@sign^0,f,c
  2307   000BE8                     l1951:
  2308   000BE8  EE20  F014         	lfsr	2,___aodiv@quotient
  2309   000BEC  0E07               	movlw	7
  2310   000BEE                     u1331:
  2311   000BEE  6ADE               	clrf	postinc2,c
  2312   000BF0  06E8               	decf	wreg,f,c
  2313   000BF2  E2FD               	bc	u1331
  2314   000BF4  500A               	movf	___aodiv@divisor^0,w,c
  2315   000BF6  100B               	iorwf	(___aodiv@divisor+1)^0,w,c
  2316   000BF8  100C               	iorwf	(___aodiv@divisor+2)^0,w,c
  2317   000BFA  100D               	iorwf	(___aodiv@divisor+3)^0,w,c
  2318   000BFC  100E               	iorwf	(___aodiv@divisor+4)^0,w,c
  2319   000BFE  100F               	iorwf	(___aodiv@divisor+5)^0,w,c
  2320   000C00  1010               	iorwf	(___aodiv@divisor+6)^0,w,c
  2321   000C02  1011               	iorwf	(___aodiv@divisor+7)^0,w,c
  2322   000C04  B4D8               	btfsc	status,2,c
  2323   000C06  EF07  F006         	goto	u1341
  2324   000C0A  EF09  F006         	goto	u1340
  2325   000C0E                     u1341:
  2326   000C0E  EF5B  F006         	goto	l1973
  2327   000C12                     u1340:
  2328   000C12  0E01               	movlw	1
  2329   000C14  6E12               	movwf	___aodiv@counter^0,c
  2330   000C16  EF17  F006         	goto	l1959
  2331   000C1A                     l1957:
  2332   000C1A  90D8               	bcf	status,0,c
  2333   000C1C  360A               	rlcf	___aodiv@divisor^0,f,c
  2334   000C1E  360B               	rlcf	(___aodiv@divisor+1)^0,f,c
  2335   000C20  360C               	rlcf	(___aodiv@divisor+2)^0,f,c
  2336   000C22  360D               	rlcf	(___aodiv@divisor+3)^0,f,c
  2337   000C24  360E               	rlcf	(___aodiv@divisor+4)^0,f,c
  2338   000C26  360F               	rlcf	(___aodiv@divisor+5)^0,f,c
  2339   000C28  3610               	rlcf	(___aodiv@divisor+6)^0,f,c
  2340   000C2A  3611               	rlcf	(___aodiv@divisor+7)^0,f,c
  2341   000C2C  2A12               	incf	___aodiv@counter^0,f,c
  2342   000C2E                     l1959:
  2343   000C2E  AE11               	btfss	(___aodiv@divisor+7)^0,7,c
  2344   000C30  EF1C  F006         	goto	u1351
  2345   000C34  EF1E  F006         	goto	u1350
  2346   000C38                     u1351:
  2347   000C38  EF0D  F006         	goto	l1957
  2348   000C3C                     u1350:
  2349   000C3C                     l1961:
  2350   000C3C  90D8               	bcf	status,0,c
  2351   000C3E  3614               	rlcf	___aodiv@quotient^0,f,c
  2352   000C40  3615               	rlcf	(___aodiv@quotient+1)^0,f,c
  2353   000C42  3616               	rlcf	(___aodiv@quotient+2)^0,f,c
  2354   000C44  3617               	rlcf	(___aodiv@quotient+3)^0,f,c
  2355   000C46  3618               	rlcf	(___aodiv@quotient+4)^0,f,c
  2356   000C48  3619               	rlcf	(___aodiv@quotient+5)^0,f,c
  2357   000C4A  361A               	rlcf	(___aodiv@quotient+6)^0,f,c
  2358   000C4C  361B               	rlcf	(___aodiv@quotient+7)^0,f,c
  2359   000C4E  500A               	movf	___aodiv@divisor^0,w,c
  2360   000C50  5C02               	subwf	___aodiv@dividend^0,w,c
  2361   000C52  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2362   000C54  5803               	subwfb	(___aodiv@dividend+1)^0,w,c
  2363   000C56  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2364   000C58  5804               	subwfb	(___aodiv@dividend+2)^0,w,c
  2365   000C5A  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2366   000C5C  5805               	subwfb	(___aodiv@dividend+3)^0,w,c
  2367   000C5E  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2368   000C60  5806               	subwfb	(___aodiv@dividend+4)^0,w,c
  2369   000C62  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2370   000C64  5807               	subwfb	(___aodiv@dividend+5)^0,w,c
  2371   000C66  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2372   000C68  5808               	subwfb	(___aodiv@dividend+6)^0,w,c
  2373   000C6A  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2374   000C6C  5809               	subwfb	(___aodiv@dividend+7)^0,w,c
  2375   000C6E  A0D8               	btfss	status,0,c
  2376   000C70  EF3C  F006         	goto	u1361
  2377   000C74  EF3E  F006         	goto	u1360
  2378   000C78                     u1361:
  2379   000C78  EF4F  F006         	goto	l1969
  2380   000C7C                     u1360:
  2381   000C7C  500A               	movf	___aodiv@divisor^0,w,c
  2382   000C7E  5E02               	subwf	___aodiv@dividend^0,f,c
  2383   000C80  500B               	movf	(___aodiv@divisor+1)^0,w,c
  2384   000C82  5A03               	subwfb	(___aodiv@dividend+1)^0,f,c
  2385   000C84  500C               	movf	(___aodiv@divisor+2)^0,w,c
  2386   000C86  5A04               	subwfb	(___aodiv@dividend+2)^0,f,c
  2387   000C88  500D               	movf	(___aodiv@divisor+3)^0,w,c
  2388   000C8A  5A05               	subwfb	(___aodiv@dividend+3)^0,f,c
  2389   000C8C  500E               	movf	(___aodiv@divisor+4)^0,w,c
  2390   000C8E  5A06               	subwfb	(___aodiv@dividend+4)^0,f,c
  2391   000C90  500F               	movf	(___aodiv@divisor+5)^0,w,c
  2392   000C92  5A07               	subwfb	(___aodiv@dividend+5)^0,f,c
  2393   000C94  5010               	movf	(___aodiv@divisor+6)^0,w,c
  2394   000C96  5A08               	subwfb	(___aodiv@dividend+6)^0,f,c
  2395   000C98  5011               	movf	(___aodiv@divisor+7)^0,w,c
  2396   000C9A  5A09               	subwfb	(___aodiv@dividend+7)^0,f,c
  2397   000C9C  8014               	bsf	___aodiv@quotient^0,0,c
  2398   000C9E                     l1969:
  2399   000C9E  90D8               	bcf	status,0,c
  2400   000CA0  3211               	rrcf	(___aodiv@divisor+7)^0,f,c
  2401   000CA2  3210               	rrcf	(___aodiv@divisor+6)^0,f,c
  2402   000CA4  320F               	rrcf	(___aodiv@divisor+5)^0,f,c
  2403   000CA6  320E               	rrcf	(___aodiv@divisor+4)^0,f,c
  2404   000CA8  320D               	rrcf	(___aodiv@divisor+3)^0,f,c
  2405   000CAA  320C               	rrcf	(___aodiv@divisor+2)^0,f,c
  2406   000CAC  320B               	rrcf	(___aodiv@divisor+1)^0,f,c
  2407   000CAE  320A               	rrcf	___aodiv@divisor^0,f,c
  2408   000CB0  2E12               	decfsz	___aodiv@counter^0,f,c
  2409   000CB2  EF1E  F006         	goto	l1961
  2410   000CB6                     l1973:
  2411   000CB6  5013               	movf	___aodiv@sign^0,w,c
  2412   000CB8  B4D8               	btfsc	status,2,c
  2413   000CBA  EF61  F006         	goto	u1371
  2414   000CBE  EF63  F006         	goto	u1370
  2415   000CC2                     u1371:
  2416   000CC2  EF73  F006         	goto	l1977
  2417   000CC6                     u1370:
  2418   000CC6  1E1B               	comf	(___aodiv@quotient+7)^0,f,c
  2419   000CC8  1E1A               	comf	(___aodiv@quotient+6)^0,f,c
  2420   000CCA  1E19               	comf	(___aodiv@quotient+5)^0,f,c
  2421   000CCC  1E18               	comf	(___aodiv@quotient+4)^0,f,c
  2422   000CCE  1E17               	comf	(___aodiv@quotient+3)^0,f,c
  2423   000CD0  1E16               	comf	(___aodiv@quotient+2)^0,f,c
  2424   000CD2  1E15               	comf	(___aodiv@quotient+1)^0,f,c
  2425   000CD4  6C14               	negf	___aodiv@quotient^0,c
  2426   000CD6  0E00               	movlw	0
  2427   000CD8  2215               	addwfc	(___aodiv@quotient+1)^0,f,c
  2428   000CDA  2216               	addwfc	(___aodiv@quotient+2)^0,f,c
  2429   000CDC  2217               	addwfc	(___aodiv@quotient+3)^0,f,c
  2430   000CDE  2218               	addwfc	(___aodiv@quotient+4)^0,f,c
  2431   000CE0  2219               	addwfc	(___aodiv@quotient+5)^0,f,c
  2432   000CE2  221A               	addwfc	(___aodiv@quotient+6)^0,f,c
  2433   000CE4  221B               	addwfc	(___aodiv@quotient+7)^0,f,c
  2434   000CE6                     l1977:
  2435   000CE6  C014  F002         	movff	___aodiv@quotient,?___aodiv
  2436   000CEA  C015  F003         	movff	___aodiv@quotient+1,?___aodiv+1
  2437   000CEE  C016  F004         	movff	___aodiv@quotient+2,?___aodiv+2
  2438   000CF2  C017  F005         	movff	___aodiv@quotient+3,?___aodiv+3
  2439   000CF6  C018  F006         	movff	___aodiv@quotient+4,?___aodiv+4
  2440   000CFA  C019  F007         	movff	___aodiv@quotient+5,?___aodiv+5
  2441   000CFE  C01A  F008         	movff	___aodiv@quotient+6,?___aodiv+6
  2442   000D02  C01B  F009         	movff	___aodiv@quotient+7,?___aodiv+7
  2443   000D06  0012               	return		;funcret
  2444   000D08                     __end_of___aodiv:
  2445                           	callstack 0
  2446                           
  2447 ;; *************** function _atoi *****************
  2448 ;; Defined at:
  2449 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2452 ;;		 -> STR_2(15), 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  n               2   14[COMRAM] int 
  2455 ;;  neg             2   12[COMRAM] int 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  2    7[COMRAM] int 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2465 ;;      Params:         2       0       0       0       0       0       0
  2466 ;;      Locals:         4       0       0       0       0       0       0
  2467 ;;      Temps:          3       0       0       0       0       0       0
  2468 ;;      Totals:         9       0       0       0       0       0       0
  2469 ;;Total ram usage:        9 bytes
  2470 ;; Hardware stack levels used: 1
  2471 ;; Hardware stack levels required when called: 2
  2472 ;; This function calls:
  2473 ;;		___wmul
  2474 ;;		_isdigit
  2475 ;;		_isspace
  2476 ;; This function is called by:
  2477 ;;		_vfpfcnvrt
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text12
  2482   000E6C                     __ptext12:
  2483                           	callstack 0
  2484   000E6C                     _atoi:
  2485                           	callstack 25
  2486   000E6C  0E00               	movlw	0
  2487   000E6E  6E10               	movwf	(atoi@n+1)^0,c
  2488   000E70  0E00               	movlw	0
  2489   000E72  6E0F               	movwf	atoi@n^0,c
  2490   000E74  0E00               	movlw	0
  2491   000E76  6E0E               	movwf	(atoi@neg+1)^0,c
  2492   000E78  0E00               	movlw	0
  2493   000E7A  6E0D               	movwf	atoi@neg^0,c
  2494   000E7C  EF42  F007         	goto	l2121
  2495   000E80                     l2117:
  2496   000E80  4A08               	infsnz	atoi@s^0,f,c
  2497   000E82  2A09               	incf	(atoi@s+1)^0,f,c
  2498   000E84                     l2121:
  2499   000E84  C008  FFF6         	movff	atoi@s,tblptrl
  2500   000E88  C009  FFF7         	movff	atoi@s+1,tblptrh
  2501   000E8C                     	if	0	;tblptru may be non-zero
  2502   000E8C                     	endif
  2503   000E8C                     	if	0	;tblptru may be non-zero
  2504   000E8C                     	endif
  2505   000E8C  0008               	tblrd		*
  2506   000E8E  50F5               	movf	tablat,w,c
  2507   000E90  0A20               	xorlw	32
  2508   000E92  B4D8               	btfsc	status,2,c
  2509   000E94  EF4E  F007         	goto	u1661
  2510   000E98  EF50  F007         	goto	u1660
  2511   000E9C                     u1661:
  2512   000E9C  EF40  F007         	goto	l2117
  2513   000EA0                     u1660:
  2514   000EA0  C008  FFF6         	movff	atoi@s,tblptrl
  2515   000EA4  C009  FFF7         	movff	atoi@s+1,tblptrh
  2516   000EA8                     	if	0	;tblptru may be non-zero
  2517   000EA8                     	endif
  2518   000EA8                     	if	0	;tblptru may be non-zero
  2519   000EA8                     	endif
  2520   000EA8  0008               	tblrd		*
  2521   000EAA  CFF5 F00A          	movff	tablat,??_atoi
  2522   000EAE  0EF7               	movlw	247
  2523   000EB0  240A               	addwf	??_atoi^0,w,c
  2524   000EB2  6E0B               	movwf	(??_atoi+1)^0,c
  2525   000EB4  6A0C               	clrf	(??_atoi+2)^0,c
  2526   000EB6  0EFF               	movlw	255
  2527   000EB8  220C               	addwfc	(??_atoi+2)^0,f,c
  2528   000EBA  500C               	movf	(??_atoi+2)^0,w,c
  2529   000EBC  E109               	bnz	u1670
  2530   000EBE  0E05               	movlw	5
  2531   000EC0  5C0B               	subwf	(??_atoi+1)^0,w,c
  2532   000EC2  A0D8               	btfss	status,0,c
  2533   000EC4  EF66  F007         	goto	u1671
  2534   000EC8  EF68  F007         	goto	u1670
  2535   000ECC                     u1671:
  2536   000ECC  EF40  F007         	goto	l2117
  2537   000ED0                     u1670:
  2538   000ED0  EF72  F007         	goto	l2129
  2539   000ED4                     l2125:
  2540   000ED4  0E00               	movlw	0
  2541   000ED6  6E0E               	movwf	(atoi@neg+1)^0,c
  2542   000ED8  0E01               	movlw	1
  2543   000EDA  6E0D               	movwf	atoi@neg^0,c
  2544   000EDC                     l2127:
  2545   000EDC  4A08               	infsnz	atoi@s^0,f,c
  2546   000EDE  2A09               	incf	(atoi@s+1)^0,f,c
  2547   000EE0  EFA7  F007         	goto	l2137
  2548   000EE4                     l2129:
  2549   000EE4  C008  FFF6         	movff	atoi@s,tblptrl
  2550   000EE8  C009  FFF7         	movff	atoi@s+1,tblptrh
  2551   000EEC                     	if	0	;tblptru may be non-zero
  2552   000EEC                     	endif
  2553   000EEC                     	if	0	;tblptru may be non-zero
  2554   000EEC                     	endif
  2555   000EEC  0008               	tblrd		*
  2556   000EEE  50F5               	movf	tablat,w,c
  2557   000EF0  6E0A               	movwf	??_atoi^0,c
  2558   000EF2  6A0B               	clrf	(??_atoi+1)^0,c
  2559                           
  2560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2561                           ; Switch size 1, requested type "simple"
  2562                           ; Number of cases is 1, Range of values is 0 to 0
  2563                           ; switch strategies available:
  2564                           ; Name         Instructions Cycles
  2565                           ; simple_byte            4     3 (average)
  2566                           ;	Chosen strategy is simple_byte
  2567   000EF4  500B               	movf	(??_atoi+1)^0,w,c
  2568   000EF6  0A00               	xorlw	0	; case 0
  2569   000EF8  B4D8               	btfsc	status,2,c
  2570   000EFA  EF81  F007         	goto	l2285
  2571   000EFE  EFA7  F007         	goto	l2137
  2572   000F02                     l2285:
  2573                           
  2574                           ; Switch size 1, requested type "simple"
  2575                           ; Number of cases is 2, Range of values is 43 to 45
  2576                           ; switch strategies available:
  2577                           ; Name         Instructions Cycles
  2578                           ; simple_byte            7     4 (average)
  2579                           ;	Chosen strategy is simple_byte
  2580   000F02  500A               	movf	??_atoi^0,w,c
  2581   000F04  0A2B               	xorlw	43	; case 43
  2582   000F06  B4D8               	btfsc	status,2,c
  2583   000F08  EF6E  F007         	goto	l2127
  2584   000F0C  0A06               	xorlw	6	; case 45
  2585   000F0E  B4D8               	btfsc	status,2,c
  2586   000F10  EF6A  F007         	goto	l2125
  2587   000F14  EFA7  F007         	goto	l2137
  2588   000F18                     l2131:
  2589   000F18  C00F  F002         	movff	atoi@n,___wmul@multiplier
  2590   000F1C  C010  F003         	movff	atoi@n+1,___wmul@multiplier+1
  2591   000F20  0E00               	movlw	0
  2592   000F22  6E05               	movwf	(___wmul@multiplicand+1)^0,c
  2593   000F24  0E0A               	movlw	10
  2594   000F26  6E04               	movwf	___wmul@multiplicand^0,c
  2595   000F28  EC15  F00B         	call	___wmul	;wreg free
  2596   000F2C  C008  FFF6         	movff	atoi@s,tblptrl
  2597   000F30  C009  FFF7         	movff	atoi@s+1,tblptrh
  2598   000F34                     	if	0	;tblptru may be non-zero
  2599   000F34                     	endif
  2600   000F34                     	if	0	;tblptru may be non-zero
  2601   000F34                     	endif
  2602   000F34  0008               	tblrd		*
  2603   000F36  50F5               	movf	tablat,w,c
  2604   000F38  5E02               	subwf	?___wmul^0,f,c
  2605   000F3A  0E00               	movlw	0
  2606   000F3C  5A03               	subwfb	(?___wmul+1)^0,f,c
  2607   000F3E  0E30               	movlw	48
  2608   000F40  2402               	addwf	?___wmul^0,w,c
  2609   000F42  6E0F               	movwf	atoi@n^0,c
  2610   000F44  0E00               	movlw	0
  2611   000F46  2003               	addwfc	(?___wmul+1)^0,w,c
  2612   000F48  6E10               	movwf	(atoi@n+1)^0,c
  2613   000F4A  EF6E  F007         	goto	l2127
  2614   000F4E                     l2137:
  2615   000F4E  C008  FFF6         	movff	atoi@s,tblptrl
  2616   000F52  C009  FFF7         	movff	atoi@s+1,tblptrh
  2617   000F56                     	if	0	;tblptru may be non-zero
  2618   000F56                     	endif
  2619   000F56                     	if	0	;tblptru may be non-zero
  2620   000F56                     	endif
  2621   000F56  0008               	tblrd		*
  2622   000F58  CFF5 F00A          	movff	tablat,??_atoi
  2623   000F5C  0ED0               	movlw	208
  2624   000F5E  240A               	addwf	??_atoi^0,w,c
  2625   000F60  6E0B               	movwf	(??_atoi+1)^0,c
  2626   000F62  6A0C               	clrf	(??_atoi+2)^0,c
  2627   000F64  0EFF               	movlw	255
  2628   000F66  220C               	addwfc	(??_atoi+2)^0,f,c
  2629   000F68  500C               	movf	(??_atoi+2)^0,w,c
  2630   000F6A  E109               	bnz	u1680
  2631   000F6C  0E0A               	movlw	10
  2632   000F6E  5C0B               	subwf	(??_atoi+1)^0,w,c
  2633   000F70  A0D8               	btfss	status,0,c
  2634   000F72  EFBD  F007         	goto	u1681
  2635   000F76  EFBF  F007         	goto	u1680
  2636   000F7A                     u1681:
  2637   000F7A  EF8C  F007         	goto	l2131
  2638   000F7E                     u1680:
  2639   000F7E  500D               	movf	atoi@neg^0,w,c
  2640   000F80  100E               	iorwf	(atoi@neg+1)^0,w,c
  2641   000F82  A4D8               	btfss	status,2,c
  2642   000F84  EFC6  F007         	goto	u1691
  2643   000F88  EFC8  F007         	goto	u1690
  2644   000F8C                     u1691:
  2645   000F8C  EFD6  F007         	goto	l903
  2646   000F90                     u1690:
  2647   000F90  C00F  F00A         	movff	atoi@n,??_atoi
  2648   000F94  C010  F00B         	movff	atoi@n+1,??_atoi+1
  2649   000F98  1E0A               	comf	??_atoi^0,f,c
  2650   000F9A  1E0B               	comf	(??_atoi+1)^0,f,c
  2651   000F9C  4A0A               	infsnz	??_atoi^0,f,c
  2652   000F9E  2A0B               	incf	(??_atoi+1)^0,f,c
  2653   000FA0  C00A  F008         	movff	??_atoi,?_atoi
  2654   000FA4  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2655   000FA8  EFDA  F007         	goto	l906
  2656   000FAC                     l903:
  2657   000FAC  C00F  F008         	movff	atoi@n,?_atoi
  2658   000FB0  C010  F009         	movff	atoi@n+1,?_atoi+1
  2659   000FB4                     l906:
  2660   000FB4  0012               	return		;funcret
  2661   000FB6                     __end_of_atoi:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _isspace *****************
  2665 ;; Defined at:
  2666 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  c               2    1[COMRAM] int 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;		None
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  2    1[COMRAM] int 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2680 ;;      Params:         2       0       0       0       0       0       0
  2681 ;;      Locals:         1       0       0       0       0       0       0
  2682 ;;      Temps:          2       0       0       0       0       0       0
  2683 ;;      Totals:         5       0       0       0       0       0       0
  2684 ;;Total ram usage:        5 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_atoi
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text13
  2695   00150E                     __ptext13:
  2696                           	callstack 0
  2697   00150E                     _isspace:
  2698                           	callstack 25
  2699   00150E  0E01               	movlw	1
  2700   001510  6E06               	movwf	_isspace$1044^0,c
  2701   001512  0E20               	movlw	32
  2702   001514  1802               	xorwf	isspace@c^0,w,c
  2703   001516  1003               	iorwf	(isspace@c+1)^0,w,c
  2704   001518  B4D8               	btfsc	status,2,c
  2705   00151A  EF91  F00A         	goto	u1511
  2706   00151E  EF93  F00A         	goto	u1510
  2707   001522                     u1511:
  2708   001522  EFA6  F00A         	goto	l2051
  2709   001526                     u1510:
  2710   001526  0EF7               	movlw	247
  2711   001528  2402               	addwf	isspace@c^0,w,c
  2712   00152A  6E04               	movwf	??_isspace^0,c
  2713   00152C  0EFF               	movlw	255
  2714   00152E  2003               	addwfc	(isspace@c+1)^0,w,c
  2715   001530  6E05               	movwf	(??_isspace+1)^0,c
  2716   001532  5005               	movf	(??_isspace+1)^0,w,c
  2717   001534  E109               	bnz	u1520
  2718   001536  0E05               	movlw	5
  2719   001538  5C04               	subwf	??_isspace^0,w,c
  2720   00153A  A0D8               	btfss	status,0,c
  2721   00153C  EFA2  F00A         	goto	u1521
  2722   001540  EFA4  F00A         	goto	u1520
  2723   001544                     u1521:
  2724   001544  EFA6  F00A         	goto	l2051
  2725   001548                     u1520:
  2726   001548  0E00               	movlw	0
  2727   00154A  6E06               	movwf	_isspace$1044^0,c
  2728   00154C                     l2051:
  2729   00154C  C006  F002         	movff	_isspace$1044,?_isspace
  2730   001550  6A03               	clrf	(?_isspace+1)^0,c
  2731   001552  0012               	return		;funcret
  2732   001554                     __end_of_isspace:
  2733                           	callstack 0
  2734                           
  2735 ;; *************** function _isdigit *****************
  2736 ;; Defined at:
  2737 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  c               2    1[COMRAM] int 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;		None
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  2    1[COMRAM] int 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2751 ;;      Params:         2       0       0       0       0       0       0
  2752 ;;      Locals:         0       0       0       0       0       0       0
  2753 ;;      Temps:          2       0       0       0       0       0       0
  2754 ;;      Totals:         4       0       0       0       0       0       0
  2755 ;;Total ram usage:        4 bytes
  2756 ;; Hardware stack levels used: 1
  2757 ;; Hardware stack levels required when called: 1
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_vfpfcnvrt
  2762 ;;		_atoi
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text14
  2767   0015D8                     __ptext14:
  2768                           	callstack 0
  2769   0015D8                     _isdigit:
  2770                           	callstack 26
  2771   0015D8  0ED0               	movlw	208
  2772   0015DA  2402               	addwf	isdigit@c^0,w,c
  2773   0015DC  6E04               	movwf	??_isdigit^0,c
  2774   0015DE  0EFF               	movlw	255
  2775   0015E0  2003               	addwfc	(isdigit@c+1)^0,w,c
  2776   0015E2  6E05               	movwf	(??_isdigit+1)^0,c
  2777   0015E4  5005               	movf	(??_isdigit+1)^0,w,c
  2778   0015E6  E10A               	bnz	u1490
  2779   0015E8  0E0A               	movlw	10
  2780   0015EA  5C04               	subwf	??_isdigit^0,w,c
  2781   0015EC  A0D8               	btfss	status,0,c
  2782   0015EE  EFFB  F00A         	goto	u1491
  2783   0015F2  EFFE  F00A         	goto	u1490
  2784   0015F6                     u1491:
  2785   0015F6  0E01               	movlw	1
  2786   0015F8  EFFF  F00A         	goto	u1500
  2787   0015FC                     u1490:
  2788   0015FC  0E00               	movlw	0
  2789   0015FE                     u1500:
  2790   0015FE  6E02               	movwf	?_isdigit^0,c
  2791   001600  6A03               	clrf	(?_isdigit+1)^0,c
  2792   001602  0012               	return		;funcret
  2793   001604                     __end_of_isdigit:
  2794                           	callstack 0
  2795                           
  2796 ;; *************** function ___wmul *****************
  2797 ;; Defined at:
  2798 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  multiplier      2    1[COMRAM] unsigned int 
  2801 ;;  multiplicand    2    3[COMRAM] unsigned int 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  product         2    5[COMRAM] unsigned int 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  2    1[COMRAM] unsigned int 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, prodl, prodh
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2813 ;;      Params:         4       0       0       0       0       0       0
  2814 ;;      Locals:         2       0       0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0
  2816 ;;      Totals:         6       0       0       0       0       0       0
  2817 ;;Total ram usage:        6 bytes
  2818 ;; Hardware stack levels used: 1
  2819 ;; Hardware stack levels required when called: 1
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_atoi
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text15
  2828   00162A                     __ptext15:
  2829                           	callstack 0
  2830   00162A                     ___wmul:
  2831                           	callstack 25
  2832   00162A  5002               	movf	___wmul@multiplier^0,w,c
  2833   00162C  0204               	mulwf	___wmul@multiplicand^0,c
  2834   00162E  CFF3 F006          	movff	prodl,___wmul@product
  2835   001632  CFF4 F007          	movff	prodh,___wmul@product+1
  2836   001636  5002               	movf	___wmul@multiplier^0,w,c
  2837   001638  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  2838   00163A  50F3               	movf	243,w,c
  2839   00163C  2607               	addwf	(___wmul@product+1)^0,f,c
  2840   00163E  5003               	movf	(___wmul@multiplier+1)^0,w,c
  2841   001640  0204               	mulwf	___wmul@multiplicand^0,c
  2842   001642  50F3               	movf	243,w,c
  2843   001644  2607               	addwf	(___wmul@product+1)^0,f,c
  2844   001646  C006  F002         	movff	___wmul@product,?___wmul
  2845   00164A  C007  F003         	movff	___wmul@product+1,?___wmul+1
  2846   00164E  0012               	return		;funcret
  2847   001650                     __end_of___wmul:
  2848                           	callstack 0
  2849                           
  2850 ;; *************** function _lcd_write *****************
  2851 ;; Defined at:
  2852 ;;		line 77 in file "LCD4b_EXSTO.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  lin             1    wreg     unsigned char 
  2855 ;;  col             1    7[COMRAM] unsigned char 
  2856 ;;  str             2    8[COMRAM] PTR unsigned char 
  2857 ;;		 -> STR_4(16), STR_3(16), bufferLCD(32), STR_1(16), 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  lin             1   11[COMRAM] unsigned char 
  2860 ;;  end             1   10[COMRAM] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2870 ;;      Params:         3       0       0       0       0       0       0
  2871 ;;      Locals:         2       0       0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0       0       0
  2873 ;;      Totals:         5       0       0       0       0       0       0
  2874 ;;Total ram usage:        5 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; Hardware stack levels required when called: 4
  2877 ;; This function calls:
  2878 ;;		_lcd_send_byte
  2879 ;; This function is called by:
  2880 ;;		_main
  2881 ;;		_lcd_clear
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text16
  2886   0012C4                     __ptext16:
  2887                           	callstack 0
  2888   0012C4                     _lcd_write:
  2889                           	callstack 26
  2890                           
  2891                           ;incstack = 0
  2892                           ;lcd_write@lin stored from wreg
  2893   0012C4  6E0C               	movwf	lcd_write@lin^0,c
  2894   0012C6                     
  2895                           ;LCD4b_EXSTO.c: 77: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 78: {;L
      +                          CD4b_EXSTO.c: 79:     char end;;LCD4b_EXSTO.c: 81:     if(lin == 1)
  2896   0012C6  040C               	decf	lcd_write@lin^0,w,c
  2897   0012C8  A4D8               	btfss	status,2,c
  2898   0012CA  EF69  F009         	goto	u1211
  2899   0012CE  EF6B  F009         	goto	u1210
  2900   0012D2                     u1211:
  2901   0012D2  EF70  F009         	goto	l1833
  2902   0012D6                     u1210:
  2903   0012D6                     
  2904                           ;LCD4b_EXSTO.c: 82:     {;LCD4b_EXSTO.c: 83:         end = col + 0X80 - 1;
  2905   0012D6  5008               	movf	lcd_write@col^0,w,c
  2906   0012D8  0F7F               	addlw	127
  2907   0012DA  6E0B               	movwf	lcd_write@end^0,c
  2908                           
  2909                           ;LCD4b_EXSTO.c: 84:     }
  2910   0012DC  EF7C  F009         	goto	l1837
  2911   0012E0                     l1833:
  2912   0012E0  0E02               	movlw	2
  2913   0012E2  180C               	xorwf	lcd_write@lin^0,w,c
  2914   0012E4  A4D8               	btfss	status,2,c
  2915   0012E6  EF77  F009         	goto	u1221
  2916   0012EA  EF79  F009         	goto	u1220
  2917   0012EE                     u1221:
  2918   0012EE  EF7C  F009         	goto	l1837
  2919   0012F2                     u1220:
  2920   0012F2                     
  2921                           ;LCD4b_EXSTO.c: 86:     {;LCD4b_EXSTO.c: 87:         end = col + 0xC0 - 1;
  2922   0012F2  5008               	movf	lcd_write@col^0,w,c
  2923   0012F4  0FBF               	addlw	191
  2924   0012F6  6E0B               	movwf	lcd_write@end^0,c
  2925   0012F8                     l1837:
  2926                           
  2927                           ;LCD4b_EXSTO.c: 89:     lcd_send_byte(0,end);
  2928   0012F8  C00B  F006         	movff	lcd_write@end,lcd_send_byte@data
  2929   0012FC  0E00               	movlw	0
  2930   0012FE  EC38  F00B         	call	_lcd_send_byte
  2931                           
  2932                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2933   001302  EF99  F009         	goto	l1843
  2934   001306                     l1839:
  2935                           
  2936                           ;LCD4b_EXSTO.c: 92:     {;LCD4b_EXSTO.c: 93:         lcd_send_byte(1,*str);
  2937   001306  C009  FFF6         	movff	lcd_write@str,tblptrl
  2938   00130A  C00A  FFF7         	movff	lcd_write@str+1,tblptrh
  2939   00130E  6AF8               	clrf	tblptru,c
  2940   001310  0E05               	movlw	(high __ramtop+-1)
  2941   001312  64F7               	cpfsgt	tblptrh,c
  2942   001314  D003               	bra	u1237
  2943   001316  0008               	tblrd		*
  2944   001318  50F5               	movf	tablat,w,c
  2945   00131A  D005               	bra	u1230
  2946   00131C                     u1237:
  2947   00131C  CFF6 FFE1          	movff	tblptrl,fsr1l
  2948   001320  CFF7 FFE2          	movff	tblptrh,fsr1h
  2949   001324  50E7               	movf	indf1,w,c
  2950   001326                     u1230:
  2951   001326  6E06               	movwf	lcd_send_byte@data^0,c
  2952   001328  0E01               	movlw	1
  2953   00132A  EC38  F00B         	call	_lcd_send_byte
  2954   00132E                     
  2955                           ;LCD4b_EXSTO.c: 94:         str++;
  2956   00132E  4A09               	infsnz	lcd_write@str^0,f,c
  2957   001330  2A0A               	incf	(lcd_write@str+1)^0,f,c
  2958   001332                     l1843:
  2959                           
  2960                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2961   001332  C009  FFF6         	movff	lcd_write@str,tblptrl
  2962   001336  C00A  FFF7         	movff	lcd_write@str+1,tblptrh
  2963   00133A  6AF8               	clrf	tblptru,c
  2964   00133C  0E05               	movlw	(high __ramtop+-1)
  2965   00133E  64F7               	cpfsgt	tblptrh,c
  2966   001340  D003               	bra	u1247
  2967   001342  0008               	tblrd		*
  2968   001344  50F5               	movf	tablat,w,c
  2969   001346  D005               	bra	u1240
  2970   001348                     u1247:
  2971   001348  CFF6 FFE1          	movff	tblptrl,fsr1l
  2972   00134C  CFF7 FFE2          	movff	tblptrh,fsr1h
  2973   001350  50E7               	movf	indf1,w,c
  2974   001352                     u1240:
  2975   001352  0900               	iorlw	0
  2976   001354  A4D8               	btfss	status,2,c
  2977   001356  EFAF  F009         	goto	u1251
  2978   00135A  EFB1  F009         	goto	u1250
  2979   00135E                     u1251:
  2980   00135E  EF83  F009         	goto	l1839
  2981   001362                     u1250:
  2982   001362  0012               	return		;funcret
  2983   001364                     __end_of_lcd_write:
  2984                           	callstack 0
  2985                           
  2986 ;; *************** function _lcd_send_byte *****************
  2987 ;; Defined at:
  2988 ;;		line 63 in file "LCD4b_EXSTO.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  level           1    wreg     unsigned char 
  2991 ;;  data            1    5[COMRAM] unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  level           1    6[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         1       0       0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0
  3006 ;;      Totals:         2       0       0       0       0       0       0
  3007 ;;Total ram usage:        2 bytes
  3008 ;; Hardware stack levels used: 1
  3009 ;; Hardware stack levels required when called: 3
  3010 ;; This function calls:
  3011 ;;		_lcd_cmd
  3012 ;; This function is called by:
  3013 ;;		_lcd_write
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text17
  3018   001670                     __ptext17:
  3019                           	callstack 0
  3020   001670                     _lcd_send_byte:
  3021                           	callstack 26
  3022                           
  3023                           ;incstack = 0
  3024                           ;lcd_send_byte@level stored from wreg
  3025   001670  6E07               	movwf	lcd_send_byte@level^0,c
  3026   001672                     
  3027                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3028   001672  B007               	btfsc	lcd_send_byte@level^0,0,c
  3029   001674  D002               	bra	u1185
  3030   001676  9084               	bcf	132,0,c	;volatile
  3031   001678  D001               	bra	u1186
  3032   00167A                     u1185:
  3033   00167A  8084               	bsf	132,0,c	;volatile
  3034   00167C                     u1186:
  3035   00167C                     
  3036                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3037   00167C  0E42               	movlw	66
  3038   00167E                     u1787:
  3039   00167E  2EE8               	decfsz	wreg,f,c
  3040   001680  D7FE               	bra	u1787
  3041   001682  D000               	nop2	
  3042   001684                     
  3043                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3044   001684  9484               	bcf	132,2,c	;volatile
  3045   001686                     
  3046                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3047   001686  5006               	movf	lcd_send_byte@data^0,w,c
  3048   001688  ECDB  F007         	call	_lcd_cmd
  3049   00168C  0012               	return		;funcret
  3050   00168E                     __end_of_lcd_send_byte:
  3051                           	callstack 0
  3052                           
  3053 ;; *************** function _lcd_init *****************
  3054 ;; Defined at:
  3055 ;;		line 3 in file "LCD4b_EXSTO.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  i               1    6[COMRAM] unsigned char 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3069 ;;      Params:         0       0       0       0       0       0       0
  3070 ;;      Locals:         1       0       0       0       0       0       0
  3071 ;;      Temps:          1       0       0       0       0       0       0
  3072 ;;      Totals:         2       0       0       0       0       0       0
  3073 ;;Total ram usage:        2 bytes
  3074 ;; Hardware stack levels used: 1
  3075 ;; Hardware stack levels required when called: 3
  3076 ;; This function calls:
  3077 ;;		_lcd_cmd
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text18
  3084   001364                     __ptext18:
  3085                           	callstack 0
  3086   001364                     _lcd_init:
  3087                           	callstack 27
  3088   001364                     
  3089                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3090   001364  0E00               	movlw	0
  3091   001366  6E95               	movwf	149,c	;volatile
  3092   001368                     
  3093                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3094   001368  9496               	bcf	150,2,c	;volatile
  3095   00136A                     
  3096                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3097   00136A  9296               	bcf	150,1,c	;volatile
  3098   00136C                     
  3099                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3100   00136C  9096               	bcf	150,0,c	;volatile
  3101                           
  3102                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3103   00136E  0E00               	movlw	0
  3104   001370  6E83               	movwf	131,c	;volatile
  3105   001372                     
  3106                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3107   001372  9084               	bcf	132,0,c	;volatile
  3108   001374                     
  3109                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3110   001374  9284               	bcf	132,1,c	;volatile
  3111   001376                     
  3112                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3113   001376  9484               	bcf	132,2,c	;volatile
  3114   001378                     
  3115                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3116   001378  0E27               	movlw	39
  3117   00137A  6E06               	movwf	??_lcd_init^0,c
  3118   00137C  0EF5               	movlw	245
  3119   00137E                     u1797:
  3120   00137E  2EE8               	decfsz	wreg,f,c
  3121   001380  D7FE               	bra	u1797
  3122   001382  2E06               	decfsz	??_lcd_init^0,f,c
  3123   001384  D7FC               	bra	u1797
  3124   001386  F000               	nop	
  3125   001388                     
  3126                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3127   001388  0E00               	movlw	0
  3128   00138A  6E07               	movwf	lcd_init@i^0,c
  3129   00138C                     l1807:
  3130                           
  3131                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3132   00138C  0E30               	movlw	48
  3133   00138E  ECDB  F007         	call	_lcd_cmd
  3134   001392                     
  3135                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3136   001392  0E0D               	movlw	13
  3137   001394  6E06               	movwf	??_lcd_init^0,c
  3138   001396  0EFC               	movlw	252
  3139   001398                     u1807:
  3140   001398  2EE8               	decfsz	wreg,f,c
  3141   00139A  D7FE               	bra	u1807
  3142   00139C  2E06               	decfsz	??_lcd_init^0,f,c
  3143   00139E  D7FC               	bra	u1807
  3144   0013A0                     
  3145                           ;LCD4b_EXSTO.c: 22:     }
  3146   0013A0  2A07               	incf	lcd_init@i^0,f,c
  3147   0013A2  0E02               	movlw	2
  3148   0013A4  6407               	cpfsgt	lcd_init@i^0,c
  3149   0013A6  EFD7  F009         	goto	u1201
  3150   0013AA  EFD9  F009         	goto	u1200
  3151   0013AE                     u1201:
  3152   0013AE  EFC6  F009         	goto	l1807
  3153   0013B2                     u1200:
  3154   0013B2                     
  3155                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3156   0013B2  0E02               	movlw	2
  3157   0013B4  ECDB  F007         	call	_lcd_cmd
  3158   0013B8                     
  3159                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3160   0013B8  0E1A               	movlw	26
  3161   0013BA                     u1817:
  3162   0013BA  2EE8               	decfsz	wreg,f,c
  3163   0013BC  D7FE               	bra	u1817
  3164   0013BE  D000               	nop2	
  3165   0013C0                     
  3166                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3167   0013C0  0E28               	movlw	40
  3168   0013C2  ECDB  F007         	call	_lcd_cmd
  3169                           
  3170                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3171   0013C6  0E1A               	movlw	26
  3172   0013C8                     u1827:
  3173   0013C8  2EE8               	decfsz	wreg,f,c
  3174   0013CA  D7FE               	bra	u1827
  3175   0013CC  D000               	nop2	
  3176   0013CE                     
  3177                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3178   0013CE  0E01               	movlw	1
  3179   0013D0  ECDB  F007         	call	_lcd_cmd
  3180   0013D4                     
  3181                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3182   0013D4  0E06               	movlw	6
  3183   0013D6  6E06               	movwf	??_lcd_init^0,c
  3184   0013D8  0E30               	movlw	48
  3185   0013DA                     u1837:
  3186   0013DA  2EE8               	decfsz	wreg,f,c
  3187   0013DC  D7FE               	bra	u1837
  3188   0013DE  2E06               	decfsz	??_lcd_init^0,f,c
  3189   0013E0  D7FC               	bra	u1837
  3190   0013E2  D000               	nop2	
  3191                           
  3192                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3193   0013E4  0E0C               	movlw	12
  3194   0013E6  ECDB  F007         	call	_lcd_cmd
  3195   0013EA                     
  3196                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3197   0013EA  0E1A               	movlw	26
  3198   0013EC                     u1847:
  3199   0013EC  2EE8               	decfsz	wreg,f,c
  3200   0013EE  D7FE               	bra	u1847
  3201   0013F0  D000               	nop2	
  3202   0013F2                     
  3203                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3204   0013F2  0E06               	movlw	6
  3205   0013F4  ECDB  F007         	call	_lcd_cmd
  3206                           
  3207                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3208   0013F8  0E1A               	movlw	26
  3209   0013FA                     u1857:
  3210   0013FA  2EE8               	decfsz	wreg,f,c
  3211   0013FC  D7FE               	bra	u1857
  3212   0013FE  D000               	nop2	
  3213   001400  0012               	return		;funcret
  3214   001402                     __end_of_lcd_init:
  3215                           	callstack 0
  3216                           
  3217 ;; *************** function _lcd_cmd *****************
  3218 ;; Defined at:
  3219 ;;		line 42 in file "LCD4b_EXSTO.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  cmd             1    wreg     unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  cmd             1    4[COMRAM] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3233 ;;      Params:         0       0       0       0       0       0       0
  3234 ;;      Locals:         1       0       0       0       0       0       0
  3235 ;;      Temps:          1       0       0       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used: 1
  3239 ;; Hardware stack levels required when called: 2
  3240 ;; This function calls:
  3241 ;;		_set_bit
  3242 ;; This function is called by:
  3243 ;;		_lcd_init
  3244 ;;		_lcd_send_byte
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text19
  3249   000FB6                     __ptext19:
  3250                           	callstack 0
  3251   000FB6                     _lcd_cmd:
  3252                           	callstack 26
  3253                           
  3254                           ;incstack = 0
  3255                           ;lcd_cmd@cmd stored from wreg
  3256   000FB6  6E05               	movwf	lcd_cmd@cmd^0,c
  3257   000FB8                     
  3258                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3259   000FB8  0E10               	movlw	16
  3260   000FBA  6E02               	movwf	set_bit@comp^0,c
  3261   000FBC  5005               	movf	lcd_cmd@cmd^0,w,c
  3262   000FBE  EC28  F00B         	call	_set_bit
  3263   000FC2  6E04               	movwf	??_lcd_cmd^0,c
  3264   000FC4  3A04               	swapf	??_lcd_cmd^0,f,c
  3265   000FC6  5083               	movf	131,w,c	;volatile
  3266   000FC8  1804               	xorwf	??_lcd_cmd^0,w,c
  3267   000FCA  0BEF               	andlw	-17
  3268   000FCC  1804               	xorwf	??_lcd_cmd^0,w,c
  3269   000FCE  6E83               	movwf	131,c	;volatile
  3270                           
  3271                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3272   000FD0  0E20               	movlw	32
  3273   000FD2  6E02               	movwf	set_bit@comp^0,c
  3274   000FD4  5005               	movf	lcd_cmd@cmd^0,w,c
  3275   000FD6  EC28  F00B         	call	_set_bit
  3276   000FDA  6E04               	movwf	??_lcd_cmd^0,c
  3277   000FDC  3A04               	swapf	??_lcd_cmd^0,f,c
  3278   000FDE  4604               	rlncf	??_lcd_cmd^0,f,c
  3279   000FE0  5083               	movf	131,w,c	;volatile
  3280   000FE2  1804               	xorwf	??_lcd_cmd^0,w,c
  3281   000FE4  0BDF               	andlw	-33
  3282   000FE6  1804               	xorwf	??_lcd_cmd^0,w,c
  3283   000FE8  6E83               	movwf	131,c	;volatile
  3284                           
  3285                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3286   000FEA  0E40               	movlw	64
  3287   000FEC  6E02               	movwf	set_bit@comp^0,c
  3288   000FEE  5005               	movf	lcd_cmd@cmd^0,w,c
  3289   000FF0  EC28  F00B         	call	_set_bit
  3290   000FF4  6E04               	movwf	??_lcd_cmd^0,c
  3291   000FF6  3A04               	swapf	??_lcd_cmd^0,f,c
  3292   000FF8  4604               	rlncf	??_lcd_cmd^0,f,c
  3293   000FFA  4604               	rlncf	??_lcd_cmd^0,f,c
  3294   000FFC  5083               	movf	131,w,c	;volatile
  3295   000FFE  1804               	xorwf	??_lcd_cmd^0,w,c
  3296   001000  0BBF               	andlw	-65
  3297   001002  1804               	xorwf	??_lcd_cmd^0,w,c
  3298   001004  6E83               	movwf	131,c	;volatile
  3299                           
  3300                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3301   001006  0E80               	movlw	128
  3302   001008  6E02               	movwf	set_bit@comp^0,c
  3303   00100A  5005               	movf	lcd_cmd@cmd^0,w,c
  3304   00100C  EC28  F00B         	call	_set_bit
  3305   001010  6E04               	movwf	??_lcd_cmd^0,c
  3306   001012  3204               	rrcf	??_lcd_cmd^0,f,c
  3307   001014  3204               	rrcf	??_lcd_cmd^0,f,c
  3308   001016  5083               	movf	131,w,c	;volatile
  3309   001018  1804               	xorwf	??_lcd_cmd^0,w,c
  3310   00101A  0B7F               	andlw	-129
  3311   00101C  1804               	xorwf	??_lcd_cmd^0,w,c
  3312   00101E  6E83               	movwf	131,c	;volatile
  3313   001020                     
  3314                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3315   001020  8484               	bsf	132,2,c	;volatile
  3316   001022                     
  3317                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3318   001022  9484               	bcf	132,2,c	;volatile
  3319   001024                     
  3320                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3321   001024  0E42               	movlw	66
  3322   001026                     u1867:
  3323   001026  2EE8               	decfsz	wreg,f,c
  3324   001028  D7FE               	bra	u1867
  3325   00102A  D000               	nop2	
  3326   00102C                     
  3327                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3328   00102C  0E01               	movlw	1
  3329   00102E  6E02               	movwf	set_bit@comp^0,c
  3330   001030  5005               	movf	lcd_cmd@cmd^0,w,c
  3331   001032  EC28  F00B         	call	_set_bit
  3332   001036  6E04               	movwf	??_lcd_cmd^0,c
  3333   001038  3A04               	swapf	??_lcd_cmd^0,f,c
  3334   00103A  5083               	movf	131,w,c	;volatile
  3335   00103C  1804               	xorwf	??_lcd_cmd^0,w,c
  3336   00103E  0BEF               	andlw	-17
  3337   001040  1804               	xorwf	??_lcd_cmd^0,w,c
  3338   001042  6E83               	movwf	131,c	;volatile
  3339   001044                     
  3340                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3341   001044  0E02               	movlw	2
  3342   001046  6E02               	movwf	set_bit@comp^0,c
  3343   001048  5005               	movf	lcd_cmd@cmd^0,w,c
  3344   00104A  EC28  F00B         	call	_set_bit
  3345   00104E  6E04               	movwf	??_lcd_cmd^0,c
  3346   001050  3A04               	swapf	??_lcd_cmd^0,f,c
  3347   001052  4604               	rlncf	??_lcd_cmd^0,f,c
  3348   001054  5083               	movf	131,w,c	;volatile
  3349   001056  1804               	xorwf	??_lcd_cmd^0,w,c
  3350   001058  0BDF               	andlw	-33
  3351   00105A  1804               	xorwf	??_lcd_cmd^0,w,c
  3352   00105C  6E83               	movwf	131,c	;volatile
  3353   00105E                     
  3354                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3355   00105E  0E04               	movlw	4
  3356   001060  6E02               	movwf	set_bit@comp^0,c
  3357   001062  5005               	movf	lcd_cmd@cmd^0,w,c
  3358   001064  EC28  F00B         	call	_set_bit
  3359   001068  6E04               	movwf	??_lcd_cmd^0,c
  3360   00106A  3A04               	swapf	??_lcd_cmd^0,f,c
  3361   00106C  4604               	rlncf	??_lcd_cmd^0,f,c
  3362   00106E  4604               	rlncf	??_lcd_cmd^0,f,c
  3363   001070  5083               	movf	131,w,c	;volatile
  3364   001072  1804               	xorwf	??_lcd_cmd^0,w,c
  3365   001074  0BBF               	andlw	-65
  3366   001076  1804               	xorwf	??_lcd_cmd^0,w,c
  3367   001078  6E83               	movwf	131,c	;volatile
  3368   00107A                     
  3369                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3370   00107A  0E08               	movlw	8
  3371   00107C  6E02               	movwf	set_bit@comp^0,c
  3372   00107E  5005               	movf	lcd_cmd@cmd^0,w,c
  3373   001080  EC28  F00B         	call	_set_bit
  3374   001084  6E04               	movwf	??_lcd_cmd^0,c
  3375   001086  3204               	rrcf	??_lcd_cmd^0,f,c
  3376   001088  3204               	rrcf	??_lcd_cmd^0,f,c
  3377   00108A  5083               	movf	131,w,c	;volatile
  3378   00108C  1804               	xorwf	??_lcd_cmd^0,w,c
  3379   00108E  0B7F               	andlw	-129
  3380   001090  1804               	xorwf	??_lcd_cmd^0,w,c
  3381   001092  6E83               	movwf	131,c	;volatile
  3382   001094                     
  3383                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3384   001094  8484               	bsf	132,2,c	;volatile
  3385   001096                     
  3386                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3387   001096  9484               	bcf	132,2,c	;volatile
  3388   001098  0012               	return		;funcret
  3389   00109A                     __end_of_lcd_cmd:
  3390                           	callstack 0
  3391                           
  3392 ;; *************** function _set_bit *****************
  3393 ;; Defined at:
  3394 ;;		line 36 in file "LCD4b_EXSTO.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  cmd             1    wreg     unsigned char 
  3397 ;;  comp            1    1[COMRAM] unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  cmd             1    2[COMRAM] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      unsigned char 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3409 ;;      Params:         1       0       0       0       0       0       0
  3410 ;;      Locals:         1       0       0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0
  3412 ;;      Totals:         2       0       0       0       0       0       0
  3413 ;;Total ram usage:        2 bytes
  3414 ;; Hardware stack levels used: 1
  3415 ;; Hardware stack levels required when called: 1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_lcd_cmd
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text20
  3424   001650                     __ptext20:
  3425                           	callstack 0
  3426   001650                     _set_bit:
  3427                           	callstack 26
  3428                           
  3429                           ;incstack = 0
  3430                           ;set_bit@cmd stored from wreg
  3431   001650  6E03               	movwf	set_bit@cmd^0,c
  3432   001652                     
  3433                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3434   001652  5003               	movf	set_bit@cmd^0,w,c
  3435   001654  1402               	andwf	set_bit@comp^0,w,c
  3436   001656  0900               	iorlw	0
  3437   001658  B4D8               	btfsc	status,2,c
  3438   00165A  EF31  F00B         	goto	u931
  3439   00165E  EF33  F00B         	goto	u930
  3440   001662                     u931:
  3441   001662  EF36  F00B         	goto	l1577
  3442   001666                     u930:
  3443   001666  0E01               	movlw	1
  3444   001668  EF37  F00B         	goto	l92
  3445   00166C                     l1577:
  3446   00166C  0E00               	movlw	0
  3447   00166E                     l92:
  3448   00166E  0012               	return		;funcret
  3449   001670                     __end_of_set_bit:
  3450                           	callstack 0
  3451                           
  3452 ;; *************** function _config_TIMER1 *****************
  3453 ;; Defined at:
  3454 ;;		line 104 in file "Program_main.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3468 ;;      Params:         0       0       0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0
  3471 ;;      Totals:         0       0       0       0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 1
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text21
  3483   00168E                     __ptext21:
  3484                           	callstack 0
  3485   00168E                     _config_TIMER1:
  3486                           	callstack 29
  3487   00168E                     
  3488                           ;Program_main.c: 107:     T1CON = 0X8F;
  3489   00168E  0E8F               	movlw	143
  3490   001690  6ECD               	movwf	205,c	;volatile
  3491                           
  3492                           ;Program_main.c: 115:     TMR1H = 0X80;
  3493   001692  0E80               	movlw	128
  3494   001694  6ECF               	movwf	207,c	;volatile
  3495                           
  3496                           ;Program_main.c: 116:     TMR1L = 0X00;
  3497   001696  0E00               	movlw	0
  3498   001698  6ECE               	movwf	206,c	;volatile
  3499   00169A  0012               	return		;funcret
  3500   00169C                     __end_of_config_TIMER1:
  3501                           	callstack 0
  3502                           
  3503 ;; *************** function _config_IO *****************
  3504 ;; Defined at:
  3505 ;;		line 78 in file "Program_main.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3519 ;;      Params:         0       0       0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0
  3522 ;;      Totals:         0       0       0       0       0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used: 1
  3525 ;; Hardware stack levels required when called: 1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text22
  3534   00169C                     __ptext22:
  3535                           	callstack 0
  3536   00169C                     _config_IO:
  3537                           	callstack 29
  3538   00169C                     
  3539                           ;Program_main.c: 80:     TRISB = 0X00;
  3540   00169C  0E00               	movlw	0
  3541   00169E  6E93               	movwf	147,c	;volatile
  3542                           
  3543                           ;Program_main.c: 81:     PORTB = 0X01;
  3544   0016A0  0E01               	movlw	1
  3545   0016A2  6E81               	movwf	129,c	;volatile
  3546                           
  3547                           ;Program_main.c: 82:     ADCON1 = 0X0F;
  3548   0016A4  0E0F               	movlw	15
  3549   0016A6  6EC1               	movwf	193,c	;volatile
  3550   0016A8  0012               	return		;funcret
  3551   0016AA                     __end_of_config_IO:
  3552                           	callstack 0
  3553                           
  3554 ;; *************** function _config_INTERRUPT *****************
  3555 ;; Defined at:
  3556 ;;		line 91 in file "Program_main.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3570 ;;      Params:         0       0       0       0       0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0
  3573 ;;      Totals:         0       0       0       0       0       0       0
  3574 ;;Total ram usage:        0 bytes
  3575 ;; Hardware stack levels used: 1
  3576 ;; Hardware stack levels required when called: 1
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text23
  3585   0016B4                     __ptext23:
  3586                           	callstack 0
  3587   0016B4                     _config_INTERRUPT:
  3588                           	callstack 29
  3589   0016B4                     
  3590                           ;Program_main.c: 93:     INTCON = 0xC0;
  3591   0016B4  0EC0               	movlw	192
  3592   0016B6  6EF2               	movwf	242,c	;volatile
  3593   0016B8                     
  3594                           ;Program_main.c: 102:     PIE1bits.TMR1IE = 1;
  3595   0016B8  809D               	bsf	157,0,c	;volatile
  3596   0016BA  0012               	return		;funcret
  3597   0016BC                     __end_of_config_INTERRUPT:
  3598                           	callstack 0
  3599                           
  3600 ;; *************** function _config_FOSC *****************
  3601 ;; Defined at:
  3602 ;;		line 85 in file "Program_main.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3616 ;;      Params:         0       0       0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0
  3619 ;;      Totals:         0       0       0       0       0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used: 1
  3622 ;; Hardware stack levels required when called: 1
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_main
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text24
  3631   0016AA                     __ptext24:
  3632                           	callstack 0
  3633   0016AA                     _config_FOSC:
  3634                           	callstack 29
  3635   0016AA                     
  3636                           ;Program_main.c: 87:     OSCCON = 0X00;
  3637   0016AA  0E00               	movlw	0
  3638   0016AC  6ED3               	movwf	211,c	;volatile
  3639                           
  3640                           ;Program_main.c: 88:     OSCTUNE = 0X00;
  3641   0016AE  0E00               	movlw	0
  3642   0016B0  6E9B               	movwf	155,c	;volatile
  3643   0016B2  0012               	return		;funcret
  3644   0016B4                     __end_of_config_FOSC:
  3645                           	callstack 0
  3646                           
  3647 ;; *************** function _intern_TMR1 *****************
  3648 ;; Defined at:
  3649 ;;		line 121 in file "Program_main.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         0       0       0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0
  3665 ;;      Temps:          1       0       0       0       0       0       0
  3666 ;;      Totals:         1       0       0       0       0       0       0
  3667 ;;Total ram usage:        1 bytes
  3668 ;; Hardware stack levels used: 1
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		Interrupt level 2
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	intcode
  3677   000008                     __pintcode:
  3678                           	callstack 0
  3679   000008                     _intern_TMR1:
  3680                           	callstack 22
  3681                           
  3682                           ;incstack = 0
  3683   000008  8272               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3684   00000A  EDB2  F008         	call	int_func,f	;refresh shadow registers
  3685                           
  3686                           	psect	intcode_body
  3687   001164                     __pintcode_body:
  3688                           	callstack 22
  3689   001164                     int_func:
  3690                           	callstack 22
  3691   001164  0006               	pop		; remove dummy address from shadow register refresh
  3692   001166                     
  3693                           ;Program_main.c: 123:     if (PIR1bits.TMR1IF == 1)
  3694   001166  A09E               	btfss	158,0,c	;volatile
  3695   001168  EFB8  F008         	goto	i2u61_41
  3696   00116C  EFBA  F008         	goto	i2u61_40
  3697   001170                     i2u61_41:
  3698   001170  EF0B  F009         	goto	i2l59
  3699   001174                     i2u61_40:
  3700   001174                     
  3701                           ;Program_main.c: 124:     {;Program_main.c: 125:         timer_seg++;
  3702   001174  4A6F               	infsnz	_timer_seg^0,f,c
  3703   001176  2A70               	incf	(_timer_seg+1)^0,f,c
  3704   001178                     
  3705                           ;Program_main.c: 126:         PORTBbits.RB0 =~ PORTBbits.RB0;
  3706   001178  B081               	btfsc	129,0,c	;volatile
  3707   00117A  EFC1  F008         	goto	i2u62_41
  3708   00117E  EFC4  F008         	goto	i2u62_40
  3709   001182                     i2u62_41:
  3710   001182  0E01               	movlw	1
  3711   001184  EFC5  F008         	goto	i2u62_46
  3712   001188                     i2u62_40:
  3713   001188  0E00               	movlw	0
  3714   00118A                     i2u62_46:
  3715   00118A  0AFF               	xorlw	255
  3716   00118C  6E01               	movwf	??_intern_TMR1^0,c
  3717   00118E  5081               	movf	129,w,c	;volatile
  3718   001190  1801               	xorwf	??_intern_TMR1^0,w,c
  3719   001192  0BFE               	andlw	-2
  3720   001194  1801               	xorwf	??_intern_TMR1^0,w,c
  3721   001196  6E81               	movwf	129,c	;volatile
  3722   001198                     
  3723                           ;Program_main.c: 127:         if (timer_seg >= 60)
  3724   001198  BE70               	btfsc	(_timer_seg+1)^0,7,c
  3725   00119A  EFD8  F008         	goto	i2u63_41
  3726   00119E  5070               	movf	(_timer_seg+1)^0,w,c
  3727   0011A0  E109               	bnz	i2u63_40
  3728   0011A2  0E3C               	movlw	60
  3729   0011A4  5C6F               	subwf	_timer_seg^0,w,c
  3730   0011A6  A0D8               	btfss	status,0,c
  3731   0011A8  EFD8  F008         	goto	i2u63_41
  3732   0011AC  EFDA  F008         	goto	i2u63_40
  3733   0011B0                     i2u63_41:
  3734   0011B0  EF06  F009         	goto	i2l56
  3735   0011B4                     i2u63_40:
  3736   0011B4                     
  3737                           ;Program_main.c: 128:         {;Program_main.c: 129:             timer_seg = 0;
  3738   0011B4  0E00               	movlw	0
  3739   0011B6  6E70               	movwf	(_timer_seg+1)^0,c
  3740   0011B8  0E00               	movlw	0
  3741   0011BA  6E6F               	movwf	_timer_seg^0,c
  3742   0011BC                     
  3743                           ;Program_main.c: 130:             timer_min++;
  3744   0011BC  4A6D               	infsnz	_timer_min^0,f,c
  3745   0011BE  2A6E               	incf	(_timer_min+1)^0,f,c
  3746   0011C0                     
  3747                           ;Program_main.c: 131:             if (timer_min >= 60)
  3748   0011C0  BE6E               	btfsc	(_timer_min+1)^0,7,c
  3749   0011C2  EFEC  F008         	goto	i2u64_41
  3750   0011C6  506E               	movf	(_timer_min+1)^0,w,c
  3751   0011C8  E109               	bnz	i2u64_40
  3752   0011CA  0E3C               	movlw	60
  3753   0011CC  5C6D               	subwf	_timer_min^0,w,c
  3754   0011CE  A0D8               	btfss	status,0,c
  3755   0011D0  EFEC  F008         	goto	i2u64_41
  3756   0011D4  EFEE  F008         	goto	i2u64_40
  3757   0011D8                     i2u64_41:
  3758   0011D8  EF06  F009         	goto	i2l56
  3759   0011DC                     i2u64_40:
  3760   0011DC                     
  3761                           ;Program_main.c: 132:             {;Program_main.c: 133:                 timer_min = 0;
  3762   0011DC  0E00               	movlw	0
  3763   0011DE  6E6E               	movwf	(_timer_min+1)^0,c
  3764   0011E0  0E00               	movlw	0
  3765   0011E2  6E6D               	movwf	_timer_min^0,c
  3766   0011E4                     
  3767                           ;Program_main.c: 134:                 timer_hor++;
  3768   0011E4  4A6B               	infsnz	_timer_hor^0,f,c
  3769   0011E6  2A6C               	incf	(_timer_hor+1)^0,f,c
  3770   0011E8                     
  3771                           ;Program_main.c: 135:                 if (timer_hor >= 24)
  3772   0011E8  BE6C               	btfsc	(_timer_hor+1)^0,7,c
  3773   0011EA  EF00  F009         	goto	i2u65_41
  3774   0011EE  506C               	movf	(_timer_hor+1)^0,w,c
  3775   0011F0  E109               	bnz	i2u65_40
  3776   0011F2  0E18               	movlw	24
  3777   0011F4  5C6B               	subwf	_timer_hor^0,w,c
  3778   0011F6  A0D8               	btfss	status,0,c
  3779   0011F8  EF00  F009         	goto	i2u65_41
  3780   0011FC  EF02  F009         	goto	i2u65_40
  3781   001200                     i2u65_41:
  3782   001200  EF06  F009         	goto	i2l56
  3783   001204                     i2u65_40:
  3784   001204                     
  3785                           ;Program_main.c: 136:                 {;Program_main.c: 137:                     timer_h
      +                          or = 0;
  3786   001204  0E00               	movlw	0
  3787   001206  6E6C               	movwf	(_timer_hor+1)^0,c
  3788   001208  0E00               	movlw	0
  3789   00120A  6E6B               	movwf	_timer_hor^0,c
  3790   00120C                     i2l56:
  3791                           
  3792                           ;Program_main.c: 141:         TMR1H = 0X80;
  3793   00120C  0E80               	movlw	128
  3794   00120E  6ECF               	movwf	207,c	;volatile
  3795                           
  3796                           ;Program_main.c: 142:         TMR1L = 0X00;
  3797   001210  0E00               	movlw	0
  3798   001212  6ECE               	movwf	206,c	;volatile
  3799   001214                     
  3800                           ;Program_main.c: 143:         PIR1bits.TMR1IF = 0;
  3801   001214  909E               	bcf	158,0,c	;volatile
  3802   001216                     i2l59:
  3803   001216  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3804   001218  0011               	retfie		f
  3805   00121A                     __end_of_intern_TMR1:
  3806                           	callstack 0
  3807                           
  3808                           	psect	rparam
  3809   000000                     
  3810                           	psect	temp
  3811   000072                     btemp:
  3812                           	callstack 0
  3813   000072                     	ds	1
  3814   000000                     int$flags	set	btemp
  3815   000000                     wtemp8	set	btemp+1
  3816   000000                     ttemp5	set	btemp+1
  3817   000000                     ttemp6	set	btemp+4
  3818   000000                     ttemp7	set	btemp+8
  3819                           
  3820                           	psect	idloc
  3821                           
  3822                           ;Config register IDLOC0 @ 0x200000
  3823                           ;	unspecified, using default values
  3824   200000                     	org	2097152
  3825   200000  FF                 	db	255
  3826                           
  3827                           ;Config register IDLOC1 @ 0x200001
  3828                           ;	unspecified, using default values
  3829   200001                     	org	2097153
  3830   200001  FF                 	db	255
  3831                           
  3832                           ;Config register IDLOC2 @ 0x200002
  3833                           ;	unspecified, using default values
  3834   200002                     	org	2097154
  3835   200002  FF                 	db	255
  3836                           
  3837                           ;Config register IDLOC3 @ 0x200003
  3838                           ;	unspecified, using default values
  3839   200003                     	org	2097155
  3840   200003  FF                 	db	255
  3841                           
  3842                           ;Config register IDLOC4 @ 0x200004
  3843                           ;	unspecified, using default values
  3844   200004                     	org	2097156
  3845   200004  FF                 	db	255
  3846                           
  3847                           ;Config register IDLOC5 @ 0x200005
  3848                           ;	unspecified, using default values
  3849   200005                     	org	2097157
  3850   200005  FF                 	db	255
  3851                           
  3852                           ;Config register IDLOC6 @ 0x200006
  3853                           ;	unspecified, using default values
  3854   200006                     	org	2097158
  3855   200006  FF                 	db	255
  3856                           
  3857                           ;Config register IDLOC7 @ 0x200007
  3858                           ;	unspecified, using default values
  3859   200007                     	org	2097159
  3860   200007  FF                 	db	255
  3861                           
  3862                           	psect	config
  3863                           
  3864                           ; Padding undefined space
  3865   300000                     	org	3145728
  3866   300000  FF                 	db	255
  3867                           
  3868                           ;Config register CONFIG1H @ 0x300001
  3869                           ;	Oscillator Selection bits
  3870                           ;	OSC = HS, HS oscillator
  3871                           ;	Fail-Safe Clock Monitor Enable bit
  3872                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3873                           ;	Internal/External Oscillator Switchover bit
  3874                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3875   300001                     	org	3145729
  3876   300001  02                 	db	2
  3877                           
  3878                           ;Config register CONFIG2L @ 0x300002
  3879                           ;	Power-up Timer Enable bit
  3880                           ;	PWRT = OFF, PWRT disabled
  3881                           ;	Brown-out Reset Enable bits
  3882                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3883                           ;	Brown Out Reset Voltage bits
  3884                           ;	BORV = 3, Minimum setting
  3885   300002                     	org	3145730
  3886   300002  19                 	db	25
  3887                           
  3888                           ;Config register CONFIG2H @ 0x300003
  3889                           ;	Watchdog Timer Enable bit
  3890                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3891                           ;	Watchdog Timer Postscale Select bits
  3892                           ;	WDTPS = 32768, 1:32768
  3893   300003                     	org	3145731
  3894   300003  1E                 	db	30
  3895                           
  3896                           ; Padding undefined space
  3897   300004                     	org	3145732
  3898   300004  FF                 	db	255
  3899                           
  3900                           ;Config register CONFIG3H @ 0x300005
  3901                           ;	CCP2 MUX bit
  3902                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3903                           ;	PORTB A/D Enable bit
  3904                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3905                           ;	Low-Power Timer1 Oscillator Enable bit
  3906                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3907                           ;	MCLR Pin Enable bit
  3908                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3909   300005                     	org	3145733
  3910   300005  81                 	db	129
  3911                           
  3912                           ;Config register CONFIG4L @ 0x300006
  3913                           ;	Stack Full/Underflow Reset Enable bit
  3914                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3915                           ;	Single-Supply ICSP Enable bit
  3916                           ;	LVP = OFF, Single-Supply ICSP disabled
  3917                           ;	Extended Instruction Set Enable bit
  3918                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3919                           ;	Background Debugger Enable bit
  3920                           ;	DEBUG = 0x1, unprogrammed default
  3921   300006                     	org	3145734
  3922   300006  81                 	db	129
  3923                           
  3924                           ; Padding undefined space
  3925   300007                     	org	3145735
  3926   300007  FF                 	db	255
  3927                           
  3928                           ;Config register CONFIG5L @ 0x300008
  3929                           ;	Code Protection bit
  3930                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3931                           ;	Code Protection bit
  3932                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3933                           ;	Code Protection bit
  3934                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3935                           ;	Code Protection bit
  3936                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3937   300008                     	org	3145736
  3938   300008  0F                 	db	15
  3939                           
  3940                           ;Config register CONFIG5H @ 0x300009
  3941                           ;	Boot Block Code Protection bit
  3942                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3943                           ;	Data EEPROM Code Protection bit
  3944                           ;	CPD = OFF, Data EEPROM not code-protected
  3945   300009                     	org	3145737
  3946   300009  C0                 	db	192
  3947                           
  3948                           ;Config register CONFIG6L @ 0x30000A
  3949                           ;	Write Protection bit
  3950                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3951                           ;	Write Protection bit
  3952                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3953                           ;	Write Protection bit
  3954                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3955                           ;	Write Protection bit
  3956                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3957   30000A                     	org	3145738
  3958   30000A  0F                 	db	15
  3959                           
  3960                           ;Config register CONFIG6H @ 0x30000B
  3961                           ;	Configuration Register Write Protection bit
  3962                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3963                           ;	Boot Block Write Protection bit
  3964                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3965                           ;	Data EEPROM Write Protection bit
  3966                           ;	WRTD = OFF, Data EEPROM not write-protected
  3967   30000B                     	org	3145739
  3968   30000B  E0                 	db	224
  3969                           
  3970                           ;Config register CONFIG7L @ 0x30000C
  3971                           ;	Table Read Protection bit
  3972                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3973                           ;	Table Read Protection bit
  3974                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3975                           ;	Table Read Protection bit
  3976                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3977                           ;	Table Read Protection bit
  3978                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3979   30000C                     	org	3145740
  3980   30000C  0F                 	db	15
  3981                           
  3982                           ;Config register CONFIG7H @ 0x30000D
  3983                           ;	Boot Block Table Read Protection bit
  3984                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3985   30000D                     	org	3145741
  3986   30000D  40                 	db	64
  3987                           tosu	equ	0xFFF
  3988                           tosh	equ	0xFFE
  3989                           tosl	equ	0xFFD
  3990                           stkptr	equ	0xFFC
  3991                           pclatu	equ	0xFFB
  3992                           pclath	equ	0xFFA
  3993                           pcl	equ	0xFF9
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           indf0	equ	0xFEF
  4001                           postinc0	equ	0xFEE
  4002                           postdec0	equ	0xFED
  4003                           preinc0	equ	0xFEC
  4004                           plusw0	equ	0xFEB
  4005                           fsr0h	equ	0xFEA
  4006                           fsr0l	equ	0xFE9
  4007                           wreg	equ	0xFE8
  4008                           indf1	equ	0xFE7
  4009                           postinc1	equ	0xFE6
  4010                           postdec1	equ	0xFE5
  4011                           preinc1	equ	0xFE4
  4012                           plusw1	equ	0xFE3
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           bsr	equ	0xFE0
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           preinc2	equ	0xFDC
  4020                           plusw2	equ	0xFDB
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8

Data Sizes:
    Strings     47
    Constant    0
    Data        0
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    102     113
    BANK0           128     13      77
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S957$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 32
		 -> bufferLCD(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S904$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S904$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 32
		 -> STR_4(CODE[16]), STR_3(CODE[16]), bufferLCD(BANK0[32]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _intern_TMR1 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _intern_TMR1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intern_TMR1 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intern_TMR1 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intern_TMR1 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intern_TMR1 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intern_TMR1 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12292
                        _config_FOSC
                   _config_INTERRUPT
                          _config_IO
                      _config_TIMER1
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    9629
                                             92 COMRAM    10     0     10
                                              0 BANK0     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    9137
                                             84 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    8643
                                             63 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5075
                                             28 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2775
                                             17 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1357
                                             10 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              1 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             19 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              1 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              1 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1404
                                              7 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     259
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     281
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                              7 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              5 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              5 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              3 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_TIMER1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _intern_TMR1                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_INTERRUPT
   _config_IO
   _config_TIMER1
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 _intern_TMR1 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      4D       5       60.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     66      71       1       89.7%
BITBIGSFRhlhh       22      0       0      20        0.0%
BITBIGSFRhhhl       1E      0       0      17        0.0%
BITBIGSFRlhh         E      0       0      24        0.0%
BITBIGSFRhhhh        D      0       0      16        0.0%
BITBIGSFRhhll        B      0       0      19        0.0%
BITBIGSFRhllh        4      0       0      22        0.0%
BITBIGSFRhhlhh       3      0       0      18        0.0%
BITBIGSFRhlhl        1      0       0      21        0.0%
BITBIGSFRlhl         1      0       0      25        0.0%
BITBIGSFRhlll        1      0       0      23        0.0%
BITBIGSFRll          1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BE      27        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 10 22:27:35 2023

                      l41 16A8                        l50 169A                        l44 16B2  
                      l47 16BA                        l92 166E                        l96 1098  
                      l88 1400                        l99 168C            ?_lcd_send_byte 0006  
     ___wmul@multiplicand 0004                       l111 1362                       l114 164E  
                     l241 0E6A                       l228 0D06                       l822 12A0  
                     l830 06CC                       l903 0FAC                       l824 12C2  
                     l832 06D4                       l833 071A                       l906 0FB4  
                     l819 125E                       l932 1162                       l940 1596  
                     l909 1602                       l917 1552                       l846 08E4  
                     l943 16BC                       l792 14BE                       l881 15D6  
                     l874 150C                       l868 0B7E                       l878 15CE  
                     u930 1666                       u931 1662                       _abs 1598  
                     _pad 121A                       wreg 000FE8                      l2001 0DB4  
                    l2011 0E2A                      l2003 0DE2                      ?_abs 0014  
                    l2013 0E4A                      l2005 0E02                      l2021 123C  
                    l2101 0876                      l2007 0E14                      l2031 1282  
                    l2023 124A                      l2111 08C4                      l2103 0890  
                    l2121 0E84                      l2009 0E1A                      l2033 12AE  
                    l2025 1256                      l2017 121A                      l2105 089E  
                    l2201 0B56                      l2051 154C                      l2043 150E  
                    l2131 0F18                      l2123 0EA0                      l2115 0E6C  
                    l2035 1598                      l2027 126A                      l2019 1228  
                    l2107 08AE                      l2211 14C0                      l2045 1512  
                    l2141 0F90                      l2125 0ED4                      l2117 0E80  
                    l2037 15B2                      l2029 127E                      l2109 08B4  
                    l2061 0676                      l2213 14CC                      l2221 146E  
                    l2039 15D8                      l2047 1526                      l2127 0EDC  
                    l2071 06DC                      l2063 0696                      l2055 0632  
                    l2151 0918                      l2215 14E8                      l2223 1480  
                    l2049 1548                      l2137 0F4E                      l2129 0EE4  
                    l2081 0716                      l2073 06EC                      l2065 06A4  
                    l2057 0652                      l2161 0948                      l2153 0924  
                    l2217 1504                      l2225 1488                      l2241 1454  
                    l2233 1402                      l2139 0F7E                      l2091 07BA  
                    l2083 0722                      l2075 06F2                      l2067 06A6  
                    l2059 0666                      l2171 09BE                      l2155 0928  
                    l2147 08E6                      l2227 1490                      l2235 1412  
                    l2093 07C0                      l2085 072C                      l2077 0702  
                    l2069 06C0                      l2173 09F4                      l2165 0954  
                    l2157 0934                      l2149 090A                      l2229 14AC  
                    l2237 1416                      l2087 0732                      l2095 0824  
                    l2079 070E                      l2191 0ABE                      l2183 0A3E  
                    l2175 0A02                      l2159 0936                      l2167 0988  
                    l2239 1428                      l1801 1388                      l2097 083E  
                    l2089 07B4                      l2193 0B14                      l2185 0A76  
                    l2177 0A10                      l2169 099A                      l1571 1666  
                    l1811 13A0                      l2099 085C                      l2187 0A86  
                    l2179 0A30                      l2283 097A                      l1821 13CE  
                    l1813 13A2                      l2285 0F02                      l2197 0B44  
                    l2189 0AA2                      l1823 13D4                      l1815 13B2  
                    l1807 138C                      l1831 12D6                      l1911 10AC  
                    l1577 166C                      l1569 1652                      l1681 102C  
                    l1673 0FB8                      l1825 13EA                      l1817 13B8  
                    l1809 1392                      l1761 1684                      l1841 132E  
                    l1833 12E0                      l1913 10BE                      l1691 1096  
                    l1683 1044                      l1675 1020                      l1827 13F2  
                    l1819 13C0                      l1763 1686                      l1843 1332  
                    l1835 12F2                      l1931 162A                      l1915 10C8  
                    l1923 1554                      l1781 16B8                      l1685 105E  
                    l1677 1022                      l1757 1672                      l1837 12F8  
                    l1829 12C6                      l1933 1646                      l1941 0B92  
                    l1917 10E6                      l1909 109A                      l1925 1560  
                    l1775 169C                      l1783 168E                      l1687 107A  
                    l1679 1024                      l1791 136C                      l1759 167C  
                    l1839 1306                      l1951 0BE8                      l1943 0BB2  
                    l1919 111C                      l1927 1572                      l1777 16AA  
                    l1689 1094                      l1793 1372                      l1785 1364  
                    l1961 0C3C                      l1953 0BF4                      l1945 0BB6  
                    l1937 0B80                      l1929 1576                      l1779 16B4  
                    l1795 1374                      l1787 1368                      l1971 0CB0  
                    l1963 0C4E                      l1955 0C12                      l1947 0BC4  
                    l1939 0B84                      l1797 1376                      l1789 136A  
                    l1965 0C7C                      l1957 0C1A                      l1973 0CB6  
                    l1949 0BE4                      l1981 0D08                      ?_pad 0012  
                    l1799 1378                      l1975 0CC6                      l1967 0C9C  
                    l1959 0C2E                      l1991 0D4C                      l1983 0D0C  
                    l1977 0CE6                      l1969 0C9E                      l1993 0D6C  
                    l1985 0D1A                      l1995 0D8A                      l1987 0D3A  
                    l1997 0D92                      l1989 0D3E                      l1999 0DA6  
                    STR_1 0611                      STR_2 0621                      STR_3 0601  
                    u1200 13B2                      u1201 13AE                      u1210 12D6  
                    u1211 12D2                      u1220 12F2                      u1300 1596  
                    u1221 12EE                      u1301 1592                      u1230 1326  
                    u1310 0B92                      u1311 0B8E                      u1240 1352  
                    u1320 0BC4                      u1400 0D8A                      u1321 0BC0  
                    u1401 0D86                      u1250 1362                      u1410 0DB4  
                    u1251 135E                      u1331 0BEE                      u1411 0DB0  
                    u1500 15FE                      u1340 0C12                      u1420 0DE2  
                    u1260 10AC                      u1237 131C                      u1341 0C0E  
                    u1421 0DDE                      u1261 10A8                      u1510 1526  
                    u1350 0C3C                      u1430 0E2A                      u1270 10BE  
                    u1247 1348                      u1511 1522                      u1351 0C38  
                    u1431 0E26                      u1271 10BA                      u1520 1548  
                    u1360 0C7C                      u1280 10E6                      u1440 1228  
                    u1600 083E                      u1185 167A                      u1521 1544  
                    u1361 0C78                      u1281 10E2                      u1441 1224  
                    u1601 083A                      u1186 167C                      u1370 0CC6  
                    u1290 111C                      u1450 124A                      u1610 085C  
                    u1530 0662                      u1371 0CC2                      u1291 1118  
                    u1451 1246                      u1611 0858                      u1531 065C  
                    u1380 0D1A                      u1460 12A0                      u1620 0876  
                    u1540 0664                      u1700 090A                      u1381 0D16  
                    u1461 129C                      u1621 0872                      u1701 0906  
                    u1390 0D4C                      u1470 12AE                      u1630 0890  
                    u1550 0676                      u1710 099A                      u1391 0D48  
                    u1471 12AA                      u1631 088C                      u1551 0672  
                    u1711 0996                      u1480 15B2                      u1640 089E  
                    u1560 06A4                      u1720 09BE                      u1481 15AE  
                    u1641 089A                      u1561 06A0                      u1721 09BA  
                    u1490 15FC                      u1650 08AE                      u1570 06C0  
                    u1730 0A02                      u1491 15F6                      u1651 08AA  
                    u1571 06BC                      u1731 09FE                      u1660 0EA0  
                    u1580 06EC                      u1740 0A76                      u1661 0E9C  
                    u1581 06E8                      u1741 0A72                      u1670 0ED0  
                    u1590 0702                      u1750 0AA2                      u1807 1398  
                    u1671 0ECC                      u1591 06FE                      u1751 0A9E  
                    u1680 0F7E                      u1760 0ABE                      u1817 13BA  
                    u1681 0F7A                      u1761 0ABA                      u1690 0F90  
                    u1770 1504                      u1827 13C8                      u1691 0F8C  
                    u1771 1500                      u1837 13DA                      u1847 13EC  
                    u1857 13FA                      u1867 1026                      u1787 167E  
                    u1797 137E                      i2l56 120C                      i2l59 1216  
                    abs@a 0014                      _dbuf 0080                      _atoi 0E6C  
                    _main 1402                      _dtoa 0632                      _prec 0069  
                    pad@i 0019                      pad@p 0016                      fsr1h 000FE2  
                    fsr2h 000FDA                      indf1 000FE7                      indf2 000FDF  
                    fsr1l 000FE1                      pad@w 001B                      fsr2l 000FD9  
                    btemp 0072                      prodh 000FF4                      prodl 000FF3  
                    start 000E              ___param_bank 000000                     ??_abs 0016  
                   ??_pad 0018           __end_of___aodiv 0D08                     ?_atoi 0008  
                   ?_main 0001                     ?_dtoa 001D           __end_of___aomod 0E6C  
         ??_config_TIMER1 0002                     _T1CON 000FCD              vfpfcnvrt@fmt 0042  
                   _TMR1H 000FCF                     _TMR1L 000FCE                     _PORTB 000F81  
                   _PORTD 000F83                     _TRISB 000F93                     _TRISD 000F95  
         __end_of_lcd_cmd 109A                     _flags 0071                     _fputc 109A  
                   _fputs 1554           __end_of_isdigit 1604                     atoi@n 000F  
                   pad@fp 0012                     atoi@s 0008                     _width 0067  
                   _putch 16BC                     dtoa@d 001F                     dtoa@i 003E  
                   dtoa@n 0035                     dtoa@p 0031                     dtoa@s 003D  
                   dtoa@w 0033           __end_of_isspace 1554           __end_of_set_bit 1670  
                   tablat 000FF5                     ttemp5 0073                     ttemp6 0076  
                   ttemp7 007A                     status 000FD8              ?_intern_TMR1 0001  
                   wtemp8 0073           __end_of_sprintf 14C0              lcd_write@end 000B  
            lcd_write@col 0008              lcd_write@lin 000C              lcd_write@str 0009  
         __initialization 1604              __end_of_atoi 0FB6              __end_of_main 146E  
            __end_of_dtoa 08E6           ??_lcd_send_byte 0007                    ??_atoi 000A  
                  ??_main 0067                    ??_dtoa 0027             __activetblptr 000002  
        _config_INTERRUPT 16B4                    _ADCON1 000FC1                    ?_fputc 0002  
                  ?_fputs 000B                    ?_putch 0001                    i2l1401 1214  
                  i2l1381 1174                    i2l1391 11C0                    i2l1383 1178  
                  i2l1393 11DC                    i2l1385 1198                    i2l1395 11E4  
                  i2l1387 11B4                    i2l1379 1166                    i2l1397 11E8  
                  i2l1389 11BC                    i2l1399 1204                    _INTCON 000FF2  
                  _OSCCON 000FD3             vfpfcnvrt@done 0051              vfprintf@cfmt 005B  
        __end_of_lcd_init 1402                 ??___aodiv 0012                 ??___aomod 0012  
                  ___wmul 162A                    clear_0 160A                    clear_1 1616  
                  isa$std 000001                    pad@buf 0014                 ??_lcd_cmd 0004  
                  dtoa@fp 001D                    fputc@c 0002                    fputs@c 000F  
                  fputs@i 0010                    fputs@s 000B                 ??_isdigit 0004  
            __mediumconst 0000                 ??_isspace 0004                 ??_set_bit 0003  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
                  putch@c 0001          __end_of_vfprintf 150E                 ??_sprintf 0067  
              __accesstop 0080   __end_of__initialization 161C             ___rparam_used 000001  
          __pcstackCOMRAM 0001             __end_of_fputc 1164             __end_of_fputs 1598  
           __end_of_putch 16BE                   ??_fputc 0006                   ??_fputs 000F  
                 ??_putch 0002                __pbssBANK0 0080                   ?___wmul 0002  
      lcd_send_byte@level 0007                   i2u61_40 1174                   i2u61_41 1170  
                 i2u62_40 1188                   i2u62_41 1182                   _OSCTUNE 000F9B  
                 i2u62_46 118A                   i2u63_40 11B4                   i2u63_41 11B0  
                 i2u64_40 11DC                   i2u64_41 11D8                   i2u65_40 1204  
                 i2u65_41 1200                 ?_lcd_init 0001  __end_of_config_INTERRUPT 16BC  
                 __Hparam 0000                   __Lparam 0000         __end_of_config_IO 16AA  
                 ___aodiv 0B80                   ___aomod 0D08         __end_of_lcd_write 1364  
               ?_vfprintf 0055               set_bit@comp 0002              __psmallconst 0600  
                 __pcinit 1604                   __ramtop 0600                   __ptext0 1402  
                 __ptext1 146E                   __ptext2 14C0                   __ptext3 08E6  
                 __ptext4 0632                   __ptext5 121A                   __ptext6 1554  
                 __ptext7 109A                   __ptext8 16BC                   __ptext9 1598  
                 _lcd_cmd 0FB6                   _isdigit 15D8     __end_of_config_TIMER1 169C  
                 _isspace 150E                   _set_bit 1650                   atoi@neg 000D  
                 _sprintf 146E                ??_lcd_init 0006            __pintcode_body 1164  
    end_of_initialization 161C                   fputc@fp 0004             __Lmediumconst 0000  
                 int_func 1164                   fputs@fp 000D         __end_of_vfpfcnvrt 0B80  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE          vfpfcnvrt@convarg 0049                ??_vfprintf 005B  
   __end_of_lcd_send_byte 168E                 _PORTBbits 000F81                 _PORTDbits 000F83  
               _PORTEbits 000F84                 _TRISEbits 000F96                lcd_cmd@cmd 0005  
           ??_config_FOSC 0002               vfpfcnvrt@ap 0044               vfpfcnvrt@cp 0053  
             vfpfcnvrt@fp 0040            __end_of___wmul 1650       start_initialization 1604  
             __end_of_abs 15D8               __end_of_pad 12C4               vfprintf@fmt 0057  
     __end_of_config_FOSC 16B4                  ??___wmul 0006               __pbssCOMRAM 0067  
           __pcstackBANK0 00C0          ___aodiv@dividend 0002             ??_intern_TMR1 0001  
       ?_config_INTERRUPT 0001        ??_config_INTERRUPT 0002                 __pintcode 0008  
                ?___aodiv 0002                  ?___aomod 0002          ___aodiv@quotient 0014  
               _bufferLCD 00A0                 _config_IO 169C         lcd_send_byte@data 0006  
                ?_lcd_cmd 0001                 _lcd_write 12C4               __smallconst 0600  
                ?_isdigit 0002                  ?_isspace 0002                  ?_set_bit 0002  
              set_bit@cmd 0003                  ?_sprintf 005D            ___wmul@product 0006  
             _config_FOSC 16AA                  _PIE1bits 000F9D                  _PIR1bits 000F9E  
     __end_of_intern_TMR1 121A                 _timer_hor 006B                 _timer_min 006D  
               _timer_seg 006F                 _vfpfcnvrt 08E6                ?_config_IO 0001  
              ?_lcd_write 0008         ___wmul@multiplier 0002                 lcd_init@i 0007  
            _isspace$1044 0006                  __Hrparam 0000                vfprintf@ap 0059  
                __Lrparam 0000                vfprintf@fp 0055                ?_vfpfcnvrt 0040  
         ___aodiv@divisor 000A           ___aodiv@counter 0012                sprintf@fmt 005F  
                _dtoa$995 002F                  __ptext10 0D08                  __ptext11 0B80  
                __ptext20 1650                  __ptext12 0E6C                  __ptext21 168E  
                __ptext13 150E                  __ptext22 169C                  __ptext14 15D8  
                __ptext23 16B4                  __ptext15 162A                  __ptext24 16AA  
                __ptext16 12C4                  __ptext17 1670                  __ptext18 1364  
                __ptext19 0FB6                  _lcd_init 1364               _intern_TMR1 0008  
                isa$xinst 000000                  int$flags 0072                  _vfprintf 14C0  
             ??_config_IO 0002               ??_lcd_write 000B          ___aomod@dividend 0002  
           _config_TIMER1 168E                  isdigit@c 0002                  intlevel2 0000  
               sprintf@ap 00C0                  isspace@c 0002           ___aomod@divisor 000A  
             ??_vfpfcnvrt 0046           ___aomod@counter 0012             _lcd_send_byte 1670  
                sprintf@f 00C2                  sprintf@s 005D            ?_config_TIMER1 0001  
            ___aodiv@sign 0013              ?_config_FOSC 0001              ___aomod@sign 0013  
