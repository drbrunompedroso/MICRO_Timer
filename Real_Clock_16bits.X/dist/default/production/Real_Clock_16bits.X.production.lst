

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 24 11:10:40 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Generated 23/03/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     _TMR0L	set	4054
    78   000000                     _TMR0H	set	4055
    79   000000                     _PORTDbits	set	3971
    80   000000                     _PORTBbits	set	3969
    81   000000                     _INTCONbits	set	4082
    82   000000                     _PORTB	set	3969
    83   000000                     _TRISB	set	3987
    84   000000                     _TRISD	set	3989
    85   000000                     _OSCTUNE	set	3995
    86   000000                     _ADCON1	set	4033
    87   000000                     _PORTD	set	3971
    88   000000                     _OSCCON	set	4051
    89   000000                     _T0CON	set	4053
    90   000000                     _INTCON	set	4082
    91   000000                     _TRISEbits	set	3990
    92   000000                     _PORTEbits	set	3972
    93                           
    94                           	psect	smallconst
    95   000600                     __psmallconst:
    96                           	callstack 0
    97   000600  00                 	db	0
    98   000601                     STR_1:
    99   000601  52                 	db	82	;'R'
   100   000602  45                 	db	69	;'E'
   101   000603  41                 	db	65	;'A'
   102   000604  4C                 	db	76	;'L'
   103   000605  43                 	db	67	;'C'
   104   000606  4C                 	db	76	;'L'
   105   000607  4F                 	db	79	;'O'
   106   000608  43                 	db	67	;'C'
   107   000609  4B                 	db	75	;'K'
   108   00060A  20                 	db	32
   109   00060B  31                 	db	49	;'1'
   110   00060C  36                 	db	54	;'6'
   111   00060D  62                 	db	98	;'b'
   112   00060E  69                 	db	105	;'i'
   113   00060F  74                 	db	116	;'t'
   114   000610  73                 	db	115	;'s'
   115   000611  00                 	db	0
   116   000612                     STR_3:
   117   000612  20                 	db	32
   118   000613  20                 	db	32
   119   000614  20                 	db	32
   120   000615  20                 	db	32
   121   000616  20                 	db	32
   122   000617  20                 	db	32
   123   000618  20                 	db	32
   124   000619  20                 	db	32
   125   00061A  20                 	db	32
   126   00061B  20                 	db	32
   127   00061C  20                 	db	32
   128   00061D  20                 	db	32
   129   00061E  20                 	db	32
   130   00061F  20                 	db	32
   131   000620  20                 	db	32
   132   000621  00                 	db	0
   133   000622                     STR_2:
   134   000622  25                 	db	37
   135   000623  30                 	db	48	;'0'
   136   000624  32                 	db	50	;'2'
   137   000625  64                 	db	100	;'d'
   138   000626  3A                 	db	58	;':'
   139   000627  25                 	db	37
   140   000628  30                 	db	48	;'0'
   141   000629  32                 	db	50	;'2'
   142   00062A  64                 	db	100	;'d'
   143   00062B  3A                 	db	58	;':'
   144   00062C  25                 	db	37
   145   00062D  30                 	db	48	;'0'
   146   00062E  32                 	db	50	;'2'
   147   00062F  64                 	db	100	;'d'
   148   000630  00                 	db	0
   149   000631  00                 	db	0	; dummy byte at the end
   150   000000                     
   151                           ; #config settings
   152                           
   153                           	psect	cinit
   154   00154A                     __pcinit:
   155                           	callstack 0
   156   00154A                     start_initialization:
   157                           	callstack 0
   158   00154A                     __initialization:
   159                           	callstack 0
   160                           
   161                           ; Clear objects allocated to BANK0 (52 bytes)
   162   00154A  EE00  F080         	lfsr	0,__pbssBANK0
   163   00154E  0E34               	movlw	52
   164   001550                     clear_0:
   165   001550  6AEE               	clrf	postinc0,c
   166   001552  06E8               	decf	wreg,f,c
   167   001554  E1FD               	bnz	clear_0
   168                           
   169                           ; Clear objects allocated to COMRAM (7 bytes)
   170   001556  EE00  F06A         	lfsr	0,__pbssCOMRAM
   171   00155A  0E07               	movlw	7
   172   00155C                     clear_1:
   173   00155C  6AEE               	clrf	postinc0,c
   174   00155E  06E8               	decf	wreg,f,c
   175   001560  E1FD               	bnz	clear_1
   176   001562                     end_of_initialization:
   177                           	callstack 0
   178   001562                     __end_of__initialization:
   179                           	callstack 0
   180   001562  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   181   001564  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   182   001566  0E00               	movlw	low (__Lmediumconst shr (0+16))
   183   001568  6EF8               	movwf	tblptru,c
   184   00156A  0100               	movlb	0
   185   00156C  EFA4  F009         	goto	_main	;jump to C main() function
   186                           
   187                           	psect	bssCOMRAM
   188   00006A                     __pbssCOMRAM:
   189                           	callstack 0
   190   00006A                     _width:
   191                           	callstack 0
   192   00006A                     	ds	2
   193   00006C                     _prec:
   194                           	callstack 0
   195   00006C                     	ds	2
   196   00006E                     _timer_seg:
   197                           	callstack 0
   198   00006E                     	ds	2
   199   000070                     _flags:
   200                           	callstack 0
   201   000070                     	ds	1
   202                           
   203                           	psect	bssBANK0
   204   000080                     __pbssBANK0:
   205                           	callstack 0
   206   000080                     _timer_hor:
   207                           	callstack 0
   208   000080                     	ds	2
   209   000082                     _timer_min:
   210                           	callstack 0
   211   000082                     	ds	2
   212   000084                     _dbuf:
   213                           	callstack 0
   214   000084                     	ds	32
   215   0000A4                     _bufferLCD:
   216                           	callstack 0
   217   0000A4                     	ds	16
   218                           
   219                           	psect	cstackBANK0
   220   0000B4                     __pcstackBANK0:
   221                           	callstack 0
   222   0000B4                     sprintf@ap:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x0
   226   0000B4                     	ds	2
   227   0000B6                     sprintf@f:
   228                           	callstack 0
   229                           
   230                           ; 11 bytes @ 0x2
   231   0000B6                     	ds	11
   232                           
   233                           	psect	cstackCOMRAM
   234   000001                     __pcstackCOMRAM:
   235                           	callstack 0
   236   000001                     ??_intern_TMR0:
   237   000001                     
   238                           ; 1 bytes @ 0x0
   239   000001                     	ds	4
   240   000005                     ?_isdigit:
   241                           	callstack 0
   242   000005                     ?_isspace:
   243                           	callstack 0
   244   000005                     ?___wmul:
   245                           	callstack 0
   246   000005                     ?___aodiv:
   247                           	callstack 0
   248   000005                     ?___aomod:
   249                           	callstack 0
   250   000005                     set_bit@comp:
   251                           	callstack 0
   252   000005                     ___wmul@multiplier:
   253                           	callstack 0
   254   000005                     isdigit@c:
   255                           	callstack 0
   256   000005                     isspace@c:
   257                           	callstack 0
   258   000005                     fputc@c:
   259                           	callstack 0
   260   000005                     ___aodiv@dividend:
   261                           	callstack 0
   262   000005                     ___aomod@dividend:
   263                           	callstack 0
   264                           
   265                           ; 8 bytes @ 0x4
   266   000005                     	ds	1
   267   000006                     set_bit@cmd:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0x5
   271   000006                     	ds	1
   272   000007                     ??_lcd_cmd:
   273   000007                     ??_isdigit:
   274   000007                     ??_isspace:
   275   000007                     ___wmul@multiplicand:
   276                           	callstack 0
   277   000007                     fputc@fp:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x6
   281   000007                     	ds	1
   282   000008                     lcd_cmd@cmd:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x7
   286   000008                     	ds	1
   287   000009                     ??_lcd_init:
   288   000009                     ??_fputc:
   289   000009                     lcd_send_byte@data:
   290                           	callstack 0
   291   000009                     _isspace$1025:
   292                           	callstack 0
   293   000009                     ___wmul@product:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x8
   297   000009                     	ds	1
   298   00000A                     lcd_init@i:
   299                           	callstack 0
   300   00000A                     lcd_send_byte@level:
   301                           	callstack 0
   302                           
   303                           ; 1 bytes @ 0x9
   304   00000A                     	ds	1
   305   00000B                     ?_atoi:
   306                           	callstack 0
   307   00000B                     lcd_write@col:
   308                           	callstack 0
   309   00000B                     atoi@s:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xA
   313   00000B                     	ds	1
   314   00000C                     lcd_write@str:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xB
   318   00000C                     	ds	1
   319   00000D                     ??_atoi:
   320   00000D                     ___aodiv@divisor:
   321                           	callstack 0
   322   00000D                     ___aomod@divisor:
   323                           	callstack 0
   324                           
   325                           ; 8 bytes @ 0xC
   326   00000D                     	ds	1
   327   00000E                     lcd_write@end:
   328                           	callstack 0
   329   00000E                     fputs@s:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xD
   333   00000E                     	ds	1
   334   00000F                     lcd_write@lin:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0xE
   338   00000F                     	ds	1
   339   000010                     atoi@neg:
   340                           	callstack 0
   341   000010                     fputs@fp:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xF
   345   000010                     	ds	2
   346   000012                     fputs@c:
   347                           	callstack 0
   348   000012                     atoi@n:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x11
   352   000012                     	ds	1
   353   000013                     fputs@i:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x12
   357   000013                     	ds	2
   358   000015                     ___aodiv@counter:
   359                           	callstack 0
   360   000015                     ___aomod@counter:
   361                           	callstack 0
   362   000015                     pad@fp:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x14
   366   000015                     	ds	1
   367   000016                     ___aodiv@sign:
   368                           	callstack 0
   369   000016                     ___aomod@sign:
   370                           	callstack 0
   371                           
   372                           ; 1 bytes @ 0x15
   373   000016                     	ds	1
   374   000017                     ?_abs:
   375                           	callstack 0
   376   000017                     pad@buf:
   377                           	callstack 0
   378   000017                     abs@a:
   379                           	callstack 0
   380   000017                     ___aodiv@quotient:
   381                           	callstack 0
   382                           
   383                           ; 8 bytes @ 0x16
   384   000017                     	ds	2
   385   000019                     ??_abs:
   386   000019                     pad@p:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x18
   390   000019                     	ds	2
   391   00001B                     ??_pad:
   392                           
   393                           ; 1 bytes @ 0x1A
   394   00001B                     	ds	1
   395   00001C                     pad@i:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x1B
   399   00001C                     	ds	2
   400   00001E                     pad@w:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x1D
   404   00001E                     	ds	2
   405   000020                     dtoa@fp:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x1F
   409   000020                     	ds	2
   410   000022                     dtoa@d:
   411                           	callstack 0
   412                           
   413                           ; 8 bytes @ 0x21
   414   000022                     	ds	8
   415   00002A                     ??_dtoa:
   416                           
   417                           ; 1 bytes @ 0x29
   418   00002A                     	ds	8
   419   000032                     _dtoa$976:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x31
   423   000032                     	ds	2
   424   000034                     dtoa@p:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x33
   428   000034                     	ds	2
   429   000036                     dtoa@w:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x35
   433   000036                     	ds	2
   434   000038                     dtoa@n:
   435                           	callstack 0
   436                           
   437                           ; 8 bytes @ 0x37
   438   000038                     	ds	8
   439   000040                     dtoa@s:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x3F
   443   000040                     	ds	1
   444   000041                     dtoa@i:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x40
   448   000041                     	ds	2
   449   000043                     vfpfcnvrt@fp:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x42
   453   000043                     	ds	2
   454   000045                     vfpfcnvrt@fmt:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x44
   458   000045                     	ds	2
   459   000047                     vfpfcnvrt@ap:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x46
   463   000047                     	ds	2
   464   000049                     ??_vfpfcnvrt:
   465                           
   466                           ; 1 bytes @ 0x48
   467   000049                     	ds	3
   468   00004C                     vfpfcnvrt@convarg:
   469                           	callstack 0
   470                           
   471                           ; 8 bytes @ 0x4B
   472   00004C                     	ds	8
   473   000054                     vfpfcnvrt@done:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x53
   477   000054                     	ds	2
   478   000056                     vfpfcnvrt@cp:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x55
   482   000056                     	ds	2
   483   000058                     ?_vfprintf:
   484                           	callstack 0
   485   000058                     vfprintf@fp:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x57
   489   000058                     	ds	2
   490   00005A                     vfprintf@fmt:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x59
   494   00005A                     	ds	2
   495   00005C                     vfprintf@ap:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x5B
   499   00005C                     	ds	2
   500   00005E                     vfprintf@cfmt:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x5D
   504   00005E                     	ds	2
   505   000060                     ?_sprintf:
   506                           	callstack 0
   507   000060                     sprintf@s:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x5F
   511   000060                     	ds	2
   512   000062                     sprintf@fmt:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x61
   516   000062                     	ds	8
   517   00006A                     
   518                           ; 1 bytes @ 0x69
   519 ;;
   520 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   521 ;;
   522 ;; *************** function _main *****************
   523 ;; Defined at:
   524 ;;		line 151 in file "Program_main.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   538 ;;      Params:         0       0       0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0       0       0
   541 ;;      Totals:         0       0       0       0       0       0       0
   542 ;;Total ram usage:        0 bytes
   543 ;; Hardware stack levels required when called: 9
   544 ;; This function calls:
   545 ;;		_config_FOSC
   546 ;;		_config_INTERRUPT
   547 ;;		_config_IO
   548 ;;		_config_TIMER0
   549 ;;		_lcd_init
   550 ;;		_lcd_write
   551 ;;		_sprintf
   552 ;; This function is called by:
   553 ;;		Startup code after reset
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text0
   558   001348                     __ptext0:
   559                           	callstack 0
   560   001348                     _main:
   561                           	callstack 22
   562   001348                     
   563                           ;Program_main.c: 153:     config_FOSC();
   564   001348  ECF8  F00A         	call	_config_FOSC	;wreg free
   565                           
   566                           ;Program_main.c: 154:     config_IO();
   567   00134C  ECF1  F00A         	call	_config_IO	;wreg free
   568                           
   569                           ;Program_main.c: 155:     config_INTERRUPT();
   570   001350  ECFD  F00A         	call	_config_INTERRUPT	;wreg free
   571                           
   572                           ;Program_main.c: 156:     config_TIMER0();
   573   001354  ECEA  F00A         	call	_config_TIMER0	;wreg free
   574   001358                     
   575                           ;Program_main.c: 157:     lcd_init();
   576   001358  EC57  F009         	call	_lcd_init	;wreg free
   577   00135C                     
   578                           ;Program_main.c: 159:      lcd_write(1,1, "REALCLOCK 16bits");
   579   00135C  0E01               	movlw	1
   580   00135E  6E0B               	movwf	lcd_write@col^0,c
   581   001360  0E01               	movlw	low STR_1
   582   001362  6E0C               	movwf	lcd_write@str^0,c
   583   001364  0E06               	movlw	high STR_1
   584   001366  6E0D               	movwf	(lcd_write@str+1)^0,c
   585   001368  0E01               	movlw	1
   586   00136A  EC07  F009         	call	_lcd_write
   587   00136E                     l2249:
   588                           
   589                           ;Program_main.c: 162:     {;Program_main.c: 163:         sprintf(bufferLCD, "%02d:%02d:%
      +                          02d", timer_hor, timer_min, timer_seg);
   590   00136E  0EA4               	movlw	low _bufferLCD
   591   001370  6E60               	movwf	sprintf@s^0,c
   592   001372  0E00               	movlw	high _bufferLCD
   593   001374  6E61               	movwf	(sprintf@s+1)^0,c
   594   001376  0E22               	movlw	low STR_2
   595   001378  6E62               	movwf	sprintf@fmt^0,c
   596   00137A  0E06               	movlw	high STR_2
   597   00137C  6E63               	movwf	(sprintf@fmt+1)^0,c
   598   00137E  C080  F064         	movff	_timer_hor,?_sprintf+4
   599   001382  C081  F065         	movff	_timer_hor+1,?_sprintf+5
   600   001386  C082  F066         	movff	_timer_min,?_sprintf+6
   601   00138A  C083  F067         	movff	_timer_min+1,?_sprintf+7
   602   00138E  C06E  F068         	movff	_timer_seg,?_sprintf+8
   603   001392  C06F  F069         	movff	_timer_seg+1,?_sprintf+9
   604   001396  ECDA  F009         	call	_sprintf	;wreg free
   605   00139A                     
   606                           ;Program_main.c: 164:         lcd_write(2, 5, bufferLCD);
   607   00139A  0E05               	movlw	5
   608   00139C  6E0B               	movwf	lcd_write@col^0,c
   609   00139E  0EA4               	movlw	low _bufferLCD
   610   0013A0  6E0C               	movwf	lcd_write@str^0,c
   611   0013A2  0E00               	movlw	high _bufferLCD
   612   0013A4  6E0D               	movwf	(lcd_write@str+1)^0,c
   613   0013A6  0E02               	movlw	2
   614   0013A8  EC07  F009         	call	_lcd_write
   615   0013AC  EFB7  F009         	goto	l2249
   616   0013B0  EF74  F000         	goto	start
   617   0013B4                     __end_of_main:
   618                           	callstack 0
   619                           
   620 ;; *************** function _sprintf *****************
   621 ;; Defined at:
   622 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  s               2   95[COMRAM] PTR unsigned char 
   625 ;;		 -> bufferLCD(16), 
   626 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
   627 ;;		 -> STR_2(15), 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  f              11    2[BANK0 ] struct _IO_FILE
   630 ;;  ap              2    0[BANK0 ] PTR void [1]
   631 ;;		 -> ?_sprintf(2), 
   632 ;;  ret             2    0        int 
   633 ;; Return value:  Size  Location     Type
   634 ;;                  2   95[COMRAM] int 
   635 ;; Registers used:
   636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   642 ;;      Params:        10       0       0       0       0       0       0
   643 ;;      Locals:         0      13       0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0
   645 ;;      Totals:        10      13       0       0       0       0       0
   646 ;;Total ram usage:       23 bytes
   647 ;; Hardware stack levels used: 1
   648 ;; Hardware stack levels required when called: 8
   649 ;; This function calls:
   650 ;;		_vfprintf
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text1
   657   0013B4                     __ptext1:
   658                           	callstack 0
   659   0013B4                     _sprintf:
   660                           	callstack 22
   661   0013B4  0E64               	movlw	low (?_sprintf+4)
   662   0013B6  0100               	movlb	0	; () banked
   663   0013B8  6FB4               	movwf	sprintf@ap& (0+255),b
   664   0013BA  0E00               	movlw	high (?_sprintf+4)
   665   0013BC  6FB5               	movwf	(sprintf@ap+1)& (0+255),b
   666   0013BE  C060  F0B6         	movff	sprintf@s,sprintf@f
   667   0013C2  C061  F0B7         	movff	sprintf@s+1,sprintf@f+1
   668   0013C6                     
   669                           ; BSR set to: 0
   670   0013C6  0E00               	movlw	0
   671   0013C8  6FBA               	movwf	(sprintf@f+4)& (0+255),b
   672   0013CA  0E00               	movlw	0
   673   0013CC  6FB9               	movwf	(sprintf@f+3)& (0+255),b
   674   0013CE                     
   675                           ; BSR set to: 0
   676   0013CE  0E00               	movlw	0
   677   0013D0  6FC0               	movwf	(sprintf@f+10)& (0+255),b
   678   0013D2  0E00               	movlw	0
   679   0013D4  6FBF               	movwf	(sprintf@f+9)& (0+255),b
   680   0013D6                     
   681                           ; BSR set to: 0
   682   0013D6  0EB6               	movlw	low sprintf@f
   683   0013D8  6E58               	movwf	vfprintf@fp^0,c
   684   0013DA  0E00               	movlw	high sprintf@f
   685   0013DC  6E59               	movwf	(vfprintf@fp+1)^0,c
   686   0013DE  C062  F05A         	movff	sprintf@fmt,vfprintf@fmt
   687   0013E2  C063  F05B         	movff	sprintf@fmt+1,vfprintf@fmt+1
   688   0013E6  0EB4               	movlw	low sprintf@ap
   689   0013E8  6E5C               	movwf	vfprintf@ap^0,c
   690   0013EA  0E00               	movlw	high sprintf@ap
   691   0013EC  6E5D               	movwf	(vfprintf@ap+1)^0,c
   692   0013EE  EC03  F00A         	call	_vfprintf	;wreg free
   693   0013F2  0100               	movlb	0	; () banked
   694   0013F4  51B9               	movf	(sprintf@f+3)& (0+255),w,b
   695   0013F6  2460               	addwf	sprintf@s^0,w,c
   696   0013F8  6ED9               	movwf	fsr2l,c
   697   0013FA  51BA               	movf	(sprintf@f+4)& (0+255),w,b
   698   0013FC  2061               	addwfc	(sprintf@s+1)^0,w,c
   699   0013FE  6EDA               	movwf	fsr2h,c
   700   001400  0E00               	movlw	0
   701   001402  6EDF               	movwf	indf2,c
   702   001404                     
   703                           ; BSR set to: 0
   704   001404  0012               	return		;funcret
   705   001406                     __end_of_sprintf:
   706                           	callstack 0
   707                           
   708 ;; *************** function _vfprintf *****************
   709 ;; Defined at:
   710 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  fp              2   87[COMRAM] PTR struct _IO_FILE
   713 ;;		 -> sprintf@f(11), 
   714 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   715 ;;		 -> STR_2(15), 
   716 ;;  ap              2   91[COMRAM] PTR PTR void 
   717 ;;		 -> sprintf@ap(2), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  cfmt            2   93[COMRAM] PTR unsigned char 
   720 ;;		 -> STR_2(15), 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  2   87[COMRAM] int 
   723 ;; Registers used:
   724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   730 ;;      Params:         6       0       0       0       0       0       0
   731 ;;      Locals:         2       0       0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0       0       0
   733 ;;      Totals:         8       0       0       0       0       0       0
   734 ;;Total ram usage:        8 bytes
   735 ;; Hardware stack levels used: 1
   736 ;; Hardware stack levels required when called: 7
   737 ;; This function calls:
   738 ;;		_vfpfcnvrt
   739 ;; This function is called by:
   740 ;;		_sprintf
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text2
   745   001406                     __ptext2:
   746                           	callstack 0
   747   001406                     _vfprintf:
   748                           	callstack 22
   749   001406                     
   750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   751   001406  C05A  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
   752   00140A  C05B  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   753                           
   754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   755   00140E  EF17  F00A         	goto	l2225
   756   001412                     l2223:
   757                           
   758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   759   001412  C058  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   760   001416  C059  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   761   00141A  0E5E               	movlw	low vfprintf@cfmt
   762   00141C  6E45               	movwf	vfpfcnvrt@fmt^0,c
   763   00141E  0E00               	movlw	high vfprintf@cfmt
   764   001420  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
   765   001422  C05C  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   766   001426  C05D  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   767   00142A  EC73  F004         	call	_vfpfcnvrt	;wreg free
   768   00142E                     l2225:
   769                           
   770                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   771   00142E  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
   772   001432  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   773   001436                     	if	0	;tblptru may be non-zero
   774   001436                     	endif
   775   001436                     	if	0	;tblptru may be non-zero
   776   001436                     	endif
   777   001436  0008               	tblrd		*
   778   001438  50F5               	movf	tablat,w,c
   779   00143A  0900               	iorlw	0
   780   00143C  A4D8               	btfss	status,2,c
   781   00143E  EF23  F00A         	goto	u1821
   782   001442  EF25  F00A         	goto	u1820
   783   001446                     u1821:
   784   001446  EF09  F00A         	goto	l2223
   785   00144A                     u1820:
   786   00144A                     
   787                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   788   00144A  0E00               	movlw	0
   789   00144C  6E59               	movwf	(?_vfprintf+1)^0,c
   790   00144E  0E00               	movlw	0
   791   001450  6E58               	movwf	?_vfprintf^0,c
   792   001452  0012               	return		;funcret
   793   001454                     __end_of_vfprintf:
   794                           	callstack 0
   795                           
   796 ;; *************** function _vfpfcnvrt *****************
   797 ;; Defined at:
   798 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   801 ;;		 -> sprintf@f(11), 
   802 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   803 ;;		 -> vfprintf@cfmt(2), 
   804 ;;  ap              2   70[COMRAM] PTR PTR void 
   805 ;;		 -> sprintf@ap(2), 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  convarg         8   75[COMRAM] struct .
   808 ;;  cp              2   85[COMRAM] PTR unsigned char 
   809 ;;		 -> STR_2(15), 
   810 ;;  done            2   83[COMRAM] int 
   811 ;;  i               2    0        int 
   812 ;;  c               1    0        unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   822 ;;      Params:         6       0       0       0       0       0       0
   823 ;;      Locals:        12       0       0       0       0       0       0
   824 ;;      Temps:          3       0       0       0       0       0       0
   825 ;;      Totals:        21       0       0       0       0       0       0
   826 ;;Total ram usage:       21 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 6
   829 ;; This function calls:
   830 ;;		_atoi
   831 ;;		_dtoa
   832 ;;		_fputc
   833 ;;		_isdigit
   834 ;; This function is called by:
   835 ;;		_vfprintf
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text3
   840   0008E6                     __ptext3:
   841                           	callstack 0
   842   0008E6                     _vfpfcnvrt:
   843                           	callstack 22
   844   0008E6                     
   845                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   846   0008E6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   847   0008EA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   848   0008EE  CFDE FFF6          	movff	postinc2,tblptrl
   849   0008F2  CFDD FFF7          	movff	postdec2,tblptrh
   850   0008F6                     	if	0	;tblptru may be non-zero
   851   0008F6                     	endif
   852   0008F6                     	if	0	;tblptru may be non-zero
   853   0008F6                     	endif
   854   0008F6  0008               	tblrd		*
   855   0008F8  50F5               	movf	tablat,w,c
   856   0008FA  0A25               	xorlw	37
   857   0008FC  A4D8               	btfss	status,2,c
   858   0008FE  EF83  F004         	goto	u1751
   859   000902  EF85  F004         	goto	u1750
   860   000906                     u1751:
   861   000906  EFAB  F005         	goto	l2211
   862   00090A                     u1750:
   863   00090A                     
   864                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   865   00090A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   866   00090E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   867   000912  2ADE               	incf	postinc2,f,c
   868   000914  0E00               	movlw	0
   869   000916  22DD               	addwfc	postdec2,f,c
   870   000918                     
   871                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   872   000918  0E00               	movlw	0
   873   00091A  6E6B               	movwf	(_width+1)^0,c
   874   00091C  0E00               	movlw	0
   875   00091E  6E6A               	movwf	_width^0,c
   876   000920  C06A  F070         	movff	_width,_flags
   877   000924                     
   878                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   879   000924  686C               	setf	_prec^0,c
   880   000926  686D               	setf	(_prec+1)^0,c
   881   000928                     
   882                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   883   000928  0E00               	movlw	0
   884   00092A  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   885   00092C  0E00               	movlw	0
   886   00092E  6E54               	movwf	vfpfcnvrt@done^0,c
   887                           
   888                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   889   000930  EFC4  F004         	goto	l2177
   890   000934                     l2167:
   891                           
   892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   893   000934  8270               	bsf	_flags^0,1,c
   894   000936                     
   895                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   896   000936  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   897   00093A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   898   00093E  2ADE               	incf	postinc2,f,c
   899   000940  0E00               	movlw	0
   900   000942  22DD               	addwfc	postdec2,f,c
   901                           
   902                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   903   000944  EFC4  F004         	goto	l2177
   904   000948                     l2171:
   905                           
   906                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   907   000948  0E00               	movlw	0
   908   00094A  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   909   00094C  0E01               	movlw	1
   910   00094E  6E54               	movwf	vfpfcnvrt@done^0,c
   911                           
   912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   913   000950  EFC4  F004         	goto	l2177
   914   000954                     l2175:
   915   000954  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   916   000958  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   917   00095C  CFDE FFF6          	movff	postinc2,tblptrl
   918   000960  CFDD FFF7          	movff	postdec2,tblptrh
   919   000964                     	if	0	;tblptru may be non-zero
   920   000964                     	endif
   921   000964                     	if	0	;tblptru may be non-zero
   922   000964                     	endif
   923   000964  0008               	tblrd		*
   924   000966  50F5               	movf	tablat,w,c
   925   000968  6E49               	movwf	??_vfpfcnvrt^0,c
   926   00096A  6A4A               	clrf	(??_vfpfcnvrt+1)^0,c
   927                           
   928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   929                           ; Switch size 1, requested type "simple"
   930                           ; Number of cases is 1, Range of values is 0 to 0
   931                           ; switch strategies available:
   932                           ; Name         Instructions Cycles
   933                           ; simple_byte            4     3 (average)
   934                           ;	Chosen strategy is simple_byte
   935   00096C  504A               	movf	(??_vfpfcnvrt+1)^0,w,c
   936   00096E  0A00               	xorlw	0	; case 0
   937   000970  B4D8               	btfsc	status,2,c
   938   000972  EFBD  F004         	goto	l2293
   939   000976  EFA4  F004         	goto	l2171
   940   00097A                     l2293:
   941                           
   942                           ; Switch size 1, requested type "simple"
   943                           ; Number of cases is 1, Range of values is 48 to 48
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte            4     3 (average)
   947                           ;	Chosen strategy is simple_byte
   948   00097A  5049               	movf	??_vfpfcnvrt^0,w,c
   949   00097C  0A30               	xorlw	48	; case 48
   950   00097E  B4D8               	btfsc	status,2,c
   951   000980  EF9A  F004         	goto	l2167
   952   000984  EFA4  F004         	goto	l2171
   953   000988                     l2177:
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   956   000988  5054               	movf	vfpfcnvrt@done^0,w,c
   957   00098A  1055               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   958   00098C  B4D8               	btfsc	status,2,c
   959   00098E  EFCB  F004         	goto	u1761
   960   000992  EFCD  F004         	goto	u1760
   961   000996                     u1761:
   962   000996  EFAA  F004         	goto	l2175
   963   00099A                     u1760:
   964   00099A                     
   965                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
   966   00099A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   967   00099E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   968   0009A2  CFDE FFF6          	movff	postinc2,tblptrl
   969   0009A6  CFDD FFF7          	movff	postdec2,tblptrh
   970   0009AA                     	if	0	;tblptru may be non-zero
   971   0009AA                     	endif
   972   0009AA                     	if	0	;tblptru may be non-zero
   973   0009AA                     	endif
   974   0009AA  0008               	tblrd		*
   975   0009AC  50F5               	movf	tablat,w,c
   976   0009AE  0A2A               	xorlw	42
   977   0009B0  A4D8               	btfss	status,2,c
   978   0009B2  EFDD  F004         	goto	u1771
   979   0009B6  EFDF  F004         	goto	u1770
   980   0009BA                     u1771:
   981   0009BA  EF08  F005         	goto	l2187
   982   0009BE                     u1770:
   983   0009BE                     
   984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
   985   0009BE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   986   0009C2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   987   0009C6  2ADE               	incf	postinc2,f,c
   988   0009C8  0E00               	movlw	0
   989   0009CA  22DD               	addwfc	postdec2,f,c
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
   992   0009CC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   993   0009D0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   994   0009D4  CFDF F049          	movff	indf2,??_vfpfcnvrt
   995   0009D8  0E02               	movlw	2
   996   0009DA  26DE               	addwf	postinc2,f,c
   997   0009DC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
   998   0009E0  0E00               	movlw	0
   999   0009E2  22DD               	addwfc	postdec2,f,c
  1000   0009E4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1001   0009E8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1002   0009EC  CFDE F06A          	movff	postinc2,_width
  1003   0009F0  CFDD F06B          	movff	postdec2,_width+1
  1004   0009F4                     
  1005                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1006   0009F4  BE6B               	btfsc	(_width+1)^0,7,c
  1007   0009F6  EF01  F005         	goto	u1780
  1008   0009FA  EFFF  F004         	goto	u1781
  1009   0009FE                     u1781:
  1010   0009FE  EF3B  F005         	goto	l2195
  1011   000A02                     u1780:
  1012   000A02                     
  1013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1014   000A02  8070               	bsf	_flags^0,0,c
  1015                           
  1016                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1017   000A04  6C6A               	negf	_width^0,c
  1018   000A06  1E6B               	comf	(_width+1)^0,f,c
  1019   000A08  B0D8               	btfsc	status,0,c
  1020   000A0A  2A6B               	incf	(_width+1)^0,f,c
  1021   000A0C  EF3B  F005         	goto	l2195
  1022   000A10                     l2187:
  1023                           
  1024                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1025   000A10  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1026   000A14  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1027   000A18  CFDE F00B          	movff	postinc2,atoi@s
  1028   000A1C  CFDD F00C          	movff	postdec2,atoi@s+1
  1029   000A20  EC36  F007         	call	_atoi	;wreg free
  1030   000A24  C00B  F06A         	movff	?_atoi,_width
  1031   000A28  C00C  F06B         	movff	?_atoi+1,_width+1
  1032                           
  1033                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1034   000A2C  EF1F  F005         	goto	l2193
  1035   000A30                     l2189:
  1036                           
  1037                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1038   000A30  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1039   000A34  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1040   000A38  2ADE               	incf	postinc2,f,c
  1041   000A3A  0E00               	movlw	0
  1042   000A3C  22DD               	addwfc	postdec2,f,c
  1043   000A3E                     l2193:
  1044   000A3E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045   000A42  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046   000A46  CFDE FFF6          	movff	postinc2,tblptrl
  1047   000A4A  CFDD FFF7          	movff	postdec2,tblptrh
  1048   000A4E                     	if	0	;tblptru may be non-zero
  1049   000A4E                     	endif
  1050   000A4E                     	if	0	;tblptru may be non-zero
  1051   000A4E                     	endif
  1052   000A4E  0008               	tblrd		*
  1053   000A50  CFF5 F049          	movff	tablat,??_vfpfcnvrt
  1054   000A54  0ED0               	movlw	208
  1055   000A56  2449               	addwf	??_vfpfcnvrt^0,w,c
  1056   000A58  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  1057   000A5A  6A4B               	clrf	(??_vfpfcnvrt+2)^0,c
  1058   000A5C  0EFF               	movlw	255
  1059   000A5E  224B               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1060   000A60  504B               	movf	(??_vfpfcnvrt+2)^0,w,c
  1061   000A62  E109               	bnz	u1790
  1062   000A64  0E0A               	movlw	10
  1063   000A66  5C4A               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1064   000A68  A0D8               	btfss	status,0,c
  1065   000A6A  EF39  F005         	goto	u1791
  1066   000A6E  EF3B  F005         	goto	u1790
  1067   000A72                     u1791:
  1068   000A72  EF18  F005         	goto	l2189
  1069   000A76                     u1790:
  1070   000A76                     l2195:
  1071                           
  1072                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1073   000A76  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1074   000A7A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1075   000A7E  CFDE F056          	movff	postinc2,vfpfcnvrt@cp
  1076   000A82  CFDD F057          	movff	postdec2,vfpfcnvrt@cp+1
  1077   000A86                     
  1078                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1079   000A86  C056  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1080   000A8A  C057  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1081   000A8E                     	if	0	;tblptru may be non-zero
  1082   000A8E                     	endif
  1083   000A8E                     	if	0	;tblptru may be non-zero
  1084   000A8E                     	endif
  1085   000A8E  0008               	tblrd		*
  1086   000A90  50F5               	movf	tablat,w,c
  1087   000A92  0A64               	xorlw	100
  1088   000A94  B4D8               	btfsc	status,2,c
  1089   000A96  EF4F  F005         	goto	u1801
  1090   000A9A  EF51  F005         	goto	u1800
  1091   000A9E                     u1801:
  1092   000A9E  EF5F  F005         	goto	l2201
  1093   000AA2                     u1800:
  1094   000AA2  C056  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1095   000AA6  C057  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1096   000AAA                     	if	0	;tblptru may be non-zero
  1097   000AAA                     	endif
  1098   000AAA                     	if	0	;tblptru may be non-zero
  1099   000AAA                     	endif
  1100   000AAA  0008               	tblrd		*
  1101   000AAC  50F5               	movf	tablat,w,c
  1102   000AAE  0A69               	xorlw	105
  1103   000AB0  A4D8               	btfss	status,2,c
  1104   000AB2  EF5D  F005         	goto	u1811
  1105   000AB6  EF5F  F005         	goto	u1810
  1106   000ABA                     u1811:
  1107   000ABA  EFA2  F005         	goto	l2207
  1108   000ABE                     u1810:
  1109   000ABE                     l2201:
  1110                           
  1111                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1112   000ABE  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1113   000AC2  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1114   000AC6  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1115   000ACA  0E02               	movlw	2
  1116   000ACC  26DE               	addwf	postinc2,f,c
  1117   000ACE  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1118   000AD2  0E00               	movlw	0
  1119   000AD4  22DD               	addwfc	postdec2,f,c
  1120   000AD6  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1121   000ADA  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1122   000ADE  CFDE F04C          	movff	postinc2,vfpfcnvrt@convarg
  1123   000AE2  CFDD F04D          	movff	postdec2,vfpfcnvrt@convarg+1
  1124   000AE6  0E00               	movlw	0
  1125   000AE8  BE4D               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1126   000AEA  0EFF               	movlw	-1
  1127   000AEC  6E4E               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1128   000AEE  6E4F               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1129   000AF0  6E50               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1130   000AF2  6E51               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1131   000AF4  6E52               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1132   000AF6  6E53               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1133                           
  1134                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1135   000AF8  0E01               	movlw	1
  1136   000AFA  2456               	addwf	vfpfcnvrt@cp^0,w,c
  1137   000AFC  6E49               	movwf	??_vfpfcnvrt^0,c
  1138   000AFE  0E00               	movlw	0
  1139   000B00  2057               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1140   000B02  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  1141   000B04  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1142   000B08  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1143   000B0C  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  1144   000B10  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1145   000B14                     
  1146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1147   000B14  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1148   000B18  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1149   000B1C  C04C  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  1150   000B20  C04D  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1151   000B24  C04E  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1152   000B28  C04F  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1153   000B2C  C050  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1154   000B30  C051  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1155   000B34  C052  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1156   000B38  C053  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1157   000B3C  EC19  F003         	call	_dtoa	;wreg free
  1158   000B40  EFBF  F005         	goto	l866
  1159   000B44                     l2207:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1162   000B44  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1163   000B48  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1164   000B4C  2ADE               	incf	postinc2,f,c
  1165   000B4E  0E00               	movlw	0
  1166   000B50  22DD               	addwfc	postdec2,f,c
  1167   000B52  EFBF  F005         	goto	l866
  1168   000B56                     l2211:
  1169                           
  1170                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1171   000B56  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1172   000B5A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1173   000B5E  CFDE FFF6          	movff	postinc2,tblptrl
  1174   000B62  CFDD FFF7          	movff	postdec2,tblptrh
  1175   000B66                     	if	0	;tblptru may be non-zero
  1176   000B66                     	endif
  1177   000B66                     	if	0	;tblptru may be non-zero
  1178   000B66                     	endif
  1179   000B66  0008               	tblrd		*
  1180   000B68  50F5               	movf	tablat,w,c
  1181   000B6A  6E05               	movwf	fputc@c^0,c
  1182   000B6C  6A06               	clrf	(fputc@c+1)^0,c
  1183   000B6E  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1184   000B72  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1185   000B76  EC4D  F008         	call	_fputc	;wreg free
  1186   000B7A  EFA2  F005         	goto	l2207
  1187   000B7E                     l866:
  1188   000B7E  0012               	return		;funcret
  1189   000B80                     __end_of_vfpfcnvrt:
  1190                           	callstack 0
  1191                           
  1192 ;; *************** function _dtoa *****************
  1193 ;; Defined at:
  1194 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1197 ;;		 -> sprintf@f(11), 
  1198 ;;  d               8   33[COMRAM] long long 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  n               8   55[COMRAM] long long 
  1201 ;;  i               2   64[COMRAM] int 
  1202 ;;  w               2   53[COMRAM] int 
  1203 ;;  p               2   51[COMRAM] int 
  1204 ;;  s               1   63[COMRAM] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1214 ;;      Params:        10       0       0       0       0       0       0
  1215 ;;      Locals:        17       0       0       0       0       0       0
  1216 ;;      Temps:          8       0       0       0       0       0       0
  1217 ;;      Totals:        35       0       0       0       0       0       0
  1218 ;;Total ram usage:       35 bytes
  1219 ;; Hardware stack levels used: 1
  1220 ;; Hardware stack levels required when called: 5
  1221 ;; This function calls:
  1222 ;;		___aodiv
  1223 ;;		___aomod
  1224 ;;		_abs
  1225 ;;		_pad
  1226 ;; This function is called by:
  1227 ;;		_vfpfcnvrt
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232   000632                     __ptext4:
  1233                           	callstack 0
  1234   000632                     _dtoa:
  1235                           	callstack 22
  1236   000632                     
  1237                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1238   000632  C022  F038         	movff	dtoa@d,dtoa@n
  1239   000636  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  1240   00063A  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  1241   00063E  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  1242   000642  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  1243   000646  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  1244   00064A  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  1245   00064E  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  1246   000652                     
  1247                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1248   000652  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1249   000654  EF2E  F003         	goto	u1581
  1250   000658  EF31  F003         	goto	u1580
  1251   00065C                     u1581:
  1252   00065C  0E01               	movlw	1
  1253   00065E  EF32  F003         	goto	u1590
  1254   000662                     u1580:
  1255   000662  0E00               	movlw	0
  1256   000664                     u1590:
  1257   000664  6E40               	movwf	dtoa@s^0,c
  1258   000666                     
  1259                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1260   000666  5040               	movf	dtoa@s^0,w,c
  1261   000668  B4D8               	btfsc	status,2,c
  1262   00066A  EF39  F003         	goto	u1601
  1263   00066E  EF3B  F003         	goto	u1600
  1264   000672                     u1601:
  1265   000672  EF4B  F003         	goto	l2073
  1266   000676                     u1600:
  1267   000676                     
  1268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1269   000676  1E3F               	comf	(dtoa@n+7)^0,f,c
  1270   000678  1E3E               	comf	(dtoa@n+6)^0,f,c
  1271   00067A  1E3D               	comf	(dtoa@n+5)^0,f,c
  1272   00067C  1E3C               	comf	(dtoa@n+4)^0,f,c
  1273   00067E  1E3B               	comf	(dtoa@n+3)^0,f,c
  1274   000680  1E3A               	comf	(dtoa@n+2)^0,f,c
  1275   000682  1E39               	comf	(dtoa@n+1)^0,f,c
  1276   000684  6C38               	negf	dtoa@n^0,c
  1277   000686  0E00               	movlw	0
  1278   000688  2239               	addwfc	(dtoa@n+1)^0,f,c
  1279   00068A  223A               	addwfc	(dtoa@n+2)^0,f,c
  1280   00068C  223B               	addwfc	(dtoa@n+3)^0,f,c
  1281   00068E  223C               	addwfc	(dtoa@n+4)^0,f,c
  1282   000690  223D               	addwfc	(dtoa@n+5)^0,f,c
  1283   000692  223E               	addwfc	(dtoa@n+6)^0,f,c
  1284   000694  223F               	addwfc	(dtoa@n+7)^0,f,c
  1285   000696                     l2073:
  1286                           
  1287                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1288   000696  BE6D               	btfsc	(_prec+1)^0,7,c
  1289   000698  EF50  F003         	goto	u1611
  1290   00069C  EF52  F003         	goto	u1610
  1291   0006A0                     u1611:
  1292   0006A0  EF53  F003         	goto	l2077
  1293   0006A4                     u1610:
  1294   0006A4                     
  1295                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1296   0006A4  9270               	bcf	_flags^0,1,c
  1297   0006A6                     l2077:
  1298                           
  1299                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1300   0006A6  BE6D               	btfsc	(_prec+1)^0,7,c
  1301   0006A8  EF60  F003         	goto	u1620
  1302   0006AC  506D               	movf	(_prec+1)^0,w,c
  1303   0006AE  E106               	bnz	u1621
  1304   0006B0  046C               	decf	_prec^0,w,c
  1305   0006B2  B0D8               	btfsc	status,0,c
  1306   0006B4  EF5E  F003         	goto	u1621
  1307   0006B8  EF60  F003         	goto	u1620
  1308   0006BC                     u1621:
  1309   0006BC  EF66  F003         	goto	l828
  1310   0006C0                     u1620:
  1311   0006C0  0E00               	movlw	0
  1312   0006C2  6E35               	movwf	(dtoa@p+1)^0,c
  1313   0006C4  0E01               	movlw	1
  1314   0006C6  6E34               	movwf	dtoa@p^0,c
  1315   0006C8  EF6A  F003         	goto	l830
  1316   0006CC                     l828:
  1317   0006CC  C06C  F034         	movff	_prec,dtoa@p
  1318   0006D0  C06D  F035         	movff	_prec+1,dtoa@p+1
  1319   0006D4                     l830:
  1320                           
  1321                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1322   0006D4  C06A  F036         	movff	_width,dtoa@w
  1323   0006D8  C06B  F037         	movff	_width+1,dtoa@w+1
  1324   0006DC                     
  1325                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1326   0006DC  5040               	movf	dtoa@s^0,w,c
  1327   0006DE  B4D8               	btfsc	status,2,c
  1328   0006E0  EF74  F003         	goto	u1631
  1329   0006E4  EF76  F003         	goto	u1630
  1330   0006E8                     u1631:
  1331   0006E8  EF8D  F003         	goto	l831
  1332   0006EC                     u1630:
  1333   0006EC                     
  1334                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1335   0006EC  0636               	decf	dtoa@w^0,f,c
  1336   0006EE  A0D8               	btfss	status,0,c
  1337   0006F0  0637               	decf	(dtoa@w+1)^0,f,c
  1338   0006F2                     
  1339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1340   0006F2  5040               	movf	dtoa@s^0,w,c
  1341   0006F4  A4D8               	btfss	status,2,c
  1342   0006F6  EF7F  F003         	goto	u1641
  1343   0006FA  EF81  F003         	goto	u1640
  1344   0006FE                     u1641:
  1345   0006FE  EF87  F003         	goto	l2089
  1346   000702                     u1640:
  1347   000702  0E00               	movlw	0
  1348   000704  6E33               	movwf	(_dtoa$976+1)^0,c
  1349   000706  0E2B               	movlw	43
  1350   000708  6E32               	movwf	_dtoa$976^0,c
  1351   00070A  EF8B  F003         	goto	l2091
  1352   00070E                     l2089:
  1353   00070E  0E00               	movlw	0
  1354   000710  6E33               	movwf	(_dtoa$976+1)^0,c
  1355   000712  0E2D               	movlw	45
  1356   000714  6E32               	movwf	_dtoa$976^0,c
  1357   000716                     l2091:
  1358   000716  C032  F040         	movff	_dtoa$976,dtoa@s
  1359   00071A                     l831:
  1360                           
  1361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1362   00071A  0E00               	movlw	0
  1363   00071C  6E42               	movwf	(dtoa@i+1)^0,c
  1364   00071E  0E1F               	movlw	31
  1365   000720  6E41               	movwf	dtoa@i^0,c
  1366   000722                     
  1367                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1368   000722  0E00               	movlw	0
  1369   000724  0100               	movlb	0	; () banked
  1370   000726  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1371                           
  1372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1373   000728  EF12  F004         	goto	l2105
  1374   00072C                     l2095:
  1375                           
  1376                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1377   00072C  0641               	decf	dtoa@i^0,f,c
  1378   00072E  A0D8               	btfss	status,0,c
  1379   000730  0642               	decf	(dtoa@i+1)^0,f,c
  1380   000732                     
  1381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1382   000732  0E84               	movlw	low _dbuf
  1383   000734  2441               	addwf	dtoa@i^0,w,c
  1384   000736  6ED9               	movwf	fsr2l,c
  1385   000738  0E00               	movlw	high _dbuf
  1386   00073A  2042               	addwfc	(dtoa@i+1)^0,w,c
  1387   00073C  6EDA               	movwf	fsr2h,c
  1388   00073E  C038  F005         	movff	dtoa@n,___aomod@dividend
  1389   000742  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1390   000746  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1391   00074A  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1392   00074E  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1393   000752  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1394   000756  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1395   00075A  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1396   00075E  0E0A               	movlw	10
  1397   000760  6E0D               	movwf	___aomod@divisor^0,c
  1398   000762  0E00               	movlw	0
  1399   000764  6E0E               	movwf	(___aomod@divisor+1)^0,c
  1400   000766  0E00               	movlw	0
  1401   000768  6E0F               	movwf	(___aomod@divisor+2)^0,c
  1402   00076A  0E00               	movlw	0
  1403   00076C  6E10               	movwf	(___aomod@divisor+3)^0,c
  1404   00076E  0E00               	movlw	0
  1405   000770  6E11               	movwf	(___aomod@divisor+4)^0,c
  1406   000772  0E00               	movlw	0
  1407   000774  6E12               	movwf	(___aomod@divisor+5)^0,c
  1408   000776  0E00               	movlw	0
  1409   000778  6E13               	movwf	(___aomod@divisor+6)^0,c
  1410   00077A  0E00               	movlw	0
  1411   00077C  6E14               	movwf	(___aomod@divisor+7)^0,c
  1412   00077E  EC84  F006         	call	___aomod	;wreg free
  1413   000782  C005  F02A         	movff	?___aomod,??_dtoa
  1414   000786  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1415   00078A  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1416   00078E  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1417   000792  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1418   000796  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1419   00079A  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1420   00079E  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1421   0007A2  C02A  F017         	movff	??_dtoa,abs@a
  1422   0007A6  C02B  F018         	movff	??_dtoa+1,abs@a+1
  1423   0007AA  EC6F  F00A         	call	_abs	;wreg free
  1424   0007AE  5017               	movf	?_abs^0,w,c
  1425   0007B0  0F30               	addlw	48
  1426   0007B2  6EDF               	movwf	indf2,c
  1427   0007B4                     
  1428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1429   0007B4  0634               	decf	dtoa@p^0,f,c
  1430   0007B6  A0D8               	btfss	status,0,c
  1431   0007B8  0635               	decf	(dtoa@p+1)^0,f,c
  1432   0007BA                     
  1433                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1434   0007BA  0636               	decf	dtoa@w^0,f,c
  1435   0007BC  A0D8               	btfss	status,0,c
  1436   0007BE  0637               	decf	(dtoa@w+1)^0,f,c
  1437   0007C0                     
  1438                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1439   0007C0  C038  F005         	movff	dtoa@n,___aodiv@dividend
  1440   0007C4  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1441   0007C8  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1442   0007CC  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1443   0007D0  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1444   0007D4  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1445   0007D8  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1446   0007DC  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1447   0007E0  0E0A               	movlw	10
  1448   0007E2  6E0D               	movwf	___aodiv@divisor^0,c
  1449   0007E4  0E00               	movlw	0
  1450   0007E6  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  1451   0007E8  0E00               	movlw	0
  1452   0007EA  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  1453   0007EC  0E00               	movlw	0
  1454   0007EE  6E10               	movwf	(___aodiv@divisor+3)^0,c
  1455   0007F0  0E00               	movlw	0
  1456   0007F2  6E11               	movwf	(___aodiv@divisor+4)^0,c
  1457   0007F4  0E00               	movlw	0
  1458   0007F6  6E12               	movwf	(___aodiv@divisor+5)^0,c
  1459   0007F8  0E00               	movlw	0
  1460   0007FA  6E13               	movwf	(___aodiv@divisor+6)^0,c
  1461   0007FC  0E00               	movlw	0
  1462   0007FE  6E14               	movwf	(___aodiv@divisor+7)^0,c
  1463   000800  ECC0  F005         	call	___aodiv	;wreg free
  1464   000804  C005  F038         	movff	?___aodiv,dtoa@n
  1465   000808  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  1466   00080C  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  1467   000810  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  1468   000814  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  1469   000818  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  1470   00081C  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  1471   000820  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  1472   000824                     l2105:
  1473                           
  1474                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1475   000824  BE42               	btfsc	(dtoa@i+1)^0,7,c
  1476   000826  EF1D  F004         	goto	u1651
  1477   00082A  5042               	movf	(dtoa@i+1)^0,w,c
  1478   00082C  E108               	bnz	u1650
  1479   00082E  0441               	decf	dtoa@i^0,w,c
  1480   000830  A0D8               	btfss	status,0,c
  1481   000832  EF1D  F004         	goto	u1651
  1482   000836  EF1F  F004         	goto	u1650
  1483   00083A                     u1651:
  1484   00083A  EF4F  F004         	goto	l2115
  1485   00083E                     u1650:
  1486   00083E  5038               	movf	dtoa@n^0,w,c
  1487   000840  1039               	iorwf	(dtoa@n+1)^0,w,c
  1488   000842  103A               	iorwf	(dtoa@n+2)^0,w,c
  1489   000844  103B               	iorwf	(dtoa@n+3)^0,w,c
  1490   000846  103C               	iorwf	(dtoa@n+4)^0,w,c
  1491   000848  103D               	iorwf	(dtoa@n+5)^0,w,c
  1492   00084A  103E               	iorwf	(dtoa@n+6)^0,w,c
  1493   00084C  103F               	iorwf	(dtoa@n+7)^0,w,c
  1494   00084E  A4D8               	btfss	status,2,c
  1495   000850  EF2C  F004         	goto	u1661
  1496   000854  EF2E  F004         	goto	u1660
  1497   000858                     u1661:
  1498   000858  EF96  F003         	goto	l2095
  1499   00085C                     u1660:
  1500   00085C  BE35               	btfsc	(dtoa@p+1)^0,7,c
  1501   00085E  EF3B  F004         	goto	u1670
  1502   000862  5035               	movf	(dtoa@p+1)^0,w,c
  1503   000864  E106               	bnz	u1671
  1504   000866  0434               	decf	dtoa@p^0,w,c
  1505   000868  B0D8               	btfsc	status,0,c
  1506   00086A  EF39  F004         	goto	u1671
  1507   00086E  EF3B  F004         	goto	u1670
  1508   000872                     u1671:
  1509   000872  EF96  F003         	goto	l2095
  1510   000876                     u1670:
  1511   000876  BE37               	btfsc	(dtoa@w+1)^0,7,c
  1512   000878  EF46  F004         	goto	u1681
  1513   00087C  5037               	movf	(dtoa@w+1)^0,w,c
  1514   00087E  E108               	bnz	u1680
  1515   000880  0436               	decf	dtoa@w^0,w,c
  1516   000882  A0D8               	btfss	status,0,c
  1517   000884  EF46  F004         	goto	u1681
  1518   000888  EF48  F004         	goto	u1680
  1519   00088C                     u1681:
  1520   00088C  EF4F  F004         	goto	l2115
  1521   000890                     u1680:
  1522   000890  B270               	btfsc	_flags^0,1,c
  1523   000892  EF4D  F004         	goto	u1691
  1524   000896  EF4F  F004         	goto	u1690
  1525   00089A                     u1691:
  1526   00089A  EF96  F003         	goto	l2095
  1527   00089E                     u1690:
  1528   00089E                     l2115:
  1529                           
  1530                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1531   00089E  5040               	movf	dtoa@s^0,w,c
  1532   0008A0  B4D8               	btfsc	status,2,c
  1533   0008A2  EF55  F004         	goto	u1701
  1534   0008A6  EF57  F004         	goto	u1700
  1535   0008AA                     u1701:
  1536   0008AA  EF62  F004         	goto	l2121
  1537   0008AE                     u1700:
  1538   0008AE                     
  1539                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1540   0008AE  0641               	decf	dtoa@i^0,f,c
  1541   0008B0  A0D8               	btfss	status,0,c
  1542   0008B2  0642               	decf	(dtoa@i+1)^0,f,c
  1543   0008B4                     
  1544                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1545   0008B4  0E84               	movlw	low _dbuf
  1546   0008B6  2441               	addwf	dtoa@i^0,w,c
  1547   0008B8  6ED9               	movwf	fsr2l,c
  1548   0008BA  0E00               	movlw	high _dbuf
  1549   0008BC  2042               	addwfc	(dtoa@i+1)^0,w,c
  1550   0008BE  6EDA               	movwf	fsr2h,c
  1551   0008C0  C040  FFDF         	movff	dtoa@s,indf2
  1552   0008C4                     l2121:
  1553                           
  1554                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1555   0008C4  C020  F015         	movff	dtoa@fp,pad@fp
  1556   0008C8  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1557   0008CC  0E84               	movlw	low _dbuf
  1558   0008CE  2441               	addwf	dtoa@i^0,w,c
  1559   0008D0  6E17               	movwf	pad@buf^0,c
  1560   0008D2  0E00               	movlw	high _dbuf
  1561   0008D4  2042               	addwfc	(dtoa@i+1)^0,w,c
  1562   0008D6  6E18               	movwf	(pad@buf+1)^0,c
  1563   0008D8  C036  F019         	movff	dtoa@w,pad@p
  1564   0008DC  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1565   0008E0  ECB2  F008         	call	_pad	;wreg free
  1566   0008E4  0012               	return		;funcret
  1567   0008E6                     __end_of_dtoa:
  1568                           	callstack 0
  1569                           
  1570 ;; *************** function _pad *****************
  1571 ;; Defined at:
  1572 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1575 ;;		 -> sprintf@f(11), 
  1576 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1577 ;;		 -> dbuf(32), 
  1578 ;;  p               2   24[COMRAM] int 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  w               2   29[COMRAM] int 
  1581 ;;  i               2   27[COMRAM] int 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1591 ;;      Params:         6       0       0       0       0       0       0
  1592 ;;      Locals:         4       0       0       0       0       0       0
  1593 ;;      Temps:          1       0       0       0       0       0       0
  1594 ;;      Totals:        11       0       0       0       0       0       0
  1595 ;;Total ram usage:       11 bytes
  1596 ;; Hardware stack levels used: 1
  1597 ;; Hardware stack levels required when called: 4
  1598 ;; This function calls:
  1599 ;;		_fputc
  1600 ;;		_fputs
  1601 ;; This function is called by:
  1602 ;;		_dtoa
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text5
  1607   001164                     __ptext5:
  1608                           	callstack 0
  1609   001164                     _pad:
  1610                           	callstack 22
  1611   001164                     
  1612                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1613   001164  A070               	btfss	_flags^0,0,c
  1614   001166  EFB7  F008         	goto	u1491
  1615   00116A  EFB9  F008         	goto	u1490
  1616   00116E                     u1491:
  1617   00116E  EFC3  F008         	goto	l2031
  1618   001172                     u1490:
  1619   001172                     
  1620                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1621   001172  C017  F00E         	movff	pad@buf,fputs@s
  1622   001176  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1623   00117A  C015  F010         	movff	pad@fp,fputs@fp
  1624   00117E  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1625   001182  EC4D  F00A         	call	_fputs	;wreg free
  1626   001186                     l2031:
  1627                           
  1628                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1629   001186  BE1A               	btfsc	(pad@p+1)^0,7,c
  1630   001188  EFC8  F008         	goto	u1501
  1631   00118C  EFCA  F008         	goto	u1500
  1632   001190                     u1501:
  1633   001190  EFD0  F008         	goto	l2035
  1634   001194                     u1500:
  1635   001194  C019  F01E         	movff	pad@p,pad@w
  1636   001198  C01A  F01F         	movff	pad@p+1,pad@w+1
  1637   00119C  EFD4  F008         	goto	l817
  1638   0011A0                     l2035:
  1639   0011A0  0E00               	movlw	0
  1640   0011A2  6E1F               	movwf	(pad@w+1)^0,c
  1641   0011A4  0E00               	movlw	0
  1642   0011A6  6E1E               	movwf	pad@w^0,c
  1643   0011A8                     l817:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1646   0011A8  0E00               	movlw	0
  1647   0011AA  6E1D               	movwf	(pad@i+1)^0,c
  1648   0011AC  0E00               	movlw	0
  1649   0011AE  6E1C               	movwf	pad@i^0,c
  1650                           
  1651                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1652   0011B0  EFE6  F008         	goto	l2041
  1653   0011B4                     l2037:
  1654                           
  1655                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1656   0011B4  0E00               	movlw	0
  1657   0011B6  6E06               	movwf	(fputc@c+1)^0,c
  1658   0011B8  0E20               	movlw	32
  1659   0011BA  6E05               	movwf	fputc@c^0,c
  1660   0011BC  C015  F007         	movff	pad@fp,fputc@fp
  1661   0011C0  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1662   0011C4  EC4D  F008         	call	_fputc	;wreg free
  1663   0011C8                     
  1664                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1665   0011C8  4A1C               	infsnz	pad@i^0,f,c
  1666   0011CA  2A1D               	incf	(pad@i+1)^0,f,c
  1667   0011CC                     l2041:
  1668                           
  1669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1670   0011CC  501E               	movf	pad@w^0,w,c
  1671   0011CE  5C1C               	subwf	pad@i^0,w,c
  1672   0011D0  501D               	movf	(pad@i+1)^0,w,c
  1673   0011D2  0A80               	xorlw	128
  1674   0011D4  6E1B               	movwf	??_pad^0,c
  1675   0011D6  501F               	movf	(pad@w+1)^0,w,c
  1676   0011D8  0A80               	xorlw	128
  1677   0011DA  581B               	subwfb	??_pad^0,w,c
  1678   0011DC  A0D8               	btfss	status,0,c
  1679   0011DE  EFF3  F008         	goto	u1511
  1680   0011E2  EFF5  F008         	goto	u1510
  1681   0011E6                     u1511:
  1682   0011E6  EFDA  F008         	goto	l2037
  1683   0011EA                     u1510:
  1684   0011EA                     
  1685                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1686   0011EA  B070               	btfsc	_flags^0,0,c
  1687   0011EC  EFFA  F008         	goto	u1521
  1688   0011F0  EFFC  F008         	goto	u1520
  1689   0011F4                     u1521:
  1690   0011F4  EF06  F009         	goto	l822
  1691   0011F8                     u1520:
  1692   0011F8                     
  1693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1694   0011F8  C017  F00E         	movff	pad@buf,fputs@s
  1695   0011FC  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1696   001200  C015  F010         	movff	pad@fp,fputs@fp
  1697   001204  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1698   001208  EC4D  F00A         	call	_fputs	;wreg free
  1699   00120C                     l822:
  1700   00120C  0012               	return		;funcret
  1701   00120E                     __end_of_pad:
  1702                           	callstack 0
  1703                           
  1704 ;; *************** function _fputs *****************
  1705 ;; Defined at:
  1706 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1709 ;;		 -> dbuf(32), 
  1710 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1711 ;;		 -> sprintf@f(11), 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  i               2   18[COMRAM] int 
  1714 ;;  c               1   17[COMRAM] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  2   13[COMRAM] int 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1724 ;;      Params:         4       0       0       0       0       0       0
  1725 ;;      Locals:         3       0       0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0
  1727 ;;      Totals:         7       0       0       0       0       0       0
  1728 ;;Total ram usage:        7 bytes
  1729 ;; Hardware stack levels used: 1
  1730 ;; Hardware stack levels required when called: 3
  1731 ;; This function calls:
  1732 ;;		_fputc
  1733 ;; This function is called by:
  1734 ;;		_pad
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text6
  1739   00149A                     __ptext6:
  1740                           	callstack 0
  1741   00149A                     _fputs:
  1742                           	callstack 22
  1743   00149A  0E00               	movlw	0
  1744   00149C  6E14               	movwf	(fputs@i+1)^0,c
  1745   00149E  0E00               	movlw	0
  1746   0014A0  6E13               	movwf	fputs@i^0,c
  1747   0014A2  EF5E  F00A         	goto	l1939
  1748   0014A6                     l1935:
  1749   0014A6  C012  F005         	movff	fputs@c,fputc@c
  1750   0014AA  6A06               	clrf	(fputc@c+1)^0,c
  1751   0014AC  C010  F007         	movff	fputs@fp,fputc@fp
  1752   0014B0  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1753   0014B4  EC4D  F008         	call	_fputc	;wreg free
  1754   0014B8  4A13               	infsnz	fputs@i^0,f,c
  1755   0014BA  2A14               	incf	(fputs@i+1)^0,f,c
  1756   0014BC                     l1939:
  1757   0014BC  5013               	movf	fputs@i^0,w,c
  1758   0014BE  240E               	addwf	fputs@s^0,w,c
  1759   0014C0  6ED9               	movwf	fsr2l,c
  1760   0014C2  5014               	movf	(fputs@i+1)^0,w,c
  1761   0014C4  200F               	addwfc	(fputs@s+1)^0,w,c
  1762   0014C6  6EDA               	movwf	fsr2h,c
  1763   0014C8  50DF               	movf	indf2,w,c
  1764   0014CA  6E12               	movwf	fputs@c^0,c
  1765   0014CC  5012               	movf	fputs@c^0,w,c
  1766   0014CE  A4D8               	btfss	status,2,c
  1767   0014D0  EF6C  F00A         	goto	u1351
  1768   0014D4  EF6E  F00A         	goto	u1350
  1769   0014D8                     u1351:
  1770   0014D8  EF53  F00A         	goto	l1935
  1771   0014DC                     u1350:
  1772   0014DC  0012               	return		;funcret
  1773   0014DE                     __end_of_fputs:
  1774                           	callstack 0
  1775                           
  1776 ;; *************** function _fputc *****************
  1777 ;; Defined at:
  1778 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  c               2    4[COMRAM] int 
  1781 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1782 ;;		 -> sprintf@f(11), 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2    4[COMRAM] int 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         4       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          5       0       0       0       0       0       0
  1797 ;;      Totals:         9       0       0       0       0       0       0
  1798 ;;Total ram usage:        9 bytes
  1799 ;; Hardware stack levels used: 1
  1800 ;; Hardware stack levels required when called: 2
  1801 ;; This function calls:
  1802 ;;		_putch
  1803 ;; This function is called by:
  1804 ;;		_pad
  1805 ;;		_vfpfcnvrt
  1806 ;;		_fputs
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text7
  1811   00109A                     __ptext7:
  1812                           	callstack 0
  1813   00109A                     _fputc:
  1814                           	callstack 25
  1815   00109A  5007               	movf	fputc@fp^0,w,c
  1816   00109C  1008               	iorwf	(fputc@fp+1)^0,w,c
  1817   00109E  B4D8               	btfsc	status,2,c
  1818   0010A0  EF54  F008         	goto	u1311
  1819   0010A4  EF56  F008         	goto	u1310
  1820   0010A8                     u1311:
  1821   0010A8  EF5F  F008         	goto	l1923
  1822   0010AC                     u1310:
  1823   0010AC  5007               	movf	fputc@fp^0,w,c
  1824   0010AE  1008               	iorwf	(fputc@fp+1)^0,w,c
  1825   0010B0  A4D8               	btfss	status,2,c
  1826   0010B2  EF5D  F008         	goto	u1321
  1827   0010B6  EF5F  F008         	goto	u1320
  1828   0010BA                     u1321:
  1829   0010BA  EF64  F008         	goto	l1925
  1830   0010BE                     u1320:
  1831   0010BE                     l1923:
  1832   0010BE  5005               	movf	fputc@c^0,w,c
  1833   0010C0  EC00  F00B         	call	_putch
  1834   0010C4  EFB1  F008         	goto	l930
  1835   0010C8                     l1925:
  1836   0010C8  EE20 F009          	lfsr	2,9
  1837   0010CC  5007               	movf	fputc@fp^0,w,c
  1838   0010CE  26D9               	addwf	fsr2l,f,c
  1839   0010D0  5008               	movf	(fputc@fp+1)^0,w,c
  1840   0010D2  22DA               	addwfc	fsr2h,f,c
  1841   0010D4  50DE               	movf	postinc2,w,c
  1842   0010D6  10DE               	iorwf	postinc2,w,c
  1843   0010D8  B4D8               	btfsc	status,2,c
  1844   0010DA  EF71  F008         	goto	u1331
  1845   0010DE  EF73  F008         	goto	u1330
  1846   0010E2                     u1331:
  1847   0010E2  EF8E  F008         	goto	l1929
  1848   0010E6                     u1330:
  1849   0010E6  EE20 F009          	lfsr	2,9
  1850   0010EA  5007               	movf	fputc@fp^0,w,c
  1851   0010EC  26D9               	addwf	fsr2l,f,c
  1852   0010EE  5008               	movf	(fputc@fp+1)^0,w,c
  1853   0010F0  22DA               	addwfc	fsr2h,f,c
  1854   0010F2  EE10 F003          	lfsr	1,3
  1855   0010F6  5007               	movf	fputc@fp^0,w,c
  1856   0010F8  26E1               	addwf	fsr1l,f,c
  1857   0010FA  5008               	movf	(fputc@fp+1)^0,w,c
  1858   0010FC  22E2               	addwfc	fsr1h,f,c
  1859   0010FE  50DE               	movf	postinc2,w,c
  1860   001100  5CE6               	subwf	postinc1,w,c
  1861   001102  50E6               	movf	postinc1,w,c
  1862   001104  0A80               	xorlw	128
  1863   001106  6E0D               	movwf	(??_fputc+4)^0,c
  1864   001108  50DE               	movf	postinc2,w,c
  1865   00110A  0A80               	xorlw	128
  1866   00110C  580D               	subwfb	(??_fputc+4)^0,w,c
  1867   00110E  B0D8               	btfsc	status,0,c
  1868   001110  EF8C  F008         	goto	u1341
  1869   001114  EF8E  F008         	goto	u1340
  1870   001118                     u1341:
  1871   001118  EFB1  F008         	goto	l930
  1872   00111C                     u1340:
  1873   00111C                     l1929:
  1874   00111C  EE20 F003          	lfsr	2,3
  1875   001120  5007               	movf	fputc@fp^0,w,c
  1876   001122  26D9               	addwf	fsr2l,f,c
  1877   001124  5008               	movf	(fputc@fp+1)^0,w,c
  1878   001126  22DA               	addwfc	fsr2h,f,c
  1879   001128  CFDE F009          	movff	postinc2,??_fputc
  1880   00112C  CFDD F00A          	movff	postdec2,??_fputc+1
  1881   001130  C007  FFD9         	movff	fputc@fp,fsr2l
  1882   001134  C008  FFDA         	movff	fputc@fp+1,fsr2h
  1883   001138  CFDE F00B          	movff	postinc2,??_fputc+2
  1884   00113C  CFDD F00C          	movff	postdec2,??_fputc+3
  1885   001140  5009               	movf	??_fputc^0,w,c
  1886   001142  240B               	addwf	(??_fputc+2)^0,w,c
  1887   001144  6ED9               	movwf	fsr2l,c
  1888   001146  500A               	movf	(??_fputc+1)^0,w,c
  1889   001148  200C               	addwfc	(??_fputc+3)^0,w,c
  1890   00114A  6EDA               	movwf	fsr2h,c
  1891   00114C  C005  FFDF         	movff	fputc@c,indf2
  1892   001150  EE20 F003          	lfsr	2,3
  1893   001154  5007               	movf	fputc@fp^0,w,c
  1894   001156  26D9               	addwf	fsr2l,f,c
  1895   001158  5008               	movf	(fputc@fp+1)^0,w,c
  1896   00115A  22DA               	addwfc	fsr2h,f,c
  1897   00115C  2ADE               	incf	postinc2,f,c
  1898   00115E  0E00               	movlw	0
  1899   001160  22DD               	addwfc	postdec2,f,c
  1900   001162                     l930:
  1901   001162  0012               	return		;funcret
  1902   001164                     __end_of_fputc:
  1903                           	callstack 0
  1904                           
  1905 ;; *************** function _putch *****************
  1906 ;; Defined at:
  1907 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  c               1    wreg     unsigned char 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  c               1    0[COMRAM] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1921 ;;      Params:         0       0       0       0       0       0       0
  1922 ;;      Locals:         0       0       0       0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0
  1924 ;;      Totals:         0       0       0       0       0       0       0
  1925 ;;Total ram usage:        0 bytes
  1926 ;; Hardware stack levels used: 1
  1927 ;; Hardware stack levels required when called: 1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_fputc
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text8
  1936   001600                     __ptext8:
  1937                           	callstack 0
  1938   001600                     _putch:
  1939                           	callstack 25
  1940   001600  0012               	return		;funcret
  1941   001602                     __end_of_putch:
  1942                           	callstack 0
  1943                           
  1944 ;; *************** function _abs *****************
  1945 ;; Defined at:
  1946 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  a               2   22[COMRAM] int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  2   22[COMRAM] int 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         2       0       0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0
  1962 ;;      Temps:          2       0       0       0       0       0       0
  1963 ;;      Totals:         4       0       0       0       0       0       0
  1964 ;;Total ram usage:        4 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; Hardware stack levels required when called: 1
  1967 ;; This function calls:
  1968 ;;		Nothing
  1969 ;; This function is called by:
  1970 ;;		_dtoa
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text9
  1975   0014DE                     __ptext9:
  1976                           	callstack 0
  1977   0014DE                     _abs:
  1978                           	callstack 25
  1979   0014DE  BE18               	btfsc	(abs@a+1)^0,7,c
  1980   0014E0  EF7C  F00A         	goto	u1530
  1981   0014E4  5018               	movf	(abs@a+1)^0,w,c
  1982   0014E6  E106               	bnz	u1531
  1983   0014E8  0417               	decf	abs@a^0,w,c
  1984   0014EA  B0D8               	btfsc	status,0,c
  1985   0014EC  EF7A  F00A         	goto	u1531
  1986   0014F0  EF7C  F00A         	goto	u1530
  1987   0014F4                     u1531:
  1988   0014F4  EF8A  F00A         	goto	l876
  1989   0014F8                     u1530:
  1990   0014F8  C017  F019         	movff	abs@a,??_abs
  1991   0014FC  C018  F01A         	movff	abs@a+1,??_abs+1
  1992   001500  1E19               	comf	??_abs^0,f,c
  1993   001502  1E1A               	comf	(??_abs+1)^0,f,c
  1994   001504  4A19               	infsnz	??_abs^0,f,c
  1995   001506  2A1A               	incf	(??_abs+1)^0,f,c
  1996   001508  C019  F017         	movff	??_abs,?_abs
  1997   00150C  C01A  F018         	movff	??_abs+1,?_abs+1
  1998   001510  EF8E  F00A         	goto	l879
  1999   001514                     l876:
  2000   001514  C017  F017         	movff	abs@a,?_abs
  2001   001518  C018  F018         	movff	abs@a+1,?_abs+1
  2002   00151C                     l879:
  2003   00151C  0012               	return		;funcret
  2004   00151E                     __end_of_abs:
  2005                           	callstack 0
  2006                           
  2007 ;; *************** function ___aomod *****************
  2008 ;; Defined at:
  2009 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  dividend        8    4[COMRAM] long long 
  2012 ;;  divisor         8   12[COMRAM] long long 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  sign            1   21[COMRAM] unsigned char 
  2015 ;;  counter         1   20[COMRAM] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  8    4[COMRAM] long long 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2025 ;;      Params:        16       0       0       0       0       0       0
  2026 ;;      Locals:         2       0       0       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0
  2028 ;;      Totals:        18       0       0       0       0       0       0
  2029 ;;Total ram usage:       18 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; Hardware stack levels required when called: 1
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_dtoa
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text10
  2040   000D08                     __ptext10:
  2041                           	callstack 0
  2042   000D08                     ___aomod:
  2043                           	callstack 25
  2044   000D08  0E00               	movlw	0
  2045   000D0A  6E16               	movwf	___aomod@sign^0,c
  2046   000D0C  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  2047   000D0E  EF8D  F006         	goto	u1430
  2048   000D12  EF8B  F006         	goto	u1431
  2049   000D16                     u1431:
  2050   000D16  EF9F  F006         	goto	l1999
  2051   000D1A                     u1430:
  2052   000D1A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2053   000D1C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2054   000D1E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2055   000D20  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2056   000D22  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2057   000D24  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2058   000D26  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2059   000D28  6C05               	negf	___aomod@dividend^0,c
  2060   000D2A  0E00               	movlw	0
  2061   000D2C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2062   000D2E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2063   000D30  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2064   000D32  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2065   000D34  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2066   000D36  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2067   000D38  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2068   000D3A  0E01               	movlw	1
  2069   000D3C  6E16               	movwf	___aomod@sign^0,c
  2070   000D3E                     l1999:
  2071   000D3E  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  2072   000D40  EFA6  F006         	goto	u1440
  2073   000D44  EFA4  F006         	goto	u1441
  2074   000D48                     u1441:
  2075   000D48  EFB6  F006         	goto	l2003
  2076   000D4C                     u1440:
  2077   000D4C  1E14               	comf	(___aomod@divisor+7)^0,f,c
  2078   000D4E  1E13               	comf	(___aomod@divisor+6)^0,f,c
  2079   000D50  1E12               	comf	(___aomod@divisor+5)^0,f,c
  2080   000D52  1E11               	comf	(___aomod@divisor+4)^0,f,c
  2081   000D54  1E10               	comf	(___aomod@divisor+3)^0,f,c
  2082   000D56  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  2083   000D58  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  2084   000D5A  6C0D               	negf	___aomod@divisor^0,c
  2085   000D5C  0E00               	movlw	0
  2086   000D5E  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  2087   000D60  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  2088   000D62  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  2089   000D64  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  2090   000D66  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  2091   000D68  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  2092   000D6A  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  2093   000D6C                     l2003:
  2094   000D6C  500D               	movf	___aomod@divisor^0,w,c
  2095   000D6E  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  2096   000D70  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  2097   000D72  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  2098   000D74  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  2099   000D76  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  2100   000D78  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  2101   000D7A  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  2102   000D7C  B4D8               	btfsc	status,2,c
  2103   000D7E  EFC3  F006         	goto	u1451
  2104   000D82  EFC5  F006         	goto	u1450
  2105   000D86                     u1451:
  2106   000D86  EF0D  F007         	goto	l2019
  2107   000D8A                     u1450:
  2108   000D8A  0E01               	movlw	1
  2109   000D8C  6E15               	movwf	___aomod@counter^0,c
  2110   000D8E  EFD3  F006         	goto	l2009
  2111   000D92                     l2007:
  2112   000D92  90D8               	bcf	status,0,c
  2113   000D94  360D               	rlcf	___aomod@divisor^0,f,c
  2114   000D96  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  2115   000D98  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  2116   000D9A  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  2117   000D9C  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  2118   000D9E  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  2119   000DA0  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  2120   000DA2  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  2121   000DA4  2A15               	incf	___aomod@counter^0,f,c
  2122   000DA6                     l2009:
  2123   000DA6  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  2124   000DA8  EFD8  F006         	goto	u1461
  2125   000DAC  EFDA  F006         	goto	u1460
  2126   000DB0                     u1461:
  2127   000DB0  EFC9  F006         	goto	l2007
  2128   000DB4                     u1460:
  2129   000DB4                     l2011:
  2130   000DB4  500D               	movf	___aomod@divisor^0,w,c
  2131   000DB6  5C05               	subwf	___aomod@dividend^0,w,c
  2132   000DB8  500E               	movf	(___aomod@divisor+1)^0,w,c
  2133   000DBA  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  2134   000DBC  500F               	movf	(___aomod@divisor+2)^0,w,c
  2135   000DBE  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  2136   000DC0  5010               	movf	(___aomod@divisor+3)^0,w,c
  2137   000DC2  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  2138   000DC4  5011               	movf	(___aomod@divisor+4)^0,w,c
  2139   000DC6  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  2140   000DC8  5012               	movf	(___aomod@divisor+5)^0,w,c
  2141   000DCA  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  2142   000DCC  5013               	movf	(___aomod@divisor+6)^0,w,c
  2143   000DCE  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  2144   000DD0  5014               	movf	(___aomod@divisor+7)^0,w,c
  2145   000DD2  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  2146   000DD4  A0D8               	btfss	status,0,c
  2147   000DD6  EFEF  F006         	goto	u1471
  2148   000DDA  EFF1  F006         	goto	u1470
  2149   000DDE                     u1471:
  2150   000DDE  EF01  F007         	goto	l2015
  2151   000DE2                     u1470:
  2152   000DE2  500D               	movf	___aomod@divisor^0,w,c
  2153   000DE4  5E05               	subwf	___aomod@dividend^0,f,c
  2154   000DE6  500E               	movf	(___aomod@divisor+1)^0,w,c
  2155   000DE8  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  2156   000DEA  500F               	movf	(___aomod@divisor+2)^0,w,c
  2157   000DEC  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  2158   000DEE  5010               	movf	(___aomod@divisor+3)^0,w,c
  2159   000DF0  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  2160   000DF2  5011               	movf	(___aomod@divisor+4)^0,w,c
  2161   000DF4  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  2162   000DF6  5012               	movf	(___aomod@divisor+5)^0,w,c
  2163   000DF8  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  2164   000DFA  5013               	movf	(___aomod@divisor+6)^0,w,c
  2165   000DFC  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  2166   000DFE  5014               	movf	(___aomod@divisor+7)^0,w,c
  2167   000E00  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  2168   000E02                     l2015:
  2169   000E02  90D8               	bcf	status,0,c
  2170   000E04  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  2171   000E06  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  2172   000E08  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  2173   000E0A  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  2174   000E0C  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  2175   000E0E  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  2176   000E10  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  2177   000E12  320D               	rrcf	___aomod@divisor^0,f,c
  2178   000E14  2E15               	decfsz	___aomod@counter^0,f,c
  2179   000E16  EFDA  F006         	goto	l2011
  2180   000E1A                     l2019:
  2181   000E1A  5016               	movf	___aomod@sign^0,w,c
  2182   000E1C  B4D8               	btfsc	status,2,c
  2183   000E1E  EF13  F007         	goto	u1481
  2184   000E22  EF15  F007         	goto	u1480
  2185   000E26                     u1481:
  2186   000E26  EF25  F007         	goto	l2023
  2187   000E2A                     u1480:
  2188   000E2A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2189   000E2C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2190   000E2E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2191   000E30  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2192   000E32  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2193   000E34  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2194   000E36  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2195   000E38  6C05               	negf	___aomod@dividend^0,c
  2196   000E3A  0E00               	movlw	0
  2197   000E3C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2198   000E3E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2199   000E40  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2200   000E42  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2201   000E44  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2202   000E46  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2203   000E48  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2204   000E4A                     l2023:
  2205   000E4A  C005  F005         	movff	___aomod@dividend,?___aomod
  2206   000E4E  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  2207   000E52  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  2208   000E56  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  2209   000E5A  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  2210   000E5E  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  2211   000E62  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  2212   000E66  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  2213   000E6A  0012               	return		;funcret
  2214   000E6C                     __end_of___aomod:
  2215                           	callstack 0
  2216                           
  2217 ;; *************** function ___aodiv *****************
  2218 ;; Defined at:
  2219 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  dividend        8    4[COMRAM] long long 
  2222 ;;  divisor         8   12[COMRAM] long long 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  quotient        8   22[COMRAM] long long 
  2225 ;;  sign            1   21[COMRAM] unsigned char 
  2226 ;;  counter         1   20[COMRAM] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  8    4[COMRAM] long long 
  2229 ;; Registers used:
  2230 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2236 ;;      Params:        16       0       0       0       0       0       0
  2237 ;;      Locals:        10       0       0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0
  2239 ;;      Totals:        26       0       0       0       0       0       0
  2240 ;;Total ram usage:       26 bytes
  2241 ;; Hardware stack levels used: 1
  2242 ;; Hardware stack levels required when called: 1
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_dtoa
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text11
  2251   000B80                     __ptext11:
  2252                           	callstack 0
  2253   000B80                     ___aodiv:
  2254                           	callstack 25
  2255   000B80  0E00               	movlw	0
  2256   000B82  6E16               	movwf	___aodiv@sign^0,c
  2257   000B84  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  2258   000B86  EFC9  F005         	goto	u1360
  2259   000B8A  EFC7  F005         	goto	u1361
  2260   000B8E                     u1361:
  2261   000B8E  EFDB  F005         	goto	l1955
  2262   000B92                     u1360:
  2263   000B92  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  2264   000B94  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  2265   000B96  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  2266   000B98  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  2267   000B9A  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  2268   000B9C  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  2269   000B9E  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  2270   000BA0  6C0D               	negf	___aodiv@divisor^0,c
  2271   000BA2  0E00               	movlw	0
  2272   000BA4  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  2273   000BA6  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  2274   000BA8  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  2275   000BAA  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  2276   000BAC  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  2277   000BAE  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  2278   000BB0  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  2279   000BB2  0E01               	movlw	1
  2280   000BB4  6E16               	movwf	___aodiv@sign^0,c
  2281   000BB6                     l1955:
  2282   000BB6  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  2283   000BB8  EFE2  F005         	goto	u1370
  2284   000BBC  EFE0  F005         	goto	u1371
  2285   000BC0                     u1371:
  2286   000BC0  EFF4  F005         	goto	l1961
  2287   000BC4                     u1370:
  2288   000BC4  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  2289   000BC6  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  2290   000BC8  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  2291   000BCA  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  2292   000BCC  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  2293   000BCE  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  2294   000BD0  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  2295   000BD2  6C05               	negf	___aodiv@dividend^0,c
  2296   000BD4  0E00               	movlw	0
  2297   000BD6  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  2298   000BD8  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  2299   000BDA  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  2300   000BDC  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  2301   000BDE  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  2302   000BE0  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  2303   000BE2  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  2304   000BE4  0E01               	movlw	1
  2305   000BE6  1A16               	xorwf	___aodiv@sign^0,f,c
  2306   000BE8                     l1961:
  2307   000BE8  EE20  F017         	lfsr	2,___aodiv@quotient
  2308   000BEC  0E07               	movlw	7
  2309   000BEE                     u1381:
  2310   000BEE  6ADE               	clrf	postinc2,c
  2311   000BF0  06E8               	decf	wreg,f,c
  2312   000BF2  E2FD               	bc	u1381
  2313   000BF4  500D               	movf	___aodiv@divisor^0,w,c
  2314   000BF6  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  2315   000BF8  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  2316   000BFA  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  2317   000BFC  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  2318   000BFE  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  2319   000C00  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  2320   000C02  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  2321   000C04  B4D8               	btfsc	status,2,c
  2322   000C06  EF07  F006         	goto	u1391
  2323   000C0A  EF09  F006         	goto	u1390
  2324   000C0E                     u1391:
  2325   000C0E  EF5B  F006         	goto	l1983
  2326   000C12                     u1390:
  2327   000C12  0E01               	movlw	1
  2328   000C14  6E15               	movwf	___aodiv@counter^0,c
  2329   000C16  EF17  F006         	goto	l1969
  2330   000C1A                     l1967:
  2331   000C1A  90D8               	bcf	status,0,c
  2332   000C1C  360D               	rlcf	___aodiv@divisor^0,f,c
  2333   000C1E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  2334   000C20  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  2335   000C22  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  2336   000C24  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  2337   000C26  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  2338   000C28  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  2339   000C2A  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  2340   000C2C  2A15               	incf	___aodiv@counter^0,f,c
  2341   000C2E                     l1969:
  2342   000C2E  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  2343   000C30  EF1C  F006         	goto	u1401
  2344   000C34  EF1E  F006         	goto	u1400
  2345   000C38                     u1401:
  2346   000C38  EF0D  F006         	goto	l1967
  2347   000C3C                     u1400:
  2348   000C3C                     l1971:
  2349   000C3C  90D8               	bcf	status,0,c
  2350   000C3E  3617               	rlcf	___aodiv@quotient^0,f,c
  2351   000C40  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  2352   000C42  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  2353   000C44  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  2354   000C46  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  2355   000C48  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  2356   000C4A  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  2357   000C4C  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  2358   000C4E  500D               	movf	___aodiv@divisor^0,w,c
  2359   000C50  5C05               	subwf	___aodiv@dividend^0,w,c
  2360   000C52  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2361   000C54  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  2362   000C56  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2363   000C58  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  2364   000C5A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2365   000C5C  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  2366   000C5E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2367   000C60  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  2368   000C62  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2369   000C64  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  2370   000C66  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2371   000C68  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  2372   000C6A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2373   000C6C  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  2374   000C6E  A0D8               	btfss	status,0,c
  2375   000C70  EF3C  F006         	goto	u1411
  2376   000C74  EF3E  F006         	goto	u1410
  2377   000C78                     u1411:
  2378   000C78  EF4F  F006         	goto	l1979
  2379   000C7C                     u1410:
  2380   000C7C  500D               	movf	___aodiv@divisor^0,w,c
  2381   000C7E  5E05               	subwf	___aodiv@dividend^0,f,c
  2382   000C80  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2383   000C82  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  2384   000C84  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2385   000C86  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  2386   000C88  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2387   000C8A  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  2388   000C8C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2389   000C8E  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  2390   000C90  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2391   000C92  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  2392   000C94  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2393   000C96  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  2394   000C98  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2395   000C9A  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  2396   000C9C  8017               	bsf	___aodiv@quotient^0,0,c
  2397   000C9E                     l1979:
  2398   000C9E  90D8               	bcf	status,0,c
  2399   000CA0  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  2400   000CA2  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  2401   000CA4  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  2402   000CA6  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  2403   000CA8  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  2404   000CAA  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  2405   000CAC  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  2406   000CAE  320D               	rrcf	___aodiv@divisor^0,f,c
  2407   000CB0  2E15               	decfsz	___aodiv@counter^0,f,c
  2408   000CB2  EF1E  F006         	goto	l1971
  2409   000CB6                     l1983:
  2410   000CB6  5016               	movf	___aodiv@sign^0,w,c
  2411   000CB8  B4D8               	btfsc	status,2,c
  2412   000CBA  EF61  F006         	goto	u1421
  2413   000CBE  EF63  F006         	goto	u1420
  2414   000CC2                     u1421:
  2415   000CC2  EF73  F006         	goto	l1987
  2416   000CC6                     u1420:
  2417   000CC6  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  2418   000CC8  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  2419   000CCA  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  2420   000CCC  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  2421   000CCE  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  2422   000CD0  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  2423   000CD2  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  2424   000CD4  6C17               	negf	___aodiv@quotient^0,c
  2425   000CD6  0E00               	movlw	0
  2426   000CD8  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  2427   000CDA  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  2428   000CDC  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  2429   000CDE  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  2430   000CE0  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  2431   000CE2  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  2432   000CE4  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  2433   000CE6                     l1987:
  2434   000CE6  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2435   000CEA  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2436   000CEE  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2437   000CF2  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2438   000CF6  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2439   000CFA  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2440   000CFE  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2441   000D02  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2442   000D06  0012               	return		;funcret
  2443   000D08                     __end_of___aodiv:
  2444                           	callstack 0
  2445                           
  2446 ;; *************** function _atoi *****************
  2447 ;; Defined at:
  2448 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2451 ;;		 -> STR_2(15), 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  n               2   17[COMRAM] int 
  2454 ;;  neg             2   15[COMRAM] int 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  2   10[COMRAM] int 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2464 ;;      Params:         2       0       0       0       0       0       0
  2465 ;;      Locals:         4       0       0       0       0       0       0
  2466 ;;      Temps:          3       0       0       0       0       0       0
  2467 ;;      Totals:         9       0       0       0       0       0       0
  2468 ;;Total ram usage:        9 bytes
  2469 ;; Hardware stack levels used: 1
  2470 ;; Hardware stack levels required when called: 2
  2471 ;; This function calls:
  2472 ;;		___wmul
  2473 ;;		_isdigit
  2474 ;;		_isspace
  2475 ;; This function is called by:
  2476 ;;		_vfpfcnvrt
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text12
  2481   000E6C                     __ptext12:
  2482                           	callstack 0
  2483   000E6C                     _atoi:
  2484                           	callstack 25
  2485   000E6C  0E00               	movlw	0
  2486   000E6E  6E13               	movwf	(atoi@n+1)^0,c
  2487   000E70  0E00               	movlw	0
  2488   000E72  6E12               	movwf	atoi@n^0,c
  2489   000E74  0E00               	movlw	0
  2490   000E76  6E11               	movwf	(atoi@neg+1)^0,c
  2491   000E78  0E00               	movlw	0
  2492   000E7A  6E10               	movwf	atoi@neg^0,c
  2493   000E7C  EF42  F007         	goto	l2131
  2494   000E80                     l2127:
  2495   000E80  4A0B               	infsnz	atoi@s^0,f,c
  2496   000E82  2A0C               	incf	(atoi@s+1)^0,f,c
  2497   000E84                     l2131:
  2498   000E84  C00B  FFF6         	movff	atoi@s,tblptrl
  2499   000E88  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2500   000E8C                     	if	0	;tblptru may be non-zero
  2501   000E8C                     	endif
  2502   000E8C                     	if	0	;tblptru may be non-zero
  2503   000E8C                     	endif
  2504   000E8C  0008               	tblrd		*
  2505   000E8E  50F5               	movf	tablat,w,c
  2506   000E90  0A20               	xorlw	32
  2507   000E92  B4D8               	btfsc	status,2,c
  2508   000E94  EF4E  F007         	goto	u1711
  2509   000E98  EF50  F007         	goto	u1710
  2510   000E9C                     u1711:
  2511   000E9C  EF40  F007         	goto	l2127
  2512   000EA0                     u1710:
  2513   000EA0  C00B  FFF6         	movff	atoi@s,tblptrl
  2514   000EA4  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2515   000EA8                     	if	0	;tblptru may be non-zero
  2516   000EA8                     	endif
  2517   000EA8                     	if	0	;tblptru may be non-zero
  2518   000EA8                     	endif
  2519   000EA8  0008               	tblrd		*
  2520   000EAA  CFF5 F00D          	movff	tablat,??_atoi
  2521   000EAE  0EF7               	movlw	247
  2522   000EB0  240D               	addwf	??_atoi^0,w,c
  2523   000EB2  6E0E               	movwf	(??_atoi+1)^0,c
  2524   000EB4  6A0F               	clrf	(??_atoi+2)^0,c
  2525   000EB6  0EFF               	movlw	255
  2526   000EB8  220F               	addwfc	(??_atoi+2)^0,f,c
  2527   000EBA  500F               	movf	(??_atoi+2)^0,w,c
  2528   000EBC  E109               	bnz	u1720
  2529   000EBE  0E05               	movlw	5
  2530   000EC0  5C0E               	subwf	(??_atoi+1)^0,w,c
  2531   000EC2  A0D8               	btfss	status,0,c
  2532   000EC4  EF66  F007         	goto	u1721
  2533   000EC8  EF68  F007         	goto	u1720
  2534   000ECC                     u1721:
  2535   000ECC  EF40  F007         	goto	l2127
  2536   000ED0                     u1720:
  2537   000ED0  EF72  F007         	goto	l2139
  2538   000ED4                     l2135:
  2539   000ED4  0E00               	movlw	0
  2540   000ED6  6E11               	movwf	(atoi@neg+1)^0,c
  2541   000ED8  0E01               	movlw	1
  2542   000EDA  6E10               	movwf	atoi@neg^0,c
  2543   000EDC                     l2137:
  2544   000EDC  4A0B               	infsnz	atoi@s^0,f,c
  2545   000EDE  2A0C               	incf	(atoi@s+1)^0,f,c
  2546   000EE0  EFA7  F007         	goto	l2147
  2547   000EE4                     l2139:
  2548   000EE4  C00B  FFF6         	movff	atoi@s,tblptrl
  2549   000EE8  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2550   000EEC                     	if	0	;tblptru may be non-zero
  2551   000EEC                     	endif
  2552   000EEC                     	if	0	;tblptru may be non-zero
  2553   000EEC                     	endif
  2554   000EEC  0008               	tblrd		*
  2555   000EEE  50F5               	movf	tablat,w,c
  2556   000EF0  6E0D               	movwf	??_atoi^0,c
  2557   000EF2  6A0E               	clrf	(??_atoi+1)^0,c
  2558                           
  2559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2560                           ; Switch size 1, requested type "simple"
  2561                           ; Number of cases is 1, Range of values is 0 to 0
  2562                           ; switch strategies available:
  2563                           ; Name         Instructions Cycles
  2564                           ; simple_byte            4     3 (average)
  2565                           ;	Chosen strategy is simple_byte
  2566   000EF4  500E               	movf	(??_atoi+1)^0,w,c
  2567   000EF6  0A00               	xorlw	0	; case 0
  2568   000EF8  B4D8               	btfsc	status,2,c
  2569   000EFA  EF81  F007         	goto	l2295
  2570   000EFE  EFA7  F007         	goto	l2147
  2571   000F02                     l2295:
  2572                           
  2573                           ; Switch size 1, requested type "simple"
  2574                           ; Number of cases is 2, Range of values is 43 to 45
  2575                           ; switch strategies available:
  2576                           ; Name         Instructions Cycles
  2577                           ; simple_byte            7     4 (average)
  2578                           ;	Chosen strategy is simple_byte
  2579   000F02  500D               	movf	??_atoi^0,w,c
  2580   000F04  0A2B               	xorlw	43	; case 43
  2581   000F06  B4D8               	btfsc	status,2,c
  2582   000F08  EF6E  F007         	goto	l2137
  2583   000F0C  0A06               	xorlw	6	; case 45
  2584   000F0E  B4D8               	btfsc	status,2,c
  2585   000F10  EF6A  F007         	goto	l2135
  2586   000F14  EFA7  F007         	goto	l2147
  2587   000F18                     l2141:
  2588   000F18  C012  F005         	movff	atoi@n,___wmul@multiplier
  2589   000F1C  C013  F006         	movff	atoi@n+1,___wmul@multiplier+1
  2590   000F20  0E00               	movlw	0
  2591   000F22  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  2592   000F24  0E0A               	movlw	10
  2593   000F26  6E07               	movwf	___wmul@multiplicand^0,c
  2594   000F28  ECB8  F00A         	call	___wmul	;wreg free
  2595   000F2C  C00B  FFF6         	movff	atoi@s,tblptrl
  2596   000F30  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2597   000F34                     	if	0	;tblptru may be non-zero
  2598   000F34                     	endif
  2599   000F34                     	if	0	;tblptru may be non-zero
  2600   000F34                     	endif
  2601   000F34  0008               	tblrd		*
  2602   000F36  50F5               	movf	tablat,w,c
  2603   000F38  5E05               	subwf	?___wmul^0,f,c
  2604   000F3A  0E00               	movlw	0
  2605   000F3C  5A06               	subwfb	(?___wmul+1)^0,f,c
  2606   000F3E  0E30               	movlw	48
  2607   000F40  2405               	addwf	?___wmul^0,w,c
  2608   000F42  6E12               	movwf	atoi@n^0,c
  2609   000F44  0E00               	movlw	0
  2610   000F46  2006               	addwfc	(?___wmul+1)^0,w,c
  2611   000F48  6E13               	movwf	(atoi@n+1)^0,c
  2612   000F4A  EF6E  F007         	goto	l2137
  2613   000F4E                     l2147:
  2614   000F4E  C00B  FFF6         	movff	atoi@s,tblptrl
  2615   000F52  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2616   000F56                     	if	0	;tblptru may be non-zero
  2617   000F56                     	endif
  2618   000F56                     	if	0	;tblptru may be non-zero
  2619   000F56                     	endif
  2620   000F56  0008               	tblrd		*
  2621   000F58  CFF5 F00D          	movff	tablat,??_atoi
  2622   000F5C  0ED0               	movlw	208
  2623   000F5E  240D               	addwf	??_atoi^0,w,c
  2624   000F60  6E0E               	movwf	(??_atoi+1)^0,c
  2625   000F62  6A0F               	clrf	(??_atoi+2)^0,c
  2626   000F64  0EFF               	movlw	255
  2627   000F66  220F               	addwfc	(??_atoi+2)^0,f,c
  2628   000F68  500F               	movf	(??_atoi+2)^0,w,c
  2629   000F6A  E109               	bnz	u1730
  2630   000F6C  0E0A               	movlw	10
  2631   000F6E  5C0E               	subwf	(??_atoi+1)^0,w,c
  2632   000F70  A0D8               	btfss	status,0,c
  2633   000F72  EFBD  F007         	goto	u1731
  2634   000F76  EFBF  F007         	goto	u1730
  2635   000F7A                     u1731:
  2636   000F7A  EF8C  F007         	goto	l2141
  2637   000F7E                     u1730:
  2638   000F7E  5010               	movf	atoi@neg^0,w,c
  2639   000F80  1011               	iorwf	(atoi@neg+1)^0,w,c
  2640   000F82  A4D8               	btfss	status,2,c
  2641   000F84  EFC6  F007         	goto	u1741
  2642   000F88  EFC8  F007         	goto	u1740
  2643   000F8C                     u1741:
  2644   000F8C  EFD6  F007         	goto	l901
  2645   000F90                     u1740:
  2646   000F90  C012  F00D         	movff	atoi@n,??_atoi
  2647   000F94  C013  F00E         	movff	atoi@n+1,??_atoi+1
  2648   000F98  1E0D               	comf	??_atoi^0,f,c
  2649   000F9A  1E0E               	comf	(??_atoi+1)^0,f,c
  2650   000F9C  4A0D               	infsnz	??_atoi^0,f,c
  2651   000F9E  2A0E               	incf	(??_atoi+1)^0,f,c
  2652   000FA0  C00D  F00B         	movff	??_atoi,?_atoi
  2653   000FA4  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2654   000FA8  EFDA  F007         	goto	l904
  2655   000FAC                     l901:
  2656   000FAC  C012  F00B         	movff	atoi@n,?_atoi
  2657   000FB0  C013  F00C         	movff	atoi@n+1,?_atoi+1
  2658   000FB4                     l904:
  2659   000FB4  0012               	return		;funcret
  2660   000FB6                     __end_of_atoi:
  2661                           	callstack 0
  2662                           
  2663 ;; *************** function _isspace *****************
  2664 ;; Defined at:
  2665 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  c               2    4[COMRAM] int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  2    4[COMRAM] int 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2679 ;;      Params:         2       0       0       0       0       0       0
  2680 ;;      Locals:         1       0       0       0       0       0       0
  2681 ;;      Temps:          2       0       0       0       0       0       0
  2682 ;;      Totals:         5       0       0       0       0       0       0
  2683 ;;Total ram usage:        5 bytes
  2684 ;; Hardware stack levels used: 1
  2685 ;; Hardware stack levels required when called: 1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_atoi
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text13
  2694   001454                     __ptext13:
  2695                           	callstack 0
  2696   001454                     _isspace:
  2697                           	callstack 25
  2698   001454  0E01               	movlw	1
  2699   001456  6E09               	movwf	_isspace$1025^0,c
  2700   001458  0E20               	movlw	32
  2701   00145A  1805               	xorwf	isspace@c^0,w,c
  2702   00145C  1006               	iorwf	(isspace@c+1)^0,w,c
  2703   00145E  B4D8               	btfsc	status,2,c
  2704   001460  EF34  F00A         	goto	u1561
  2705   001464  EF36  F00A         	goto	u1560
  2706   001468                     u1561:
  2707   001468  EF49  F00A         	goto	l2061
  2708   00146C                     u1560:
  2709   00146C  0EF7               	movlw	247
  2710   00146E  2405               	addwf	isspace@c^0,w,c
  2711   001470  6E07               	movwf	??_isspace^0,c
  2712   001472  0EFF               	movlw	255
  2713   001474  2006               	addwfc	(isspace@c+1)^0,w,c
  2714   001476  6E08               	movwf	(??_isspace+1)^0,c
  2715   001478  5008               	movf	(??_isspace+1)^0,w,c
  2716   00147A  E109               	bnz	u1570
  2717   00147C  0E05               	movlw	5
  2718   00147E  5C07               	subwf	??_isspace^0,w,c
  2719   001480  A0D8               	btfss	status,0,c
  2720   001482  EF45  F00A         	goto	u1571
  2721   001486  EF47  F00A         	goto	u1570
  2722   00148A                     u1571:
  2723   00148A  EF49  F00A         	goto	l2061
  2724   00148E                     u1570:
  2725   00148E  0E00               	movlw	0
  2726   001490  6E09               	movwf	_isspace$1025^0,c
  2727   001492                     l2061:
  2728   001492  C009  F005         	movff	_isspace$1025,?_isspace
  2729   001496  6A06               	clrf	(?_isspace+1)^0,c
  2730   001498  0012               	return		;funcret
  2731   00149A                     __end_of_isspace:
  2732                           	callstack 0
  2733                           
  2734 ;; *************** function _isdigit *****************
  2735 ;; Defined at:
  2736 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  c               2    4[COMRAM] int 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  2    4[COMRAM] int 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2750 ;;      Params:         2       0       0       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0
  2752 ;;      Temps:          2       0       0       0       0       0       0
  2753 ;;      Totals:         4       0       0       0       0       0       0
  2754 ;;Total ram usage:        4 bytes
  2755 ;; Hardware stack levels used: 1
  2756 ;; Hardware stack levels required when called: 1
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_vfpfcnvrt
  2761 ;;		_atoi
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text14
  2766   00151E                     __ptext14:
  2767                           	callstack 0
  2768   00151E                     _isdigit:
  2769                           	callstack 26
  2770   00151E  0ED0               	movlw	208
  2771   001520  2405               	addwf	isdigit@c^0,w,c
  2772   001522  6E07               	movwf	??_isdigit^0,c
  2773   001524  0EFF               	movlw	255
  2774   001526  2006               	addwfc	(isdigit@c+1)^0,w,c
  2775   001528  6E08               	movwf	(??_isdigit+1)^0,c
  2776   00152A  5008               	movf	(??_isdigit+1)^0,w,c
  2777   00152C  E10A               	bnz	u1540
  2778   00152E  0E0A               	movlw	10
  2779   001530  5C07               	subwf	??_isdigit^0,w,c
  2780   001532  A0D8               	btfss	status,0,c
  2781   001534  EF9E  F00A         	goto	u1541
  2782   001538  EFA1  F00A         	goto	u1540
  2783   00153C                     u1541:
  2784   00153C  0E01               	movlw	1
  2785   00153E  EFA2  F00A         	goto	u1550
  2786   001542                     u1540:
  2787   001542  0E00               	movlw	0
  2788   001544                     u1550:
  2789   001544  6E05               	movwf	?_isdigit^0,c
  2790   001546  6A06               	clrf	(?_isdigit+1)^0,c
  2791   001548  0012               	return		;funcret
  2792   00154A                     __end_of_isdigit:
  2793                           	callstack 0
  2794                           
  2795 ;; *************** function ___wmul *****************
  2796 ;; Defined at:
  2797 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  multiplier      2    4[COMRAM] unsigned int 
  2800 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  product         2    8[COMRAM] unsigned int 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  2    4[COMRAM] unsigned int 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, status,0, prodl, prodh
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         4       0       0       0       0       0       0
  2813 ;;      Locals:         2       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         6       0       0       0       0       0       0
  2816 ;;Total ram usage:        6 bytes
  2817 ;; Hardware stack levels used: 1
  2818 ;; Hardware stack levels required when called: 1
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_atoi
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text15
  2827   001570                     __ptext15:
  2828                           	callstack 0
  2829   001570                     ___wmul:
  2830                           	callstack 25
  2831   001570  5005               	movf	___wmul@multiplier^0,w,c
  2832   001572  0207               	mulwf	___wmul@multiplicand^0,c
  2833   001574  CFF3 F009          	movff	prodl,___wmul@product
  2834   001578  CFF4 F00A          	movff	prodh,___wmul@product+1
  2835   00157C  5005               	movf	___wmul@multiplier^0,w,c
  2836   00157E  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  2837   001580  50F3               	movf	243,w,c
  2838   001582  260A               	addwf	(___wmul@product+1)^0,f,c
  2839   001584  5006               	movf	(___wmul@multiplier+1)^0,w,c
  2840   001586  0207               	mulwf	___wmul@multiplicand^0,c
  2841   001588  50F3               	movf	243,w,c
  2842   00158A  260A               	addwf	(___wmul@product+1)^0,f,c
  2843   00158C  C009  F005         	movff	___wmul@product,?___wmul
  2844   001590  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  2845   001594  0012               	return		;funcret
  2846   001596                     __end_of___wmul:
  2847                           	callstack 0
  2848                           
  2849 ;; *************** function _lcd_write *****************
  2850 ;; Defined at:
  2851 ;;		line 75 in file "LCD4b.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  lin             1    wreg     unsigned char 
  2854 ;;  col             1   10[COMRAM] unsigned char 
  2855 ;;  str             2   11[COMRAM] PTR unsigned char 
  2856 ;;		 -> STR_4(16), STR_3(16), bufferLCD(16), STR_1(17), 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  lin             1   14[COMRAM] unsigned char 
  2859 ;;  end             1   13[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2869 ;;      Params:         3       0       0       0       0       0       0
  2870 ;;      Locals:         2       0       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0
  2872 ;;      Totals:         5       0       0       0       0       0       0
  2873 ;;Total ram usage:        5 bytes
  2874 ;; Hardware stack levels used: 1
  2875 ;; Hardware stack levels required when called: 4
  2876 ;; This function calls:
  2877 ;;		_lcd_send_byte
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;;		_lcd_clear
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text16
  2885   00120E                     __ptext16:
  2886                           	callstack 0
  2887   00120E                     _lcd_write:
  2888                           	callstack 26
  2889                           
  2890                           ;incstack = 0
  2891                           ;lcd_write@lin stored from wreg
  2892   00120E  6E0F               	movwf	lcd_write@lin^0,c
  2893   001210                     
  2894                           ;LCD4b.c: 75: void lcd_write(char lin, char col, char *str);LCD4b.c: 76: {;LCD4b.c: 77: 
      +                              char end;;LCD4b.c: 79:     if(lin == 1)
  2895   001210  040F               	decf	lcd_write@lin^0,w,c
  2896   001212  A4D8               	btfss	status,2,c
  2897   001214  EF0E  F009         	goto	u1211
  2898   001218  EF10  F009         	goto	u1210
  2899   00121C                     u1211:
  2900   00121C  EF15  F009         	goto	l1819
  2901   001220                     u1210:
  2902   001220                     
  2903                           ;LCD4b.c: 80:     {;LCD4b.c: 81:         end = col + 0X80 - 1;
  2904   001220  500B               	movf	lcd_write@col^0,w,c
  2905   001222  0F7F               	addlw	127
  2906   001224  6E0E               	movwf	lcd_write@end^0,c
  2907                           
  2908                           ;LCD4b.c: 82:     }
  2909   001226  EF21  F009         	goto	l1823
  2910   00122A                     l1819:
  2911   00122A  0E02               	movlw	2
  2912   00122C  180F               	xorwf	lcd_write@lin^0,w,c
  2913   00122E  A4D8               	btfss	status,2,c
  2914   001230  EF1C  F009         	goto	u1221
  2915   001234  EF1E  F009         	goto	u1220
  2916   001238                     u1221:
  2917   001238  EF21  F009         	goto	l1823
  2918   00123C                     u1220:
  2919   00123C                     
  2920                           ;LCD4b.c: 84:     {;LCD4b.c: 85:         end = col + 0xC0 - 1;
  2921   00123C  500B               	movf	lcd_write@col^0,w,c
  2922   00123E  0FBF               	addlw	191
  2923   001240  6E0E               	movwf	lcd_write@end^0,c
  2924   001242                     l1823:
  2925                           
  2926                           ;LCD4b.c: 87:     lcd_send_byte(0,end);
  2927   001242  C00E  F009         	movff	lcd_write@end,lcd_send_byte@data
  2928   001246  0E00               	movlw	0
  2929   001248  ECDB  F00A         	call	_lcd_send_byte
  2930                           
  2931                           ;LCD4b.c: 89:     while(*str)
  2932   00124C  EF3E  F009         	goto	l1829
  2933   001250                     l1825:
  2934                           
  2935                           ;LCD4b.c: 90:     {;LCD4b.c: 91:         lcd_send_byte(1,*str);
  2936   001250  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2937   001254  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2938   001258  6AF8               	clrf	tblptru,c
  2939   00125A  0E05               	movlw	(high __ramtop+-1)
  2940   00125C  64F7               	cpfsgt	tblptrh,c
  2941   00125E  D003               	bra	u1237
  2942   001260  0008               	tblrd		*
  2943   001262  50F5               	movf	tablat,w,c
  2944   001264  D005               	bra	u1230
  2945   001266                     u1237:
  2946   001266  CFF6 FFE1          	movff	tblptrl,fsr1l
  2947   00126A  CFF7 FFE2          	movff	tblptrh,fsr1h
  2948   00126E  50E7               	movf	indf1,w,c
  2949   001270                     u1230:
  2950   001270  6E09               	movwf	lcd_send_byte@data^0,c
  2951   001272  0E01               	movlw	1
  2952   001274  ECDB  F00A         	call	_lcd_send_byte
  2953   001278                     
  2954                           ;LCD4b.c: 92:         str++;
  2955   001278  4A0C               	infsnz	lcd_write@str^0,f,c
  2956   00127A  2A0D               	incf	(lcd_write@str+1)^0,f,c
  2957   00127C                     l1829:
  2958                           
  2959                           ;LCD4b.c: 89:     while(*str)
  2960   00127C  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2961   001280  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2962   001284  6AF8               	clrf	tblptru,c
  2963   001286  0E05               	movlw	(high __ramtop+-1)
  2964   001288  64F7               	cpfsgt	tblptrh,c
  2965   00128A  D003               	bra	u1247
  2966   00128C  0008               	tblrd		*
  2967   00128E  50F5               	movf	tablat,w,c
  2968   001290  D005               	bra	u1240
  2969   001292                     u1247:
  2970   001292  CFF6 FFE1          	movff	tblptrl,fsr1l
  2971   001296  CFF7 FFE2          	movff	tblptrh,fsr1h
  2972   00129A  50E7               	movf	indf1,w,c
  2973   00129C                     u1240:
  2974   00129C  0900               	iorlw	0
  2975   00129E  A4D8               	btfss	status,2,c
  2976   0012A0  EF54  F009         	goto	u1251
  2977   0012A4  EF56  F009         	goto	u1250
  2978   0012A8                     u1251:
  2979   0012A8  EF28  F009         	goto	l1825
  2980   0012AC                     u1250:
  2981   0012AC  0012               	return		;funcret
  2982   0012AE                     __end_of_lcd_write:
  2983                           	callstack 0
  2984                           
  2985 ;; *************** function _lcd_send_byte *****************
  2986 ;; Defined at:
  2987 ;;		line 61 in file "LCD4b.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  level           1    wreg     unsigned char 
  2990 ;;  data            1    8[COMRAM] unsigned char 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  level           1    9[COMRAM] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, status,2, status,0, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3002 ;;      Params:         1       0       0       0       0       0       0
  3003 ;;      Locals:         1       0       0       0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0
  3005 ;;      Totals:         2       0       0       0       0       0       0
  3006 ;;Total ram usage:        2 bytes
  3007 ;; Hardware stack levels used: 1
  3008 ;; Hardware stack levels required when called: 3
  3009 ;; This function calls:
  3010 ;;		_lcd_cmd
  3011 ;; This function is called by:
  3012 ;;		_lcd_write
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text17
  3017   0015B6                     __ptext17:
  3018                           	callstack 0
  3019   0015B6                     _lcd_send_byte:
  3020                           	callstack 26
  3021                           
  3022                           ;incstack = 0
  3023                           ;lcd_send_byte@level stored from wreg
  3024   0015B6  6E0A               	movwf	lcd_send_byte@level^0,c
  3025   0015B8                     
  3026                           ;LCD4b.c: 61: void lcd_send_byte(char level, char data);LCD4b.c: 62: {;LCD4b.c: 63:     
      +                          PORTEbits.RE2 = level;
  3027   0015B8  B00A               	btfsc	lcd_send_byte@level^0,0,c
  3028   0015BA  D002               	bra	u1185
  3029   0015BC  9484               	bcf	132,2,c	;volatile
  3030   0015BE  D001               	bra	u1186
  3031   0015C0                     u1185:
  3032   0015C0  8484               	bsf	132,2,c	;volatile
  3033   0015C2                     u1186:
  3034   0015C2                     
  3035                           ;LCD4b.c: 64:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3036   0015C2  0E42               	movlw	66
  3037   0015C4                     u1837:
  3038   0015C4  2EE8               	decfsz	wreg,f,c
  3039   0015C6  D7FE               	bra	u1837
  3040   0015C8  D000               	nop2	
  3041   0015CA                     
  3042                           ;LCD4b.c: 65:     PORTEbits.RE1 = 0;
  3043   0015CA  9284               	bcf	132,1,c	;volatile
  3044   0015CC                     
  3045                           ;LCD4b.c: 66:     lcd_cmd(data);
  3046   0015CC  5009               	movf	lcd_send_byte@data^0,w,c
  3047   0015CE  ECDB  F007         	call	_lcd_cmd
  3048   0015D2  0012               	return		;funcret
  3049   0015D4                     __end_of_lcd_send_byte:
  3050                           	callstack 0
  3051                           
  3052 ;; *************** function _lcd_init *****************
  3053 ;; Defined at:
  3054 ;;		line 3 in file "LCD4b.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;		None
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  i               1    9[COMRAM] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, status,0, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3068 ;;      Params:         0       0       0       0       0       0       0
  3069 ;;      Locals:         1       0       0       0       0       0       0
  3070 ;;      Temps:          1       0       0       0       0       0       0
  3071 ;;      Totals:         2       0       0       0       0       0       0
  3072 ;;Total ram usage:        2 bytes
  3073 ;; Hardware stack levels used: 1
  3074 ;; Hardware stack levels required when called: 3
  3075 ;; This function calls:
  3076 ;;		_lcd_cmd
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text18
  3083   0012AE                     __ptext18:
  3084                           	callstack 0
  3085   0012AE                     _lcd_init:
  3086                           	callstack 27
  3087   0012AE                     
  3088                           ;LCD4b.c: 5:     char i;;LCD4b.c: 7:     TRISD = 0b00000000;
  3089   0012AE  0E00               	movlw	0
  3090   0012B0  6E95               	movwf	149,c	;volatile
  3091   0012B2                     
  3092                           ;LCD4b.c: 8:     TRISEbits.TRISE1 = 0;
  3093   0012B2  9296               	bcf	150,1,c	;volatile
  3094   0012B4                     
  3095                           ;LCD4b.c: 9:     TRISEbits.TRISE2 = 0;
  3096   0012B4  9496               	bcf	150,2,c	;volatile
  3097                           
  3098                           ;LCD4b.c: 10:     PORTD = 0b00000000;
  3099   0012B6  0E00               	movlw	0
  3100   0012B8  6E83               	movwf	131,c	;volatile
  3101   0012BA                     
  3102                           ;LCD4b.c: 11:     PORTEbits.RE2 = 0;
  3103   0012BA  9484               	bcf	132,2,c	;volatile
  3104   0012BC                     
  3105                           ;LCD4b.c: 12:     PORTEbits.RE1 = 0;
  3106   0012BC  9284               	bcf	132,1,c	;volatile
  3107   0012BE                     
  3108                           ;LCD4b.c: 14:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3109   0012BE  0E27               	movlw	39
  3110   0012C0  6E09               	movwf	??_lcd_init^0,c
  3111   0012C2  0EF5               	movlw	245
  3112   0012C4                     u1847:
  3113   0012C4  2EE8               	decfsz	wreg,f,c
  3114   0012C6  D7FE               	bra	u1847
  3115   0012C8  2E09               	decfsz	??_lcd_init^0,f,c
  3116   0012CA  D7FC               	bra	u1847
  3117   0012CC  F000               	nop	
  3118   0012CE                     
  3119                           ;LCD4b.c: 16:     for(i=0;i<=2;i++)
  3120   0012CE  0E00               	movlw	0
  3121   0012D0  6E0A               	movwf	lcd_init@i^0,c
  3122   0012D2                     l1793:
  3123                           
  3124                           ;LCD4b.c: 17:     {;LCD4b.c: 18:         lcd_cmd(0x30);
  3125   0012D2  0E30               	movlw	48
  3126   0012D4  ECDB  F007         	call	_lcd_cmd
  3127   0012D8                     
  3128                           ;LCD4b.c: 19:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3129   0012D8  0E0D               	movlw	13
  3130   0012DA  6E09               	movwf	??_lcd_init^0,c
  3131   0012DC  0EFC               	movlw	252
  3132   0012DE                     u1857:
  3133   0012DE  2EE8               	decfsz	wreg,f,c
  3134   0012E0  D7FE               	bra	u1857
  3135   0012E2  2E09               	decfsz	??_lcd_init^0,f,c
  3136   0012E4  D7FC               	bra	u1857
  3137   0012E6                     
  3138                           ;LCD4b.c: 20:     }
  3139   0012E6  2A0A               	incf	lcd_init@i^0,f,c
  3140   0012E8  0E02               	movlw	2
  3141   0012EA  640A               	cpfsgt	lcd_init@i^0,c
  3142   0012EC  EF7A  F009         	goto	u1201
  3143   0012F0  EF7C  F009         	goto	u1200
  3144   0012F4                     u1201:
  3145   0012F4  EF69  F009         	goto	l1793
  3146   0012F8                     u1200:
  3147   0012F8                     
  3148                           ;LCD4b.c: 22:     lcd_cmd(0x02);
  3149   0012F8  0E02               	movlw	2
  3150   0012FA  ECDB  F007         	call	_lcd_cmd
  3151   0012FE                     
  3152                           ;LCD4b.c: 23:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3153   0012FE  0E1A               	movlw	26
  3154   001300                     u1867:
  3155   001300  2EE8               	decfsz	wreg,f,c
  3156   001302  D7FE               	bra	u1867
  3157   001304  D000               	nop2	
  3158   001306                     
  3159                           ;LCD4b.c: 24:     lcd_cmd(0x28);
  3160   001306  0E28               	movlw	40
  3161   001308  ECDB  F007         	call	_lcd_cmd
  3162                           
  3163                           ;LCD4b.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3164   00130C  0E1A               	movlw	26
  3165   00130E                     u1877:
  3166   00130E  2EE8               	decfsz	wreg,f,c
  3167   001310  D7FE               	bra	u1877
  3168   001312  D000               	nop2	
  3169   001314                     
  3170                           ;LCD4b.c: 26:     lcd_cmd(0x01);
  3171   001314  0E01               	movlw	1
  3172   001316  ECDB  F007         	call	_lcd_cmd
  3173   00131A                     
  3174                           ;LCD4b.c: 27:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3175   00131A  0E06               	movlw	6
  3176   00131C  6E09               	movwf	??_lcd_init^0,c
  3177   00131E  0E30               	movlw	48
  3178   001320                     u1887:
  3179   001320  2EE8               	decfsz	wreg,f,c
  3180   001322  D7FE               	bra	u1887
  3181   001324  2E09               	decfsz	??_lcd_init^0,f,c
  3182   001326  D7FC               	bra	u1887
  3183   001328  D000               	nop2	
  3184                           
  3185                           ;LCD4b.c: 28:     lcd_cmd(0x0C);
  3186   00132A  0E0C               	movlw	12
  3187   00132C  ECDB  F007         	call	_lcd_cmd
  3188   001330                     
  3189                           ;LCD4b.c: 29:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3190   001330  0E1A               	movlw	26
  3191   001332                     u1897:
  3192   001332  2EE8               	decfsz	wreg,f,c
  3193   001334  D7FE               	bra	u1897
  3194   001336  D000               	nop2	
  3195   001338                     
  3196                           ;LCD4b.c: 30:     lcd_cmd(0x06);
  3197   001338  0E06               	movlw	6
  3198   00133A  ECDB  F007         	call	_lcd_cmd
  3199                           
  3200                           ;LCD4b.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3201   00133E  0E1A               	movlw	26
  3202   001340                     u1907:
  3203   001340  2EE8               	decfsz	wreg,f,c
  3204   001342  D7FE               	bra	u1907
  3205   001344  D000               	nop2	
  3206   001346  0012               	return		;funcret
  3207   001348                     __end_of_lcd_init:
  3208                           	callstack 0
  3209                           
  3210 ;; *************** function _lcd_cmd *****************
  3211 ;; Defined at:
  3212 ;;		line 40 in file "LCD4b.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  cmd             1    wreg     unsigned char 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  cmd             1    7[COMRAM] unsigned char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, status,2, status,0, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3226 ;;      Params:         0       0       0       0       0       0       0
  3227 ;;      Locals:         1       0       0       0       0       0       0
  3228 ;;      Temps:          1       0       0       0       0       0       0
  3229 ;;      Totals:         2       0       0       0       0       0       0
  3230 ;;Total ram usage:        2 bytes
  3231 ;; Hardware stack levels used: 1
  3232 ;; Hardware stack levels required when called: 2
  3233 ;; This function calls:
  3234 ;;		_set_bit
  3235 ;; This function is called by:
  3236 ;;		_lcd_init
  3237 ;;		_lcd_send_byte
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text19
  3242   000FB6                     __ptext19:
  3243                           	callstack 0
  3244   000FB6                     _lcd_cmd:
  3245                           	callstack 26
  3246                           
  3247                           ;incstack = 0
  3248                           ;lcd_cmd@cmd stored from wreg
  3249   000FB6  6E08               	movwf	lcd_cmd@cmd^0,c
  3250   000FB8                     
  3251                           ;LCD4b.c: 40: void lcd_cmd(char cmd);LCD4b.c: 41: {;LCD4b.c: 42:     PORTDbits.RD4 = set
      +                          _bit(cmd, 0b00010000);
  3252   000FB8  0E10               	movlw	16
  3253   000FBA  6E05               	movwf	set_bit@comp^0,c
  3254   000FBC  5008               	movf	lcd_cmd@cmd^0,w,c
  3255   000FBE  ECCB  F00A         	call	_set_bit
  3256   000FC2  6E07               	movwf	??_lcd_cmd^0,c
  3257   000FC4  3A07               	swapf	??_lcd_cmd^0,f,c
  3258   000FC6  5083               	movf	131,w,c	;volatile
  3259   000FC8  1807               	xorwf	??_lcd_cmd^0,w,c
  3260   000FCA  0BEF               	andlw	-17
  3261   000FCC  1807               	xorwf	??_lcd_cmd^0,w,c
  3262   000FCE  6E83               	movwf	131,c	;volatile
  3263                           
  3264                           ;LCD4b.c: 43:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3265   000FD0  0E20               	movlw	32
  3266   000FD2  6E05               	movwf	set_bit@comp^0,c
  3267   000FD4  5008               	movf	lcd_cmd@cmd^0,w,c
  3268   000FD6  ECCB  F00A         	call	_set_bit
  3269   000FDA  6E07               	movwf	??_lcd_cmd^0,c
  3270   000FDC  3A07               	swapf	??_lcd_cmd^0,f,c
  3271   000FDE  4607               	rlncf	??_lcd_cmd^0,f,c
  3272   000FE0  5083               	movf	131,w,c	;volatile
  3273   000FE2  1807               	xorwf	??_lcd_cmd^0,w,c
  3274   000FE4  0BDF               	andlw	-33
  3275   000FE6  1807               	xorwf	??_lcd_cmd^0,w,c
  3276   000FE8  6E83               	movwf	131,c	;volatile
  3277                           
  3278                           ;LCD4b.c: 44:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3279   000FEA  0E40               	movlw	64
  3280   000FEC  6E05               	movwf	set_bit@comp^0,c
  3281   000FEE  5008               	movf	lcd_cmd@cmd^0,w,c
  3282   000FF0  ECCB  F00A         	call	_set_bit
  3283   000FF4  6E07               	movwf	??_lcd_cmd^0,c
  3284   000FF6  3A07               	swapf	??_lcd_cmd^0,f,c
  3285   000FF8  4607               	rlncf	??_lcd_cmd^0,f,c
  3286   000FFA  4607               	rlncf	??_lcd_cmd^0,f,c
  3287   000FFC  5083               	movf	131,w,c	;volatile
  3288   000FFE  1807               	xorwf	??_lcd_cmd^0,w,c
  3289   001000  0BBF               	andlw	-65
  3290   001002  1807               	xorwf	??_lcd_cmd^0,w,c
  3291   001004  6E83               	movwf	131,c	;volatile
  3292                           
  3293                           ;LCD4b.c: 45:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3294   001006  0E80               	movlw	128
  3295   001008  6E05               	movwf	set_bit@comp^0,c
  3296   00100A  5008               	movf	lcd_cmd@cmd^0,w,c
  3297   00100C  ECCB  F00A         	call	_set_bit
  3298   001010  6E07               	movwf	??_lcd_cmd^0,c
  3299   001012  3207               	rrcf	??_lcd_cmd^0,f,c
  3300   001014  3207               	rrcf	??_lcd_cmd^0,f,c
  3301   001016  5083               	movf	131,w,c	;volatile
  3302   001018  1807               	xorwf	??_lcd_cmd^0,w,c
  3303   00101A  0B7F               	andlw	-129
  3304   00101C  1807               	xorwf	??_lcd_cmd^0,w,c
  3305   00101E  6E83               	movwf	131,c	;volatile
  3306   001020                     
  3307                           ;LCD4b.c: 47:     PORTEbits.RE1 = 1;
  3308   001020  8284               	bsf	132,1,c	;volatile
  3309   001022                     
  3310                           ;LCD4b.c: 48:     PORTEbits.RE1 = 0;
  3311   001022  9284               	bcf	132,1,c	;volatile
  3312   001024                     
  3313                           ;LCD4b.c: 50:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3314   001024  0E42               	movlw	66
  3315   001026                     u1917:
  3316   001026  2EE8               	decfsz	wreg,f,c
  3317   001028  D7FE               	bra	u1917
  3318   00102A  D000               	nop2	
  3319   00102C                     
  3320                           ;LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3321   00102C  0E01               	movlw	1
  3322   00102E  6E05               	movwf	set_bit@comp^0,c
  3323   001030  5008               	movf	lcd_cmd@cmd^0,w,c
  3324   001032  ECCB  F00A         	call	_set_bit
  3325   001036  6E07               	movwf	??_lcd_cmd^0,c
  3326   001038  3A07               	swapf	??_lcd_cmd^0,f,c
  3327   00103A  5083               	movf	131,w,c	;volatile
  3328   00103C  1807               	xorwf	??_lcd_cmd^0,w,c
  3329   00103E  0BEF               	andlw	-17
  3330   001040  1807               	xorwf	??_lcd_cmd^0,w,c
  3331   001042  6E83               	movwf	131,c	;volatile
  3332   001044                     
  3333                           ;LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3334   001044  0E02               	movlw	2
  3335   001046  6E05               	movwf	set_bit@comp^0,c
  3336   001048  5008               	movf	lcd_cmd@cmd^0,w,c
  3337   00104A  ECCB  F00A         	call	_set_bit
  3338   00104E  6E07               	movwf	??_lcd_cmd^0,c
  3339   001050  3A07               	swapf	??_lcd_cmd^0,f,c
  3340   001052  4607               	rlncf	??_lcd_cmd^0,f,c
  3341   001054  5083               	movf	131,w,c	;volatile
  3342   001056  1807               	xorwf	??_lcd_cmd^0,w,c
  3343   001058  0BDF               	andlw	-33
  3344   00105A  1807               	xorwf	??_lcd_cmd^0,w,c
  3345   00105C  6E83               	movwf	131,c	;volatile
  3346   00105E                     
  3347                           ;LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3348   00105E  0E04               	movlw	4
  3349   001060  6E05               	movwf	set_bit@comp^0,c
  3350   001062  5008               	movf	lcd_cmd@cmd^0,w,c
  3351   001064  ECCB  F00A         	call	_set_bit
  3352   001068  6E07               	movwf	??_lcd_cmd^0,c
  3353   00106A  3A07               	swapf	??_lcd_cmd^0,f,c
  3354   00106C  4607               	rlncf	??_lcd_cmd^0,f,c
  3355   00106E  4607               	rlncf	??_lcd_cmd^0,f,c
  3356   001070  5083               	movf	131,w,c	;volatile
  3357   001072  1807               	xorwf	??_lcd_cmd^0,w,c
  3358   001074  0BBF               	andlw	-65
  3359   001076  1807               	xorwf	??_lcd_cmd^0,w,c
  3360   001078  6E83               	movwf	131,c	;volatile
  3361   00107A                     
  3362                           ;LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3363   00107A  0E08               	movlw	8
  3364   00107C  6E05               	movwf	set_bit@comp^0,c
  3365   00107E  5008               	movf	lcd_cmd@cmd^0,w,c
  3366   001080  ECCB  F00A         	call	_set_bit
  3367   001084  6E07               	movwf	??_lcd_cmd^0,c
  3368   001086  3207               	rrcf	??_lcd_cmd^0,f,c
  3369   001088  3207               	rrcf	??_lcd_cmd^0,f,c
  3370   00108A  5083               	movf	131,w,c	;volatile
  3371   00108C  1807               	xorwf	??_lcd_cmd^0,w,c
  3372   00108E  0B7F               	andlw	-129
  3373   001090  1807               	xorwf	??_lcd_cmd^0,w,c
  3374   001092  6E83               	movwf	131,c	;volatile
  3375   001094                     
  3376                           ;LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3377   001094  8284               	bsf	132,1,c	;volatile
  3378   001096                     
  3379                           ;LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3380   001096  9284               	bcf	132,1,c	;volatile
  3381   001098  0012               	return		;funcret
  3382   00109A                     __end_of_lcd_cmd:
  3383                           	callstack 0
  3384                           
  3385 ;; *************** function _set_bit *****************
  3386 ;; Defined at:
  3387 ;;		line 34 in file "LCD4b.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  cmd             1    wreg     unsigned char 
  3390 ;;  comp            1    4[COMRAM] unsigned char 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  cmd             1    5[COMRAM] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      unsigned char 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         1       0       0       0       0       0       0
  3403 ;;      Locals:         1       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         2       0       0       0       0       0       0
  3406 ;;Total ram usage:        2 bytes
  3407 ;; Hardware stack levels used: 1
  3408 ;; Hardware stack levels required when called: 1
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_lcd_cmd
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text20
  3417   001596                     __ptext20:
  3418                           	callstack 0
  3419   001596                     _set_bit:
  3420                           	callstack 26
  3421                           
  3422                           ;incstack = 0
  3423                           ;set_bit@cmd stored from wreg
  3424   001596  6E06               	movwf	set_bit@cmd^0,c
  3425   001598                     
  3426                           ;LCD4b.c: 34: char set_bit(char cmd, char comp);LCD4b.c: 35: {;LCD4b.c: 36:     if((cmd 
      +                          & comp) >= 1) return 1;
  3427   001598  5006               	movf	set_bit@cmd^0,w,c
  3428   00159A  1405               	andwf	set_bit@comp^0,w,c
  3429   00159C  0900               	iorlw	0
  3430   00159E  B4D8               	btfsc	status,2,c
  3431   0015A0  EFD4  F00A         	goto	u931
  3432   0015A4  EFD6  F00A         	goto	u930
  3433   0015A8                     u931:
  3434   0015A8  EFD9  F00A         	goto	l1569
  3435   0015AC                     u930:
  3436   0015AC  0E01               	movlw	1
  3437   0015AE  EFDA  F00A         	goto	l90
  3438   0015B2                     l1569:
  3439   0015B2  0E00               	movlw	0
  3440   0015B4                     l90:
  3441   0015B4  0012               	return		;funcret
  3442   0015B6                     __end_of_set_bit:
  3443                           	callstack 0
  3444                           
  3445 ;; *************** function _config_TIMER0 *****************
  3446 ;; Defined at:
  3447 ;;		line 102 in file "Program_main.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;		None
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3461 ;;      Params:         0       0       0       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0
  3464 ;;      Totals:         0       0       0       0       0       0       0
  3465 ;;Total ram usage:        0 bytes
  3466 ;; Hardware stack levels used: 1
  3467 ;; Hardware stack levels required when called: 1
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_main
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text21
  3476   0015D4                     __ptext21:
  3477                           	callstack 0
  3478   0015D4                     _config_TIMER0:
  3479                           	callstack 29
  3480   0015D4                     
  3481                           ;Program_main.c: 105:     T0CON = 0X87;
  3482   0015D4  0E87               	movlw	135
  3483   0015D6  6ED5               	movwf	213,c	;volatile
  3484                           
  3485                           ;Program_main.c: 113:     TMR0H = 0XE1;
  3486   0015D8  0EE1               	movlw	225
  3487   0015DA  6ED7               	movwf	215,c	;volatile
  3488                           
  3489                           ;Program_main.c: 114:     TMR0L = 0X7B;
  3490   0015DC  0E7B               	movlw	123
  3491   0015DE  6ED6               	movwf	214,c	;volatile
  3492   0015E0  0012               	return		;funcret
  3493   0015E2                     __end_of_config_TIMER0:
  3494                           	callstack 0
  3495                           
  3496 ;; *************** function _config_IO *****************
  3497 ;; Defined at:
  3498 ;;		line 77 in file "Program_main.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         0       0       0       0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0
  3515 ;;      Totals:         0       0       0       0       0       0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used: 1
  3518 ;; Hardware stack levels required when called: 1
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text22
  3527   0015E2                     __ptext22:
  3528                           	callstack 0
  3529   0015E2                     _config_IO:
  3530                           	callstack 29
  3531   0015E2                     
  3532                           ;Program_main.c: 79:     TRISB = 0X00;
  3533   0015E2  0E00               	movlw	0
  3534   0015E4  6E93               	movwf	147,c	;volatile
  3535                           
  3536                           ;Program_main.c: 80:     PORTB = 0X01;
  3537   0015E6  0E01               	movlw	1
  3538   0015E8  6E81               	movwf	129,c	;volatile
  3539                           
  3540                           ;Program_main.c: 81:     ADCON1 = 0X0F;
  3541   0015EA  0E0F               	movlw	15
  3542   0015EC  6EC1               	movwf	193,c	;volatile
  3543   0015EE  0012               	return		;funcret
  3544   0015F0                     __end_of_config_IO:
  3545                           	callstack 0
  3546                           
  3547 ;; *************** function _config_INTERRUPT *****************
  3548 ;; Defined at:
  3549 ;;		line 90 in file "Program_main.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3563 ;;      Params:         0       0       0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0       0       0
  3566 ;;      Totals:         0       0       0       0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used: 1
  3569 ;; Hardware stack levels required when called: 1
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text23
  3578   0015FA                     __ptext23:
  3579                           	callstack 0
  3580   0015FA                     _config_INTERRUPT:
  3581                           	callstack 29
  3582   0015FA                     
  3583                           ;Program_main.c: 92:     INTCON = 0xA0;
  3584   0015FA  0EA0               	movlw	160
  3585   0015FC  6EF2               	movwf	242,c	;volatile
  3586   0015FE  0012               	return		;funcret
  3587   001600                     __end_of_config_INTERRUPT:
  3588                           	callstack 0
  3589                           
  3590 ;; *************** function _config_FOSC *****************
  3591 ;; Defined at:
  3592 ;;		line 84 in file "Program_main.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3606 ;;      Params:         0       0       0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0
  3609 ;;      Totals:         0       0       0       0       0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used: 1
  3612 ;; Hardware stack levels required when called: 1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text24
  3621   0015F0                     __ptext24:
  3622                           	callstack 0
  3623   0015F0                     _config_FOSC:
  3624                           	callstack 29
  3625   0015F0                     
  3626                           ;Program_main.c: 86:     OSCCON = 0X72;
  3627   0015F0  0E72               	movlw	114
  3628   0015F2  6ED3               	movwf	211,c	;volatile
  3629                           
  3630                           ;Program_main.c: 87:     OSCTUNE = 0X00;
  3631   0015F4  0E00               	movlw	0
  3632   0015F6  6E9B               	movwf	155,c	;volatile
  3633   0015F8  0012               	return		;funcret
  3634   0015FA                     __end_of_config_FOSC:
  3635                           	callstack 0
  3636                           
  3637 ;; *************** function _intern_TMR0 *****************
  3638 ;; Defined at:
  3639 ;;		line 125 in file "Program_main.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;		None
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         0       0       0       0       0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0
  3655 ;;      Temps:          4       0       0       0       0       0       0
  3656 ;;      Totals:         4       0       0       0       0       0       0
  3657 ;;Total ram usage:        4 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		Interrupt level 1
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	intcodelo
  3667   000018                     __pintcodelo:
  3668                           	callstack 0
  3669   000018                     _intern_TMR0:
  3670                           	callstack 22
  3671                           
  3672                           ;incstack = 0
  3673   000018  8071               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3674   00001A  CFD8 F002          	movff	status,??_intern_TMR0+1
  3675   00001E  CFE8 F003          	movff	wreg,??_intern_TMR0+2
  3676   000022  CFE0 F004          	movff	bsr,??_intern_TMR0+3
  3677   000026                     
  3678                           ;Program_main.c: 127:     if (INTCONbits.TMR0IF == 1)
  3679   000026  A4F2               	btfss	242,2,c	;volatile
  3680   000028  EF18  F000         	goto	i1u126_21
  3681   00002C  EF1A  F000         	goto	i1u126_20
  3682   000030                     i1u126_21:
  3683   000030  EF6C  F000         	goto	i1l57
  3684   000034                     i1u126_20:
  3685   000034                     
  3686                           ;Program_main.c: 128:     {;Program_main.c: 129:         timer_seg++;
  3687   000034  4A6E               	infsnz	_timer_seg^0,f,c
  3688   000036  2A6F               	incf	(_timer_seg+1)^0,f,c
  3689   000038                     
  3690                           ;Program_main.c: 130:         PORTBbits.RB0 = ~PORTBbits.RB0;
  3691   000038  B081               	btfsc	129,0,c	;volatile
  3692   00003A  EF21  F000         	goto	i1u127_21
  3693   00003E  EF24  F000         	goto	i1u127_20
  3694   000042                     i1u127_21:
  3695   000042  0E01               	movlw	1
  3696   000044  EF25  F000         	goto	i1u127_26
  3697   000048                     i1u127_20:
  3698   000048  0E00               	movlw	0
  3699   00004A                     i1u127_26:
  3700   00004A  0AFF               	xorlw	255
  3701   00004C  6E01               	movwf	??_intern_TMR0^0,c
  3702   00004E  5081               	movf	129,w,c	;volatile
  3703   000050  1801               	xorwf	??_intern_TMR0^0,w,c
  3704   000052  0BFE               	andlw	-2
  3705   000054  1801               	xorwf	??_intern_TMR0^0,w,c
  3706   000056  6E81               	movwf	129,c	;volatile
  3707   000058                     
  3708                           ;Program_main.c: 131:         if (timer_seg >= 60)
  3709   000058  BE6F               	btfsc	(_timer_seg+1)^0,7,c
  3710   00005A  EF38  F000         	goto	i1u128_21
  3711   00005E  506F               	movf	(_timer_seg+1)^0,w,c
  3712   000060  E109               	bnz	i1u128_20
  3713   000062  0E3C               	movlw	60
  3714   000064  5C6E               	subwf	_timer_seg^0,w,c
  3715   000066  A0D8               	btfss	status,0,c
  3716   000068  EF38  F000         	goto	i1u128_21
  3717   00006C  EF3A  F000         	goto	i1u128_20
  3718   000070                     i1u128_21:
  3719   000070  EF67  F000         	goto	i1l54
  3720   000074                     i1u128_20:
  3721   000074                     
  3722                           ;Program_main.c: 132:         {;Program_main.c: 133:             timer_seg = 0;
  3723   000074  0E00               	movlw	0
  3724   000076  6E6F               	movwf	(_timer_seg+1)^0,c
  3725   000078  0E00               	movlw	0
  3726   00007A  6E6E               	movwf	_timer_seg^0,c
  3727   00007C                     
  3728                           ;Program_main.c: 134:             timer_min++;
  3729   00007C  0100               	movlb	0	; () banked
  3730   00007E  4B82               	infsnz	_timer_min& (0+255),f,b
  3731   000080  2B83               	incf	(_timer_min+1)& (0+255),f,b
  3732   000082                     
  3733                           ; BSR set to: 0
  3734                           ;Program_main.c: 135:             if (timer_min >= 60)
  3735   000082  BF83               	btfsc	(_timer_min+1)& (0+255),7,b
  3736   000084  EF4D  F000         	goto	i1u129_21
  3737   000088  5183               	movf	(_timer_min+1)& (0+255),w,b
  3738   00008A  E109               	bnz	i1u129_20
  3739   00008C  0E3C               	movlw	60
  3740   00008E  5D82               	subwf	_timer_min& (0+255),w,b
  3741   000090  A0D8               	btfss	status,0,c
  3742   000092  EF4D  F000         	goto	i1u129_21
  3743   000096  EF4F  F000         	goto	i1u129_20
  3744   00009A                     i1u129_21:
  3745   00009A  EF67  F000         	goto	i1l54
  3746   00009E                     i1u129_20:
  3747   00009E                     
  3748                           ; BSR set to: 0
  3749                           ;Program_main.c: 136:             {;Program_main.c: 137:                 timer_min = 0;
  3750   00009E  0E00               	movlw	0
  3751   0000A0  6F83               	movwf	(_timer_min+1)& (0+255),b
  3752   0000A2  0E00               	movlw	0
  3753   0000A4  6F82               	movwf	_timer_min& (0+255),b
  3754   0000A6                     
  3755                           ; BSR set to: 0
  3756                           ;Program_main.c: 138:                 timer_hor++;
  3757   0000A6  4B80               	infsnz	_timer_hor& (0+255),f,b
  3758   0000A8  2B81               	incf	(_timer_hor+1)& (0+255),f,b
  3759   0000AA                     
  3760                           ; BSR set to: 0
  3761                           ;Program_main.c: 139:                 if (timer_hor >= 24)
  3762   0000AA  BF81               	btfsc	(_timer_hor+1)& (0+255),7,b
  3763   0000AC  EF61  F000         	goto	i1u130_21
  3764   0000B0  5181               	movf	(_timer_hor+1)& (0+255),w,b
  3765   0000B2  E109               	bnz	i1u130_20
  3766   0000B4  0E18               	movlw	24
  3767   0000B6  5D80               	subwf	_timer_hor& (0+255),w,b
  3768   0000B8  A0D8               	btfss	status,0,c
  3769   0000BA  EF61  F000         	goto	i1u130_21
  3770   0000BE  EF63  F000         	goto	i1u130_20
  3771   0000C2                     i1u130_21:
  3772   0000C2  EF67  F000         	goto	i1l54
  3773   0000C6                     i1u130_20:
  3774   0000C6                     
  3775                           ; BSR set to: 0
  3776                           ;Program_main.c: 140:                 {;Program_main.c: 141:                     timer_h
      +                          or = 0;
  3777   0000C6  0E00               	movlw	0
  3778   0000C8  6F81               	movwf	(_timer_hor+1)& (0+255),b
  3779   0000CA  0E00               	movlw	0
  3780   0000CC  6F80               	movwf	_timer_hor& (0+255),b
  3781   0000CE                     i1l54:
  3782                           
  3783                           ;Program_main.c: 145:         TMR0H = 0XE1;
  3784   0000CE  0EE1               	movlw	225
  3785   0000D0  6ED7               	movwf	215,c	;volatile
  3786                           
  3787                           ;Program_main.c: 146:         TMR0L = 0X7B;
  3788   0000D2  0E7B               	movlw	123
  3789   0000D4  6ED6               	movwf	214,c	;volatile
  3790   0000D6                     
  3791                           ;Program_main.c: 147:         INTCONbits.TMR0IF = 0;
  3792   0000D6  94F2               	bcf	242,2,c	;volatile
  3793   0000D8                     i1l57:
  3794   0000D8  C004  FFE0         	movff	??_intern_TMR0+3,bsr
  3795   0000DC  C003  FFE8         	movff	??_intern_TMR0+2,wreg
  3796   0000E0  C002  FFD8         	movff	??_intern_TMR0+1,status
  3797   0000E4  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3798   0000E6  0010               	retfie	
  3799   0000E8                     __end_of_intern_TMR0:
  3800                           	callstack 0
  3801                           
  3802                           	psect	rparam
  3803   000000                     
  3804                           	psect	temp
  3805   000071                     btemp:
  3806                           	callstack 0
  3807   000071                     	ds	1
  3808   000000                     int$flags	set	btemp
  3809   000000                     wtemp8	set	btemp+1
  3810   000000                     ttemp5	set	btemp+1
  3811   000000                     ttemp6	set	btemp+4
  3812   000000                     ttemp7	set	btemp+8
  3813                           
  3814                           	psect	idloc
  3815                           
  3816                           ;Config register IDLOC0 @ 0x200000
  3817                           ;	unspecified, using default values
  3818   200000                     	org	2097152
  3819   200000  FF                 	db	255
  3820                           
  3821                           ;Config register IDLOC1 @ 0x200001
  3822                           ;	unspecified, using default values
  3823   200001                     	org	2097153
  3824   200001  FF                 	db	255
  3825                           
  3826                           ;Config register IDLOC2 @ 0x200002
  3827                           ;	unspecified, using default values
  3828   200002                     	org	2097154
  3829   200002  FF                 	db	255
  3830                           
  3831                           ;Config register IDLOC3 @ 0x200003
  3832                           ;	unspecified, using default values
  3833   200003                     	org	2097155
  3834   200003  FF                 	db	255
  3835                           
  3836                           ;Config register IDLOC4 @ 0x200004
  3837                           ;	unspecified, using default values
  3838   200004                     	org	2097156
  3839   200004  FF                 	db	255
  3840                           
  3841                           ;Config register IDLOC5 @ 0x200005
  3842                           ;	unspecified, using default values
  3843   200005                     	org	2097157
  3844   200005  FF                 	db	255
  3845                           
  3846                           ;Config register IDLOC6 @ 0x200006
  3847                           ;	unspecified, using default values
  3848   200006                     	org	2097158
  3849   200006  FF                 	db	255
  3850                           
  3851                           ;Config register IDLOC7 @ 0x200007
  3852                           ;	unspecified, using default values
  3853   200007                     	org	2097159
  3854   200007  FF                 	db	255
  3855                           
  3856                           	psect	config
  3857                           
  3858                           ; Padding undefined space
  3859   300000                     	org	3145728
  3860   300000  FF                 	db	255
  3861                           
  3862                           ;Config register CONFIG1H @ 0x300001
  3863                           ;	Oscillator Selection bits
  3864                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3865                           ;	Fail-Safe Clock Monitor Enable bit
  3866                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3867                           ;	Internal/External Oscillator Switchover bit
  3868                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3869   300001                     	org	3145729
  3870   300001  08                 	db	8
  3871                           
  3872                           ;Config register CONFIG2L @ 0x300002
  3873                           ;	Power-up Timer Enable bit
  3874                           ;	PWRT = OFF, PWRT disabled
  3875                           ;	Brown-out Reset Enable bits
  3876                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3877                           ;	Brown Out Reset Voltage bits
  3878                           ;	BORV = 3, Minimum setting
  3879   300002                     	org	3145730
  3880   300002  19                 	db	25
  3881                           
  3882                           ;Config register CONFIG2H @ 0x300003
  3883                           ;	Watchdog Timer Enable bit
  3884                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3885                           ;	Watchdog Timer Postscale Select bits
  3886                           ;	WDTPS = 32768, 1:32768
  3887   300003                     	org	3145731
  3888   300003  1E                 	db	30
  3889                           
  3890                           ; Padding undefined space
  3891   300004                     	org	3145732
  3892   300004  FF                 	db	255
  3893                           
  3894                           ;Config register CONFIG3H @ 0x300005
  3895                           ;	CCP2 MUX bit
  3896                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3897                           ;	PORTB A/D Enable bit
  3898                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3899                           ;	Low-Power Timer1 Oscillator Enable bit
  3900                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3901                           ;	MCLR Pin Enable bit
  3902                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3903   300005                     	org	3145733
  3904   300005  81                 	db	129
  3905                           
  3906                           ;Config register CONFIG4L @ 0x300006
  3907                           ;	Stack Full/Underflow Reset Enable bit
  3908                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3909                           ;	Single-Supply ICSP Enable bit
  3910                           ;	LVP = OFF, Single-Supply ICSP disabled
  3911                           ;	Extended Instruction Set Enable bit
  3912                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3913                           ;	Background Debugger Enable bit
  3914                           ;	DEBUG = 0x1, unprogrammed default
  3915   300006                     	org	3145734
  3916   300006  81                 	db	129
  3917                           
  3918                           ; Padding undefined space
  3919   300007                     	org	3145735
  3920   300007  FF                 	db	255
  3921                           
  3922                           ;Config register CONFIG5L @ 0x300008
  3923                           ;	Code Protection bit
  3924                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3925                           ;	Code Protection bit
  3926                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3927                           ;	Code Protection bit
  3928                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3929                           ;	Code Protection bit
  3930                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3931   300008                     	org	3145736
  3932   300008  0F                 	db	15
  3933                           
  3934                           ;Config register CONFIG5H @ 0x300009
  3935                           ;	Boot Block Code Protection bit
  3936                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3937                           ;	Data EEPROM Code Protection bit
  3938                           ;	CPD = OFF, Data EEPROM not code-protected
  3939   300009                     	org	3145737
  3940   300009  C0                 	db	192
  3941                           
  3942                           ;Config register CONFIG6L @ 0x30000A
  3943                           ;	Write Protection bit
  3944                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3945                           ;	Write Protection bit
  3946                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3947                           ;	Write Protection bit
  3948                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3949                           ;	Write Protection bit
  3950                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3951   30000A                     	org	3145738
  3952   30000A  0F                 	db	15
  3953                           
  3954                           ;Config register CONFIG6H @ 0x30000B
  3955                           ;	Configuration Register Write Protection bit
  3956                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3957                           ;	Boot Block Write Protection bit
  3958                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3959                           ;	Data EEPROM Write Protection bit
  3960                           ;	WRTD = OFF, Data EEPROM not write-protected
  3961   30000B                     	org	3145739
  3962   30000B  E0                 	db	224
  3963                           
  3964                           ;Config register CONFIG7L @ 0x30000C
  3965                           ;	Table Read Protection bit
  3966                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3967                           ;	Table Read Protection bit
  3968                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3969                           ;	Table Read Protection bit
  3970                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3971                           ;	Table Read Protection bit
  3972                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3973   30000C                     	org	3145740
  3974   30000C  0F                 	db	15
  3975                           
  3976                           ;Config register CONFIG7H @ 0x30000D
  3977                           ;	Boot Block Table Read Protection bit
  3978                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3979   30000D                     	org	3145741
  3980   30000D  40                 	db	64
  3981                           tosu	equ	0xFFF
  3982                           tosh	equ	0xFFE
  3983                           tosl	equ	0xFFD
  3984                           stkptr	equ	0xFFC
  3985                           pclatu	equ	0xFFB
  3986                           pclath	equ	0xFFA
  3987                           pcl	equ	0xFF9
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           indf0	equ	0xFEF
  3995                           postinc0	equ	0xFEE
  3996                           postdec0	equ	0xFED
  3997                           preinc0	equ	0xFEC
  3998                           plusw0	equ	0xFEB
  3999                           fsr0h	equ	0xFEA
  4000                           fsr0l	equ	0xFE9
  4001                           wreg	equ	0xFE8
  4002                           indf1	equ	0xFE7
  4003                           postinc1	equ	0xFE6
  4004                           postdec1	equ	0xFE5
  4005                           preinc1	equ	0xFE4
  4006                           plusw1	equ	0xFE3
  4007                           fsr1h	equ	0xFE2
  4008                           fsr1l	equ	0xFE1
  4009                           bsr	equ	0xFE0
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           preinc2	equ	0xFDC
  4014                           plusw2	equ	0xFDB
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8

Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         59
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     112
    BANK0           128     13      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S938$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S885$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S885$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[16]), STR_3(CODE[16]), bufferLCD(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _intern_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _intern_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intern_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intern_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intern_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intern_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intern_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12292
                        _config_FOSC
                   _config_INTERRUPT
                          _config_IO
                      _config_TIMER0
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    9629
                                             95 COMRAM    10     0     10
                                              0 BANK0     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    9137
                                             87 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    8643
                                             66 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5075
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2775
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1357
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1404
                                             10 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     259
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     281
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                             10 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              8 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              8 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              6 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_TIMER0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _intern_TMR0                                          4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_INTERRUPT
   _config_IO
   _config_TIMER0
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 _intern_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      41       5       50.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      70       1       88.9%
BITBIGSFRhlh        25      0       0      20        0.0%
BITBIGSFRhhhlhh     1A      0       0      17        0.0%
BITBIGSFRhhl        11      0       0      19        0.0%
BITBIGSFRlhh         E      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      16        0.0%
BITBIGSFRhllh        4      0       0      21        0.0%
BITBIGSFRhhhll       1      0       0      18        0.0%
BITBIGSFRlhl         1      0       0      24        0.0%
BITBIGSFRhlll        1      0       0      22        0.0%
BITBIGSFRll          1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1      26        0.0%
DATA                 0      0      B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 24 11:10:40 2023

                      l42 15F8                        l45 15FE                        l39 15EE  
                      l48 15E0                        l90 15B4                        l94 1098  
                      l86 1346                        l97 15D2            ?_lcd_send_byte 0009  
                      bsr 000FE0       ___wmul@multiplicand 0007                       l112 1594  
                     l109 12AC                       l226 0D06                       l239 0E6A  
                     l820 11EA                       l901 0FAC                       l822 120C  
                     l830 06D4                       l831 071A                       l904 0FB4  
                     l817 11A8                       l930 1162                       l907 1548  
                     l915 1498                       l844 08E4                       l828 06CC  
                     l941 1600                       l790 1404                       l872 1452  
                     l938 14DC                       l866 0B7E                       l876 1514  
                     l879 151C                       u930 15AC                       u931 15A8  
                     _abs 14DE                       _pad 1164                       wreg 000FE8  
                    l2001 0D4C                      l2011 0DB4                      l2003 0D6C  
                    ?_abs 0017                      l2021 0E2A                      l2013 0DE2  
                    l2005 0D8A                      l2101 07BA                      l2023 0E4A  
                    l2015 0E02                      l2007 0D92                      l2031 1186  
                    l2111 0876                      l2103 07C0                      l2017 0E14  
                    l2009 0DA6                      l2041 11CC                      l2033 1194  
                    l2121 08C4                      l2113 0890                      l2105 0824  
                    l2201 0ABE                      l2131 0E84                      l2019 0E1A  
                    l2043 11F8                      l2035 11A0                      l2027 1164  
                    l2107 083E                      l2115 089E                      l2203 0B14  
                    l2211 0B56                      l2061 1492                      l2053 1454  
                    l2141 0F18                      l2133 0EA0                      l2125 0E6C  
                    l2045 14DE                      l2037 11B4                      l2029 1172  
                    l2117 08AE                      l2109 085C                      l2221 1406  
                    l2055 1458                      l2151 0F90                      l2135 0ED4  
                    l2127 0E80                      l2047 14F8                      l2039 11C8  
                    l2119 08B4                      l2071 0676                      l2207 0B44  
                    l2223 1412                      l2231 13B4                      l2049 151E  
                    l2057 146C                      l2137 0EDC                      l2081 06DC  
                    l2073 0696                      l2065 0632                      l2161 0918  
                    l2225 142E                      l2233 13C6                      l2059 148E  
                    l2147 0F4E                      l2139 0EE4                      l2091 0716  
                    l2083 06EC                      l2075 06A4                      l2067 0652  
                    l2171 0948                      l2163 0924                      l2227 144A  
                    l2235 13CE                      l2251 139A                      l2243 1348  
                    l2149 0F7E                      l2093 0722                      l2085 06F2  
                    l2077 06A6                      l2069 0666                      l2181 09BE  
                    l2165 0928                      l2157 08E6                      l2237 13D6  
                    l2245 1358                      l2095 072C                      l2087 0702  
                    l2079 06C0                      l2183 09F4                      l2175 0954  
                    l2167 0934                      l2159 090A                      l2239 13F2  
                    l2247 135C                      l1561 1598                      l1801 12F8  
                    l2097 0732                      l2089 070E                      l2193 0A3E  
                    l2185 0A02                      l2169 0936                      l2177 0988  
                    l2249 136E                      l1563 15AC                      l1811 1330  
                    l1803 12FE                      l2099 07B4                      l2195 0A76  
                    l2187 0A10                      l2179 099A                      l1813 1338  
                    l1805 1306                      l1821 123C                      l2197 0A86  
                    l2189 0A30                      l2293 097A                      l1671 1024  
                    l1807 1314                      l1751 15C2                      l1823 1242  
                    l1815 1210                      l2295 0F02                      l2199 0AA2  
                    l1569 15B2                      l1681 1094                      l1673 102C  
                    l1665 0FB8                      l1809 131A                      l1753 15CA  
                    l1825 1250                      l1817 1220                      l1921 10AC  
                    l1771 15FA                      l1683 1096                      l1675 1044  
                    l1667 1020                      l1755 15CC                      l1827 1278  
                    l1819 122A                      l1923 10BE                      l1773 15D4  
                    l1677 105E                      l1669 1022                      l1781 12BA  
                    l1749 15B8                      l1829 127C                      l1941 1570  
                    l1925 10C8                      l1933 149A                      l1767 15E2  
                    l1679 107A                      l1783 12BC                      l1775 12AE  
                    l1943 158C                      l1951 0B92                      l1927 10E6  
                    l1919 109A                      l1935 14A6                      l1769 15F0  
                    l1793 12D2                      l1785 12BE                      l1777 12B2  
                    l1961 0BE8                      l1953 0BB2                      l1929 111C  
                    l1937 14B8                      l1795 12D8                      l1787 12CE  
                    l1779 12B4                      l1971 0C3C                      l1963 0BF4  
                    l1955 0BB6                      l1947 0B80                      l1939 14BC  
                    l1797 12E6                      l1981 0CB0                      l1973 0C4E  
                    l1965 0C12                      l1957 0BC4                      l1949 0B84  
                    ?_pad 0015                      l1799 12E8                      l1975 0C7C  
                    l1967 0C1A                      l1983 0CB6                      l1959 0BE4  
                    l1991 0D08                      l1985 0CC6                      l1977 0C9C  
                    l1969 0C2E                      l1993 0D0C                      l1987 0CE6  
                    l1979 0C9E                      l1995 0D1A                      l1997 0D3A  
                    l1999 0D3E                      STR_1 0601                      STR_2 0622  
                    STR_3 0612                      u1200 12F8                      u1201 12F4  
                    u1210 1220                      u1211 121C                      u1220 123C  
                    u1221 1238                      u1230 1270                      u1310 10AC  
                    u1311 10A8                      u1240 129C                      u1400 0C3C  
                    u1320 10BE                      u1401 0C38                      u1321 10BA  
                    u1250 12AC                      u1410 0C7C                      u1330 10E6  
                    u1251 12A8                      u1411 0C78                      u1331 10E2  
                    u1420 0CC6                      u1340 111C                      u1500 1194  
                    u1237 1266                      u1421 0CC2                      u1341 1118  
                    u1501 1190                      u1430 0D1A                      u1350 14DC  
                    u1510 11EA                      u1247 1292                      u1431 0D16  
                    u1351 14D8                      u1511 11E6                      u1360 0B92  
                    u1440 0D4C                      u1520 11F8                      u1600 0676  
                    u1185 15C0                      u1361 0B8E                      u1441 0D48  
                    u1521 11F4                      u1601 0672                      u1186 15C2  
                    u1370 0BC4                      u1450 0D8A                      u1530 14F8  
                    u1610 06A4                      u1371 0BC0                      u1451 0D86  
                    u1531 14F4                      u1611 06A0                      u1540 1542  
                    u1460 0DB4                      u1700 08AE                      u1620 06C0  
                    u1541 153C                      u1381 0BEE                      u1461 0DB0  
                    u1701 08AA                      u1621 06BC                      u1550 1544  
                    u1710 0EA0                      u1390 0C12                      u1470 0DE2  
                    u1630 06EC                      u1711 0E9C                      u1391 0C0E  
                    u1471 0DDE                      u1631 06E8                      u1560 146C  
                    u1720 0ED0                      u1480 0E2A                      u1640 0702  
                    u1800 0AA2                      u1561 1468                      u1721 0ECC  
                    u1481 0E26                      u1641 06FE                      u1801 0A9E  
                    u1570 148E                      u1730 0F7E                      u1490 1172  
                    u1650 083E                      u1810 0ABE                      u1571 148A  
                    u1731 0F7A                      u1491 116E                      u1651 083A  
                    u1811 0ABA                      u1740 0F90                      u1660 085C  
                    u1580 0662                      u1820 144A                      u1741 0F8C  
                    u1661 0858                      u1581 065C                      u1821 1446  
                    u1670 0876                      u1590 0664                      u1750 090A  
                    u1671 0872                      u1751 0906                      u1680 0890  
                    u1760 099A                      u1681 088C                      u1761 0996  
                    u1690 089E                      u1770 09BE                      u1907 1340  
                    u1691 089A                      u1771 09BA                      u1780 0A02  
                    u1917 1026                      u1837 15C4                      u1781 09FE  
                    u1790 0A76                      u1847 12C4                      u1791 0A72  
                    u1857 12DE                      u1867 1300                      u1877 130E  
                    u1887 1320                      u1897 1332                      i1l54 00CE  
                    i1l57 00D8                      abs@a 0017                      _dbuf 0084  
                    _atoi 0E6C                      _main 1348                      _dtoa 0632  
                    _prec 006C                      pad@i 001C                      pad@p 0019  
                    fsr1h 000FE2                      fsr2h 000FDA                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      pad@w 001E  
                    fsr2l 000FD9                      btemp 0071                      prodh 000FF4  
                    prodl 000FF3                      start 00E8              ___param_bank 000000  
                   ??_abs 0019                     ??_pad 001B           __end_of___aodiv 0D08  
                   ?_atoi 000B                     ?_main 0001                     ?_dtoa 0020  
         __end_of___aomod 0E6C           ??_config_TIMER0 0005                     _T0CON 000FD5  
            vfpfcnvrt@fmt 0045                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _PORTB 000F81                     _PORTD 000F83                     _TRISB 000F93  
                   _TRISD 000F95           __end_of_lcd_cmd 109A                     _flags 0070  
                   _fputc 109A                     _fputs 149A           __end_of_isdigit 154A  
                   atoi@n 0012                     pad@fp 0015                     atoi@s 000B  
                   _width 006A                     _putch 1600                     dtoa@d 0022  
                   dtoa@i 0041                     dtoa@n 0038                     dtoa@p 0034  
                   dtoa@s 0040                     dtoa@w 0036           __end_of_isspace 149A  
         __end_of_set_bit 15B6                     tablat 000FF5                     ttemp5 0072  
                   ttemp6 0075                     ttemp7 0079                     status 000FD8  
            ?_intern_TMR0 0001                     wtemp8 0072           __end_of_sprintf 1406  
            lcd_write@end 000E              lcd_write@col 000B              lcd_write@lin 000F  
            lcd_write@str 000C           __initialization 154A              __end_of_atoi 0FB6  
            __end_of_main 13B4              __end_of_dtoa 08E6           ??_lcd_send_byte 000A  
                  ??_atoi 000D                    ??_main 006A                    ??_dtoa 002A  
           __activetblptr 000002          _config_INTERRUPT 15FA                    _ADCON1 000FC1  
                  ?_fputc 0005                    ?_fputs 000E                    ?_putch 0001  
                  i1l1851 0074                    i1l1843 0026                    i1l1861 00AA  
                  i1l1853 007C                    i1l1845 0034                    i1l1863 00C6  
                  i1l1855 0082                    i1l1847 0038                    i1l1865 00D6  
                  i1l1857 009E                    i1l1849 0058                    i1l1859 00A6  
                  _INTCON 000FF2                    _OSCCON 000FD3             vfpfcnvrt@done 0054  
            vfprintf@cfmt 005E          __end_of_lcd_init 1348                 ??___aodiv 0015  
               ??___aomod 0015                    ___wmul 1570                    clear_0 1550  
                  clear_1 155C                    isa$std 000001                    pad@buf 0017  
               ??_lcd_cmd 0007                    dtoa@fp 0020                    fputc@c 0005  
                  fputs@c 0012                    fputs@i 0013                    fputs@s 000E  
               ??_isdigit 0007              __mediumconst 0000                 ??_isspace 0007  
               ??_set_bit 0006                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    putch@c 0001          __end_of_vfprintf 1454  
               ??_sprintf 006A                __accesstop 0080   __end_of__initialization 1562  
           ___rparam_used 000001            __pcstackCOMRAM 0001             __end_of_fputc 1164  
           __end_of_fputs 14DE             __end_of_putch 1602                   ??_fputc 0009  
                 ??_fputs 0012                   ??_putch 0005                __pbssBANK0 0080  
                 ?___wmul 0005        lcd_send_byte@level 000A                   _OSCTUNE 000F9B  
               ?_lcd_init 0001  __end_of_config_INTERRUPT 1600                   __Hparam 0000  
                 __Lparam 0000         __end_of_config_IO 15F0                   ___aodiv 0B80  
                 ___aomod 0D08         __end_of_lcd_write 12AE                 ?_vfprintf 0058  
             set_bit@comp 0005              __psmallconst 0600                   __pcinit 154A  
                 __ramtop 0600                   __ptext0 1348                   __ptext1 13B4  
                 __ptext2 1406                   __ptext3 08E6                   __ptext4 0632  
                 __ptext5 1164                   __ptext6 149A                   __ptext7 109A  
                 __ptext8 1600                   __ptext9 14DE                   _lcd_cmd 0FB6  
                 _isdigit 151E     __end_of_config_TIMER0 15E2                   _isspace 1454  
                 _set_bit 1596                   atoi@neg 0010                   _sprintf 13B4  
              ??_lcd_init 0009      end_of_initialization 1562                   fputc@fp 0007  
           __Lmediumconst 0000                   fputs@fp 0010         __end_of_vfpfcnvrt 0B80  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE          vfpfcnvrt@convarg 004C                ??_vfprintf 005E  
   __end_of_lcd_send_byte 15D4                 _PORTBbits 000F81                 _PORTDbits 000F83  
               _PORTEbits 000F84                 _TRISEbits 000F96                lcd_cmd@cmd 0008  
           ??_config_FOSC 0005               vfpfcnvrt@ap 0047               vfpfcnvrt@cp 0056  
             vfpfcnvrt@fp 0043            __end_of___wmul 1596       start_initialization 154A  
             __end_of_abs 151E               __end_of_pad 120E               vfprintf@fmt 005A  
     __end_of_config_FOSC 15FA                  ??___wmul 0009               __pbssCOMRAM 006A  
           __pcstackBANK0 00B4          ___aodiv@dividend 0005             ??_intern_TMR0 0001  
       ?_config_INTERRUPT 0001        ??_config_INTERRUPT 0005                  ?___aodiv 0005  
                ?___aomod 0005          ___aodiv@quotient 0017                 _bufferLCD 00A4  
             __pintcodelo 0018                 _config_IO 15E2         lcd_send_byte@data 0009  
                ?_lcd_cmd 0001                 _lcd_write 120E               __smallconst 0600  
                ?_isdigit 0005                  ?_isspace 0005                  ?_set_bit 0005  
              set_bit@cmd 0006                  ?_sprintf 0060            ___wmul@product 0009  
             _config_FOSC 15F0                  i1u130_20 00C6                  i1u130_21 00C2  
                i1u126_20 0034                  i1u126_21 0030                  i1u127_20 0048  
                i1u127_21 0042                  i1u127_26 004A                  i1u128_20 0074  
                i1u128_21 0070                  i1u129_20 009E                  i1u129_21 009A  
     __end_of_intern_TMR0 00E8                 _timer_hor 0080                 _timer_min 0082  
               _timer_seg 006E                 _vfpfcnvrt 08E6                ?_config_IO 0001  
              ?_lcd_write 000B         ___wmul@multiplier 0005                 lcd_init@i 000A  
            _isspace$1025 0009                  __Hrparam 0000                vfprintf@ap 005C  
                __Lrparam 0000                vfprintf@fp 0058                ?_vfpfcnvrt 0043  
         ___aodiv@divisor 000D           ___aodiv@counter 0015                sprintf@fmt 0062  
                _dtoa$976 0032                  __ptext10 0D08                  __ptext11 0B80  
                __ptext20 1596                  __ptext12 0E6C                  __ptext21 15D4  
                __ptext13 1454                  __ptext22 15E2                  __ptext14 151E  
                __ptext23 15FA                  __ptext15 1570                  __ptext24 15F0  
                __ptext16 120E                  __ptext17 15B6                  __ptext18 12AE  
                __ptext19 0FB6                  _lcd_init 12AE               _intern_TMR0 0018  
                isa$xinst 000000                  int$flags 0071                  _vfprintf 1406  
             ??_config_IO 0005               ??_lcd_write 000E          ___aomod@dividend 0005  
              _INTCONbits 000FF2             _config_TIMER0 15D4                  isdigit@c 0005  
                intlevel1 0000                 sprintf@ap 00B4                  isspace@c 0005  
         ___aomod@divisor 000D               ??_vfpfcnvrt 0049           ___aomod@counter 0015  
           _lcd_send_byte 15B6                  sprintf@f 00B6                  sprintf@s 0060  
          ?_config_TIMER0 0001              ___aodiv@sign 0016              ?_config_FOSC 0001  
            ___aomod@sign 0016  
