

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 24 11:09:31 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Version 2.40
    39                           ; Generated 17/11/2021 GMT
    40                           ; 
    41                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73   000000                     _PORTDbits	set	3971
    74   000000                     _TMR0L	set	4054
    75   000000                     _PORTBbits	set	3969
    76   000000                     _INTCONbits	set	4082
    77   000000                     _PORTB	set	3969
    78   000000                     _TRISB	set	3987
    79   000000                     _TRISD	set	3989
    80   000000                     _OSCTUNE	set	3995
    81   000000                     _ADCON1	set	4033
    82   000000                     _PORTD	set	3971
    83   000000                     _OSCCON	set	4051
    84   000000                     _T0CON	set	4053
    85   000000                     _INTCON	set	4082
    86   000000                     _TMR0	set	4054
    87   000000                     _TRISEbits	set	3990
    88   000000                     _PORTEbits	set	3972
    89                           
    90                           	psect	smallconst
    91   000600                     __psmallconst:
    92                           	callstack 0
    93   000600  00                 	db	0
    94   000601                     STR_4:
    95   000601  20                 	db	32
    96   000602  20                 	db	32
    97   000603  20                 	db	32
    98   000604  20                 	db	32
    99   000605  20                 	db	32
   100   000606  20                 	db	32
   101   000607  20                 	db	32
   102   000608  20                 	db	32
   103   000609  20                 	db	32
   104   00060A  20                 	db	32
   105   00060B  20                 	db	32
   106   00060C  20                 	db	32
   107   00060D  20                 	db	32
   108   00060E  20                 	db	32
   109   00060F  20                 	db	32
   110   000610  00                 	db	0
   111   000611                     STR_2:
   112   000611  43                 	db	67	;'C'
   113   000612  4F                 	db	79	;'O'
   114   000613  4E                 	db	78	;'N'
   115   000614  54                 	db	84	;'T'
   116   000615  41                 	db	65	;'A'
   117   000616  47                 	db	71	;'G'
   118   000617  45                 	db	69	;'E'
   119   000618  4D                 	db	77	;'M'
   120   000619  3A                 	db	58	;':'
   121   00061A  20                 	db	32
   122   00061B  30                 	db	48	;'0'
   123   00061C  30                 	db	48	;'0'
   124   00061D  00                 	db	0
   125   00061E                     STR_3:
   126   00061E  25                 	db	37
   127   00061F  64                 	db	100	;'d'
   128   000620  53                 	db	83	;'S'
   129   000621  45                 	db	69	;'E'
   130   000622  47                 	db	71	;'G'
   131   000623  20                 	db	32
   132   000624  00                 	db	0
   133   000625                     STR_1:
   134   000625  54                 	db	84	;'T'
   135   000626  49                 	db	73	;'I'
   136   000627  4D                 	db	77	;'M'
   137   000628  45                 	db	69	;'E'
   138   000629  52                 	db	82	;'R'
   139   00062A  30                 	db	48	;'0'
   140   00062B  00                 	db	0
   141   00062C  00                 	db	0	; dummy byte at the end
   142   000000                     
   143                           ; #config settings
   144                           
   145                           	psect	cinit
   146   0011D2                     __pcinit:
   147                           	callstack 0
   148   0011D2                     start_initialization:
   149                           	callstack 0
   150   0011D2                     __initialization:
   151                           	callstack 0
   152                           
   153                           ; Clear objects allocated to BANK0 (48 bytes)
   154   0011D2  EE00  F080         	lfsr	0,__pbssBANK0
   155   0011D6  0E30               	movlw	48
   156   0011D8                     clear_0:
   157   0011D8  6AEE               	clrf	postinc0,c
   158   0011DA  06E8               	decf	wreg,f,c
   159   0011DC  E1FD               	bnz	clear_0
   160                           
   161                           ; Clear objects allocated to COMRAM (11 bytes)
   162   0011DE  EE00  F070         	lfsr	0,__pbssCOMRAM
   163   0011E2  0E0B               	movlw	11
   164   0011E4                     clear_1:
   165   0011E4  6AEE               	clrf	postinc0,c
   166   0011E6  06E8               	decf	wreg,f,c
   167   0011E8  E1FD               	bnz	clear_1
   168   0011EA                     end_of_initialization:
   169                           	callstack 0
   170   0011EA                     __end_of__initialization:
   171                           	callstack 0
   172   0011EA  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   173   0011EC  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   174   0011EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   175   0011F0  6EF8               	movwf	tblptru,c
   176   0011F2  0100               	movlb	0
   177   0011F4  EF22  F008         	goto	_main	;jump to C main() function
   178                           
   179                           	psect	bssCOMRAM
   180   000070                     __pbssCOMRAM:
   181                           	callstack 0
   182   000070                     _width:
   183                           	callstack 0
   184   000070                     	ds	2
   185   000072                     _prec:
   186                           	callstack 0
   187   000072                     	ds	2
   188   000074                     _counter:
   189                           	callstack 0
   190   000074                     	ds	2
   191   000076                     _timer_1000ms:
   192                           	callstack 0
   193   000076                     	ds	2
   194   000078                     _timer_500ms:
   195                           	callstack 0
   196   000078                     	ds	2
   197   00007A                     _flags:
   198                           	callstack 0
   199   00007A                     	ds	1
   200                           
   201                           	psect	bssBANK0
   202   000080                     __pbssBANK0:
   203                           	callstack 0
   204   000080                     _dbuf:
   205                           	callstack 0
   206   000080                     	ds	32
   207   0000A0                     _bufferLCD:
   208                           	callstack 0
   209   0000A0                     	ds	16
   210                           
   211                           	psect	cstackCOMRAM
   212   000001                     __pcstackCOMRAM:
   213                           	callstack 0
   214   000001                     ??_intern_TMR0:
   215   000001                     
   216                           ; 1 bytes @ 0x0
   217   000001                     	ds	4
   218   000005                     ?___aodiv:
   219                           	callstack 0
   220   000005                     ?___aomod:
   221                           	callstack 0
   222   000005                     set_bit@comp:
   223                           	callstack 0
   224   000005                     fputc@c:
   225                           	callstack 0
   226   000005                     ___aodiv@dividend:
   227                           	callstack 0
   228   000005                     ___aomod@dividend:
   229                           	callstack 0
   230                           
   231                           ; 8 bytes @ 0x4
   232   000005                     	ds	1
   233   000006                     set_bit@cmd:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x5
   237   000006                     	ds	1
   238   000007                     ??_lcd_cmd:
   239   000007                     fputc@fp:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x6
   243   000007                     	ds	1
   244   000008                     lcd_cmd@cmd:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x7
   248   000008                     	ds	1
   249   000009                     ??_lcd_init:
   250   000009                     ??_fputc:
   251   000009                     lcd_send_byte@data:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0x8
   255   000009                     	ds	1
   256   00000A                     lcd_init@i:
   257                           	callstack 0
   258   00000A                     lcd_send_byte@level:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x9
   262   00000A                     	ds	1
   263   00000B                     lcd_write@col:
   264                           	callstack 0
   265                           
   266                           ; 1 bytes @ 0xA
   267   00000B                     	ds	1
   268   00000C                     lcd_write@str:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0xB
   272   00000C                     	ds	1
   273   00000D                     ___aodiv@divisor:
   274                           	callstack 0
   275   00000D                     ___aomod@divisor:
   276                           	callstack 0
   277                           
   278                           ; 8 bytes @ 0xC
   279   00000D                     	ds	1
   280   00000E                     lcd_write@end:
   281                           	callstack 0
   282   00000E                     fputs@s:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0xD
   286   00000E                     	ds	1
   287   00000F                     lcd_write@lin:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0xE
   291   00000F                     	ds	1
   292   000010                     fputs@fp:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0xF
   296   000010                     	ds	2
   297   000012                     fputs@c:
   298                           	callstack 0
   299                           
   300                           ; 1 bytes @ 0x11
   301   000012                     	ds	1
   302   000013                     fputs@i:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x12
   306   000013                     	ds	2
   307   000015                     ___aodiv@counter:
   308                           	callstack 0
   309   000015                     ___aomod@counter:
   310                           	callstack 0
   311   000015                     pad@fp:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315   000015                     	ds	1
   316   000016                     ___aodiv@sign:
   317                           	callstack 0
   318   000016                     ___aomod@sign:
   319                           	callstack 0
   320                           
   321                           ; 1 bytes @ 0x15
   322   000016                     	ds	1
   323   000017                     ?_abs:
   324                           	callstack 0
   325   000017                     pad@buf:
   326                           	callstack 0
   327   000017                     abs@a:
   328                           	callstack 0
   329   000017                     ___aodiv@quotient:
   330                           	callstack 0
   331                           
   332                           ; 8 bytes @ 0x16
   333   000017                     	ds	2
   334   000019                     ??_abs:
   335   000019                     pad@p:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x18
   339   000019                     	ds	2
   340   00001B                     ??_pad:
   341                           
   342                           ; 1 bytes @ 0x1A
   343   00001B                     	ds	1
   344   00001C                     pad@i:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x1B
   348   00001C                     	ds	2
   349   00001E                     pad@w:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x1D
   353   00001E                     	ds	2
   354   000020                     dtoa@fp:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x1F
   358   000020                     	ds	2
   359   000022                     dtoa@d:
   360                           	callstack 0
   361                           
   362                           ; 8 bytes @ 0x21
   363   000022                     	ds	8
   364   00002A                     ??_dtoa:
   365                           
   366                           ; 1 bytes @ 0x29
   367   00002A                     	ds	8
   368   000032                     _dtoa$967:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x31
   372   000032                     	ds	2
   373   000034                     dtoa@p:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x33
   377   000034                     	ds	2
   378   000036                     dtoa@w:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x35
   382   000036                     	ds	2
   383   000038                     dtoa@n:
   384                           	callstack 0
   385                           
   386                           ; 8 bytes @ 0x37
   387   000038                     	ds	8
   388   000040                     dtoa@i:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x3F
   392   000040                     	ds	2
   393   000042                     dtoa@s:
   394                           	callstack 0
   395                           
   396                           ; 1 bytes @ 0x41
   397   000042                     	ds	1
   398   000043                     vfpfcnvrt@fp:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x42
   402   000043                     	ds	2
   403   000045                     vfpfcnvrt@fmt:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x44
   407   000045                     	ds	2
   408   000047                     vfpfcnvrt@ap:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0x46
   412   000047                     	ds	2
   413   000049                     ??_vfpfcnvrt:
   414                           
   415                           ; 1 bytes @ 0x48
   416   000049                     	ds	2
   417   00004B                     vfpfcnvrt@convarg:
   418                           	callstack 0
   419                           
   420                           ; 8 bytes @ 0x4A
   421   00004B                     	ds	8
   422   000053                     vfpfcnvrt@cp:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x52
   426   000053                     	ds	2
   427   000055                     ?_vfprintf:
   428                           	callstack 0
   429   000055                     vfprintf@fp:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x54
   433   000055                     	ds	2
   434   000057                     vfprintf@fmt:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x56
   438   000057                     	ds	2
   439   000059                     vfprintf@ap:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x58
   443   000059                     	ds	2
   444   00005B                     vfprintf@cfmt:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x5A
   448   00005B                     	ds	2
   449   00005D                     ?_sprintf:
   450                           	callstack 0
   451   00005D                     sprintf@s:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x5C
   455   00005D                     	ds	2
   456   00005F                     sprintf@fmt:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x5E
   460   00005F                     	ds	4
   461   000063                     sprintf@ap:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x62
   465   000063                     	ds	2
   466   000065                     sprintf@f:
   467                           	callstack 0
   468                           
   469                           ; 11 bytes @ 0x64
   470   000065                     	ds	11
   471   000070                     
   472                           ; 1 bytes @ 0x6F
   473 ;;
   474 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   475 ;;
   476 ;; *************** function _main *****************
   477 ;; Defined at:
   478 ;;		line 149 in file "Program_main.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   492 ;;      Params:         0       0       0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0       0       0
   494 ;;      Temps:          0       0       0       0       0       0       0
   495 ;;      Totals:         0       0       0       0       0       0       0
   496 ;;Total ram usage:        0 bytes
   497 ;; Hardware stack levels required when called: 9
   498 ;; This function calls:
   499 ;;		_config_FOSC
   500 ;;		_config_INTERRUPT
   501 ;;		_config_IO
   502 ;;		_config_TIMER0
   503 ;;		_lcd_init
   504 ;;		_lcd_write
   505 ;;		_sprintf
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text0
   512   001044                     __ptext0:
   513                           	callstack 0
   514   001044                     _main:
   515                           	callstack 22
   516   001044                     
   517                           ;Program_main.c: 151:     config_FOSC();
   518   001044  EC29  F009         	call	_config_FOSC	;wreg free
   519                           
   520                           ;Program_main.c: 152:     config_IO();
   521   001048  EC22  F009         	call	_config_IO	;wreg free
   522                           
   523                           ;Program_main.c: 153:     config_INTERRUPT();
   524   00104C  EC2E  F009         	call	_config_INTERRUPT	;wreg free
   525                           
   526                           ;Program_main.c: 154:     config_TIMER0();
   527   001050  EC1B  F009         	call	_config_TIMER0	;wreg free
   528   001054                     
   529                           ;Program_main.c: 155:     lcd_init();
   530   001054  EC98  F007         	call	_lcd_init	;wreg free
   531   001058                     
   532                           ;Program_main.c: 157:     lcd_write(1,6, "TIMER0");
   533   001058  0E06               	movlw	6
   534   00105A  6E0B               	movwf	lcd_write@col^0,c
   535   00105C  0E25               	movlw	low STR_1
   536   00105E  6E0C               	movwf	lcd_write@str^0,c
   537   001060  0E06               	movlw	high STR_1
   538   001062  6E0D               	movwf	(lcd_write@str+1)^0,c
   539   001064  0E01               	movlw	1
   540   001066  EC48  F007         	call	_lcd_write
   541   00106A                     
   542                           ;Program_main.c: 158:     lcd_write(2,2, "CONTAGEM: 00");
   543   00106A  0E02               	movlw	2
   544   00106C  6E0B               	movwf	lcd_write@col^0,c
   545   00106E  0E11               	movlw	low STR_2
   546   001070  6E0C               	movwf	lcd_write@str^0,c
   547   001072  0E06               	movlw	high STR_2
   548   001074  6E0D               	movwf	(lcd_write@str+1)^0,c
   549   001076  0E02               	movlw	2
   550   001078  EC48  F007         	call	_lcd_write
   551   00107C                     l1580:
   552                           
   553                           ;Program_main.c: 161:     {;Program_main.c: 162:         sprintf(bufferLCD, "%dSEG ", co
      +                          unter);
   554   00107C  0EA0               	movlw	low _bufferLCD
   555   00107E  6E5D               	movwf	sprintf@s^0,c
   556   001080  0E00               	movlw	high _bufferLCD
   557   001082  6E5E               	movwf	(sprintf@s+1)^0,c
   558   001084  0E1E               	movlw	low STR_3
   559   001086  6E5F               	movwf	sprintf@fmt^0,c
   560   001088  0E06               	movlw	high STR_3
   561   00108A  6E60               	movwf	(sprintf@fmt+1)^0,c
   562   00108C  C074  F061         	movff	_counter,?_sprintf+4
   563   001090  C075  F062         	movff	_counter+1,?_sprintf+5
   564   001094  EC59  F008         	call	_sprintf	;wreg free
   565   001098                     
   566                           ;Program_main.c: 163:         lcd_write(2, 12, bufferLCD);
   567   001098  0E0C               	movlw	12
   568   00109A  6E0B               	movwf	lcd_write@col^0,c
   569   00109C  0EA0               	movlw	low _bufferLCD
   570   00109E  6E0C               	movwf	lcd_write@str^0,c
   571   0010A0  0E00               	movlw	high _bufferLCD
   572   0010A2  6E0D               	movwf	(lcd_write@str+1)^0,c
   573   0010A4  0E02               	movlw	2
   574   0010A6  EC48  F007         	call	_lcd_write
   575   0010AA  EF3E  F008         	goto	l1580
   576   0010AE  EF71  F000         	goto	start
   577   0010B2                     __end_of_main:
   578                           	callstack 0
   579                           
   580 ;; *************** function _sprintf *****************
   581 ;; Defined at:
   582 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  s               2   92[COMRAM] PTR unsigned char 
   585 ;;		 -> bufferLCD(16), 
   586 ;;  fmt             2   94[COMRAM] PTR const unsigned char 
   587 ;;		 -> STR_3(7), 
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  f              11  100[COMRAM] struct _IO_FILE
   590 ;;  ap              2   98[COMRAM] PTR void [1]
   591 ;;		 -> ?_sprintf(2), 
   592 ;;  ret             2    0        int 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  2   92[COMRAM] int 
   595 ;; Registers used:
   596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   602 ;;      Params:         6       0       0       0       0       0       0
   603 ;;      Locals:        13       0       0       0       0       0       0
   604 ;;      Temps:          0       0       0       0       0       0       0
   605 ;;      Totals:        19       0       0       0       0       0       0
   606 ;;Total ram usage:       19 bytes
   607 ;; Hardware stack levels used: 1
   608 ;; Hardware stack levels required when called: 8
   609 ;; This function calls:
   610 ;;		_vfprintf
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text1
   617   0010B2                     __ptext1:
   618                           	callstack 0
   619   0010B2                     _sprintf:
   620                           	callstack 22
   621   0010B2  0E61               	movlw	low (?_sprintf+4)
   622   0010B4  6E63               	movwf	sprintf@ap^0,c
   623   0010B6  0E00               	movlw	high (?_sprintf+4)
   624   0010B8  6E64               	movwf	(sprintf@ap+1)^0,c
   625   0010BA  C05D  F065         	movff	sprintf@s,sprintf@f
   626   0010BE  C05E  F066         	movff	sprintf@s+1,sprintf@f+1
   627   0010C2  0E00               	movlw	0
   628   0010C4  6E69               	movwf	(sprintf@f+4)^0,c
   629   0010C6  0E00               	movlw	0
   630   0010C8  6E68               	movwf	(sprintf@f+3)^0,c
   631   0010CA  0E00               	movlw	0
   632   0010CC  6E6F               	movwf	(sprintf@f+10)^0,c
   633   0010CE  0E00               	movlw	0
   634   0010D0  6E6E               	movwf	(sprintf@f+9)^0,c
   635   0010D2  0E65               	movlw	low sprintf@f
   636   0010D4  6E55               	movwf	vfprintf@fp^0,c
   637   0010D6  0E00               	movlw	high sprintf@f
   638   0010D8  6E56               	movwf	(vfprintf@fp+1)^0,c
   639   0010DA  C05F  F057         	movff	sprintf@fmt,vfprintf@fmt
   640   0010DE  C060  F058         	movff	sprintf@fmt+1,vfprintf@fmt+1
   641   0010E2  0E63               	movlw	low sprintf@ap
   642   0010E4  6E59               	movwf	vfprintf@ap^0,c
   643   0010E6  0E00               	movlw	high sprintf@ap
   644   0010E8  6E5A               	movwf	(vfprintf@ap+1)^0,c
   645   0010EA  EC80  F008         	call	_vfprintf	;wreg free
   646   0010EE  5068               	movf	(sprintf@f+3)^0,w,c
   647   0010F0  245D               	addwf	sprintf@s^0,w,c
   648   0010F2  6ED9               	movwf	fsr2l,c
   649   0010F4  5069               	movf	(sprintf@f+4)^0,w,c
   650   0010F6  205E               	addwfc	(sprintf@s+1)^0,w,c
   651   0010F8  6EDA               	movwf	fsr2h,c
   652   0010FA  0E00               	movlw	0
   653   0010FC  6EDF               	movwf	indf2,c
   654   0010FE  0012               	return		;funcret
   655   001100                     __end_of_sprintf:
   656                           	callstack 0
   657                           
   658 ;; *************** function _vfprintf *****************
   659 ;; Defined at:
   660 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  fp              2   84[COMRAM] PTR struct _IO_FILE
   663 ;;		 -> sprintf@f(11), 
   664 ;;  fmt             2   86[COMRAM] PTR const unsigned char 
   665 ;;		 -> STR_3(7), 
   666 ;;  ap              2   88[COMRAM] PTR PTR void 
   667 ;;		 -> sprintf@ap(2), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  cfmt            2   90[COMRAM] PTR unsigned char 
   670 ;;		 -> STR_3(7), 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  2   84[COMRAM] int 
   673 ;; Registers used:
   674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   680 ;;      Params:         6       0       0       0       0       0       0
   681 ;;      Locals:         2       0       0       0       0       0       0
   682 ;;      Temps:          0       0       0       0       0       0       0
   683 ;;      Totals:         8       0       0       0       0       0       0
   684 ;;Total ram usage:        8 bytes
   685 ;; Hardware stack levels used: 1
   686 ;; Hardware stack levels required when called: 7
   687 ;; This function calls:
   688 ;;		_vfpfcnvrt
   689 ;; This function is called by:
   690 ;;		_sprintf
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text2
   695   001100                     __ptext2:
   696                           	callstack 0
   697   001100                     _vfprintf:
   698                           	callstack 22
   699   001100                     
   700                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   701   001100  C057  F05B         	movff	vfprintf@fmt,vfprintf@cfmt
   702   001104  C058  F05C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   703                           
   704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   705   001108  EF94  F008         	goto	l1490
   706   00110C                     l1488:
   707                           
   708                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   709   00110C  C055  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   710   001110  C056  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   711   001114  0E5B               	movlw	low vfprintf@cfmt
   712   001116  6E45               	movwf	vfpfcnvrt@fmt^0,c
   713   001118  0E00               	movlw	high vfprintf@cfmt
   714   00111A  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
   715   00111C  C059  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   716   001120  C05A  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   717   001124  ECCB  F005         	call	_vfpfcnvrt	;wreg free
   718   001128                     l1490:
   719                           
   720                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   721   001128  C05B  FFF6         	movff	vfprintf@cfmt,tblptrl
   722   00112C  C05C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   723   001130                     	if	0	;tblptru may be non-zero
   724   001130                     	endif
   725   001130                     	if	0	;tblptru may be non-zero
   726   001130                     	endif
   727   001130  0008               	tblrd		*
   728   001132  50F5               	movf	tablat,w,c
   729   001134  0900               	iorlw	0
   730   001136  A4D8               	btfss	status,2,c
   731   001138  EFA0  F008         	goto	u851
   732   00113C  EFA2  F008         	goto	u850
   733   001140                     u851:
   734   001140  EF86  F008         	goto	l1488
   735   001144                     u850:
   736   001144                     
   737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   738   001144  0E00               	movlw	0
   739   001146  6E56               	movwf	(?_vfprintf+1)^0,c
   740   001148  0E00               	movlw	0
   741   00114A  6E55               	movwf	?_vfprintf^0,c
   742   00114C  0012               	return		;funcret
   743   00114E                     __end_of_vfprintf:
   744                           	callstack 0
   745                           
   746 ;; *************** function _vfpfcnvrt *****************
   747 ;; Defined at:
   748 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   751 ;;		 -> sprintf@f(11), 
   752 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   753 ;;		 -> vfprintf@cfmt(2), 
   754 ;;  ap              2   70[COMRAM] PTR PTR void 
   755 ;;		 -> sprintf@ap(2), 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  convarg         8   74[COMRAM] struct .
   758 ;;  cp              2   82[COMRAM] PTR unsigned char 
   759 ;;		 -> STR_3(7), 
   760 ;;  i               2    0        int 
   761 ;;  done            2    0        int 
   762 ;;  c               1    0        unsigned char 
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   772 ;;      Params:         6       0       0       0       0       0       0
   773 ;;      Locals:        10       0       0       0       0       0       0
   774 ;;      Temps:          2       0       0       0       0       0       0
   775 ;;      Totals:        18       0       0       0       0       0       0
   776 ;;Total ram usage:       18 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 6
   779 ;; This function calls:
   780 ;;		_dtoa
   781 ;;		_fputc
   782 ;; This function is called by:
   783 ;;		_vfprintf
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text3
   788   000B96                     __ptext3:
   789                           	callstack 0
   790   000B96                     _vfpfcnvrt:
   791                           	callstack 22
   792   000B96                     
   793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   794   000B96  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795   000B9A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796   000B9E  CFDE FFF6          	movff	postinc2,tblptrl
   797   000BA2  CFDD FFF7          	movff	postdec2,tblptrh
   798   000BA6                     	if	0	;tblptru may be non-zero
   799   000BA6                     	endif
   800   000BA6                     	if	0	;tblptru may be non-zero
   801   000BA6                     	endif
   802   000BA6  0008               	tblrd		*
   803   000BA8  50F5               	movf	tablat,w,c
   804   000BAA  0A25               	xorlw	37
   805   000BAC  A4D8               	btfss	status,2,c
   806   000BAE  EFDB  F005         	goto	u811
   807   000BB2  EFDD  F005         	goto	u810
   808   000BB6                     u811:
   809   000BB6  EF5C  F006         	goto	l1472
   810   000BBA                     u810:
   811   000BBA                     
   812                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   813   000BBA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   814   000BBE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   815   000BC2  2ADE               	incf	postinc2,f,c
   816   000BC4  0E00               	movlw	0
   817   000BC6  22DD               	addwfc	postdec2,f,c
   818   000BC8                     
   819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   820   000BC8  0E00               	movlw	0
   821   000BCA  6E71               	movwf	(_width+1)^0,c
   822   000BCC  0E00               	movlw	0
   823   000BCE  6E70               	movwf	_width^0,c
   824   000BD0  C070  F07A         	movff	_width,_flags
   825   000BD4                     
   826                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   827   000BD4  6872               	setf	_prec^0,c
   828   000BD6  6873               	setf	(_prec+1)^0,c
   829   000BD8                     
   830                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
   831   000BD8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   832   000BDC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   833   000BE0  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
   834   000BE4  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
   835   000BE8                     
   836                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
   837   000BE8  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   838   000BEC  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   839   000BF0                     	if	0	;tblptru may be non-zero
   840   000BF0                     	endif
   841   000BF0                     	if	0	;tblptru may be non-zero
   842   000BF0                     	endif
   843   000BF0  0008               	tblrd		*
   844   000BF2  50F5               	movf	tablat,w,c
   845   000BF4  0A64               	xorlw	100
   846   000BF6  B4D8               	btfsc	status,2,c
   847   000BF8  EF00  F006         	goto	u821
   848   000BFC  EF02  F006         	goto	u820
   849   000C00                     u821:
   850   000C00  EF10  F006         	goto	l1462
   851   000C04                     u820:
   852   000C04  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   853   000C08  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   854   000C0C                     	if	0	;tblptru may be non-zero
   855   000C0C                     	endif
   856   000C0C                     	if	0	;tblptru may be non-zero
   857   000C0C                     	endif
   858   000C0C  0008               	tblrd		*
   859   000C0E  50F5               	movf	tablat,w,c
   860   000C10  0A69               	xorlw	105
   861   000C12  A4D8               	btfss	status,2,c
   862   000C14  EF0E  F006         	goto	u831
   863   000C18  EF10  F006         	goto	u830
   864   000C1C                     u831:
   865   000C1C  EF53  F006         	goto	l1468
   866   000C20                     u830:
   867   000C20                     l1462:
   868                           
   869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
   870   000C20  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   871   000C24  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   872   000C28  CFDF F049          	movff	indf2,??_vfpfcnvrt
   873   000C2C  0E02               	movlw	2
   874   000C2E  26DE               	addwf	postinc2,f,c
   875   000C30  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
   876   000C34  0E00               	movlw	0
   877   000C36  22DD               	addwfc	postdec2,f,c
   878   000C38  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
   879   000C3C  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   880   000C40  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
   881   000C44  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
   882   000C48  0E00               	movlw	0
   883   000C4A  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
   884   000C4C  0EFF               	movlw	-1
   885   000C4E  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
   886   000C50  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
   887   000C52  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
   888   000C54  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
   889   000C56  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
   890   000C58  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
   891                           
   892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
   893   000C5A  0E01               	movlw	1
   894   000C5C  2453               	addwf	vfpfcnvrt@cp^0,w,c
   895   000C5E  6E49               	movwf	??_vfpfcnvrt^0,c
   896   000C60  0E00               	movlw	0
   897   000C62  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
   898   000C64  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
   899   000C66  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   900   000C6A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   901   000C6E  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
   902   000C72  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
   903   000C76                     
   904                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
   905   000C76  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
   906   000C7A  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   907   000C7E  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
   908   000C82  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
   909   000C86  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
   910   000C8A  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
   911   000C8E  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
   912   000C92  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
   913   000C96  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
   914   000C9A  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
   915   000C9E  EC17  F003         	call	_dtoa	;wreg free
   916   000CA2  EF70  F006         	goto	l842
   917   000CA6                     l1468:
   918                           
   919                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
   920   000CA6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   921   000CAA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   922   000CAE  2ADE               	incf	postinc2,f,c
   923   000CB0  0E00               	movlw	0
   924   000CB2  22DD               	addwfc	postdec2,f,c
   925   000CB4  EF70  F006         	goto	l842
   926   000CB8                     l1472:
   927                           
   928                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
   929   000CB8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   930   000CBC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   931   000CC0  CFDE FFF6          	movff	postinc2,tblptrl
   932   000CC4  CFDD FFF7          	movff	postdec2,tblptrh
   933   000CC8                     	if	0	;tblptru may be non-zero
   934   000CC8                     	endif
   935   000CC8                     	if	0	;tblptru may be non-zero
   936   000CC8                     	endif
   937   000CC8  0008               	tblrd		*
   938   000CCA  50F5               	movf	tablat,w,c
   939   000CCC  6E05               	movwf	fputc@c^0,c
   940   000CCE  6A06               	clrf	(fputc@c+1)^0,c
   941   000CD0  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
   942   000CD4  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   943   000CD8  ECE3  F006         	call	_fputc	;wreg free
   944   000CDC  EF53  F006         	goto	l1468
   945   000CE0                     l842:
   946   000CE0  0012               	return		;funcret
   947   000CE2                     __end_of_vfpfcnvrt:
   948                           	callstack 0
   949                           
   950 ;; *************** function _dtoa *****************
   951 ;; Defined at:
   952 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
   955 ;;		 -> sprintf@f(11), 
   956 ;;  d               8   33[COMRAM] long long 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  n               8   55[COMRAM] long long 
   959 ;;  i               2   63[COMRAM] int 
   960 ;;  w               2   53[COMRAM] int 
   961 ;;  p               2   51[COMRAM] int 
   962 ;;  s               1   65[COMRAM] unsigned char 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   972 ;;      Params:        10       0       0       0       0       0       0
   973 ;;      Locals:        17       0       0       0       0       0       0
   974 ;;      Temps:          8       0       0       0       0       0       0
   975 ;;      Totals:        35       0       0       0       0       0       0
   976 ;;Total ram usage:       35 bytes
   977 ;; Hardware stack levels used: 1
   978 ;; Hardware stack levels required when called: 5
   979 ;; This function calls:
   980 ;;		___aodiv
   981 ;;		___aomod
   982 ;;		_abs
   983 ;;		_pad
   984 ;; This function is called by:
   985 ;;		_vfpfcnvrt
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text4
   990   00062E                     __ptext4:
   991                           	callstack 0
   992   00062E                     _dtoa:
   993                           	callstack 22
   994   00062E                     
   995                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
   996   00062E  C022  F038         	movff	dtoa@d,dtoa@n
   997   000632  C023  F039         	movff	dtoa@d+1,dtoa@n+1
   998   000636  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
   999   00063A  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  1000   00063E  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  1001   000642  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  1002   000646  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  1003   00064A  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  1004   00064E                     
  1005                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1006   00064E  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1007   000650  EF2C  F003         	goto	u711
  1008   000654  EF2F  F003         	goto	u710
  1009   000658                     u711:
  1010   000658  0E01               	movlw	1
  1011   00065A  EF30  F003         	goto	u720
  1012   00065E                     u710:
  1013   00065E  0E00               	movlw	0
  1014   000660                     u720:
  1015   000660  6E42               	movwf	dtoa@s^0,c
  1016   000662                     
  1017                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1018   000662  5042               	movf	dtoa@s^0,w,c
  1019   000664  B4D8               	btfsc	status,2,c
  1020   000666  EF37  F003         	goto	u731
  1021   00066A  EF39  F003         	goto	u730
  1022   00066E                     u731:
  1023   00066E  EF49  F003         	goto	l1384
  1024   000672                     u730:
  1025   000672                     
  1026                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1027   000672  1E3F               	comf	(dtoa@n+7)^0,f,c
  1028   000674  1E3E               	comf	(dtoa@n+6)^0,f,c
  1029   000676  1E3D               	comf	(dtoa@n+5)^0,f,c
  1030   000678  1E3C               	comf	(dtoa@n+4)^0,f,c
  1031   00067A  1E3B               	comf	(dtoa@n+3)^0,f,c
  1032   00067C  1E3A               	comf	(dtoa@n+2)^0,f,c
  1033   00067E  1E39               	comf	(dtoa@n+1)^0,f,c
  1034   000680  6C38               	negf	dtoa@n^0,c
  1035   000682  0E00               	movlw	0
  1036   000684  2239               	addwfc	(dtoa@n+1)^0,f,c
  1037   000686  223A               	addwfc	(dtoa@n+2)^0,f,c
  1038   000688  223B               	addwfc	(dtoa@n+3)^0,f,c
  1039   00068A  223C               	addwfc	(dtoa@n+4)^0,f,c
  1040   00068C  223D               	addwfc	(dtoa@n+5)^0,f,c
  1041   00068E  223E               	addwfc	(dtoa@n+6)^0,f,c
  1042   000690  223F               	addwfc	(dtoa@n+7)^0,f,c
  1043   000692                     l1384:
  1044                           
  1045                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1046   000692  BE73               	btfsc	(_prec+1)^0,7,c
  1047   000694  EF56  F003         	goto	u740
  1048   000698  5073               	movf	(_prec+1)^0,w,c
  1049   00069A  E106               	bnz	u741
  1050   00069C  0472               	decf	_prec^0,w,c
  1051   00069E  B0D8               	btfsc	status,0,c
  1052   0006A0  EF54  F003         	goto	u741
  1053   0006A4  EF56  F003         	goto	u740
  1054   0006A8                     u741:
  1055   0006A8  EF5C  F003         	goto	l821
  1056   0006AC                     u740:
  1057   0006AC  0E00               	movlw	0
  1058   0006AE  6E35               	movwf	(dtoa@p+1)^0,c
  1059   0006B0  0E01               	movlw	1
  1060   0006B2  6E34               	movwf	dtoa@p^0,c
  1061   0006B4  EF60  F003         	goto	l823
  1062   0006B8                     l821:
  1063   0006B8  C072  F034         	movff	_prec,dtoa@p
  1064   0006BC  C073  F035         	movff	_prec+1,dtoa@p+1
  1065   0006C0                     l823:
  1066                           
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1068   0006C0  C070  F036         	movff	_width,dtoa@w
  1069   0006C4  C071  F037         	movff	_width+1,dtoa@w+1
  1070   0006C8                     
  1071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1072   0006C8  5042               	movf	dtoa@s^0,w,c
  1073   0006CA  B4D8               	btfsc	status,2,c
  1074   0006CC  EF6A  F003         	goto	u751
  1075   0006D0  EF6C  F003         	goto	u750
  1076   0006D4                     u751:
  1077   0006D4  EF83  F003         	goto	l824
  1078   0006D8                     u750:
  1079   0006D8                     
  1080                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1081   0006D8  0636               	decf	dtoa@w^0,f,c
  1082   0006DA  A0D8               	btfss	status,0,c
  1083   0006DC  0637               	decf	(dtoa@w+1)^0,f,c
  1084   0006DE                     
  1085                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1086   0006DE  5042               	movf	dtoa@s^0,w,c
  1087   0006E0  A4D8               	btfss	status,2,c
  1088   0006E2  EF75  F003         	goto	u761
  1089   0006E6  EF77  F003         	goto	u760
  1090   0006EA                     u761:
  1091   0006EA  EF7D  F003         	goto	l1396
  1092   0006EE                     u760:
  1093   0006EE  0E00               	movlw	0
  1094   0006F0  6E33               	movwf	(_dtoa$967+1)^0,c
  1095   0006F2  0E2B               	movlw	43
  1096   0006F4  6E32               	movwf	_dtoa$967^0,c
  1097   0006F6  EF81  F003         	goto	l1398
  1098   0006FA                     l1396:
  1099   0006FA  0E00               	movlw	0
  1100   0006FC  6E33               	movwf	(_dtoa$967+1)^0,c
  1101   0006FE  0E2D               	movlw	45
  1102   000700  6E32               	movwf	_dtoa$967^0,c
  1103   000702                     l1398:
  1104   000702  C032  F042         	movff	_dtoa$967,dtoa@s
  1105   000706                     l824:
  1106                           
  1107                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1108   000706  0E00               	movlw	0
  1109   000708  6E41               	movwf	(dtoa@i+1)^0,c
  1110   00070A  0E1F               	movlw	31
  1111   00070C  6E40               	movwf	dtoa@i^0,c
  1112   00070E                     
  1113                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1114   00070E  0E00               	movlw	0
  1115   000710  0100               	movlb	0	; () banked
  1116   000712  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1117                           
  1118                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1119   000714  EF08  F004         	goto	l1412
  1120   000718                     l1402:
  1121                           
  1122                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1123   000718  0640               	decf	dtoa@i^0,f,c
  1124   00071A  A0D8               	btfss	status,0,c
  1125   00071C  0641               	decf	(dtoa@i+1)^0,f,c
  1126   00071E                     
  1127                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1128   00071E  0E80               	movlw	low _dbuf
  1129   000720  2440               	addwf	dtoa@i^0,w,c
  1130   000722  6ED9               	movwf	fsr2l,c
  1131   000724  0E00               	movlw	high _dbuf
  1132   000726  2041               	addwfc	(dtoa@i+1)^0,w,c
  1133   000728  6EDA               	movwf	fsr2h,c
  1134   00072A  C038  F005         	movff	dtoa@n,___aomod@dividend
  1135   00072E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1136   000732  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1137   000736  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1138   00073A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1139   00073E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1140   000742  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1141   000746  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1142   00074A  0E0A               	movlw	10
  1143   00074C  6E0D               	movwf	___aomod@divisor^0,c
  1144   00074E  0E00               	movlw	0
  1145   000750  6E0E               	movwf	(___aomod@divisor+1)^0,c
  1146   000752  0E00               	movlw	0
  1147   000754  6E0F               	movwf	(___aomod@divisor+2)^0,c
  1148   000756  0E00               	movlw	0
  1149   000758  6E10               	movwf	(___aomod@divisor+3)^0,c
  1150   00075A  0E00               	movlw	0
  1151   00075C  6E11               	movwf	(___aomod@divisor+4)^0,c
  1152   00075E  0E00               	movlw	0
  1153   000760  6E12               	movwf	(___aomod@divisor+5)^0,c
  1154   000762  0E00               	movlw	0
  1155   000764  6E13               	movwf	(___aomod@divisor+6)^0,c
  1156   000766  0E00               	movlw	0
  1157   000768  6E14               	movwf	(___aomod@divisor+7)^0,c
  1158   00076A  EC19  F005         	call	___aomod	;wreg free
  1159   00076E  C005  F02A         	movff	?___aomod,??_dtoa
  1160   000772  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1161   000776  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1162   00077A  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1163   00077E  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1164   000782  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1165   000786  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1166   00078A  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1167   00078E  C02A  F017         	movff	??_dtoa,abs@a
  1168   000792  C02B  F018         	movff	??_dtoa+1,abs@a+1
  1169   000796  ECC9  F008         	call	_abs	;wreg free
  1170   00079A  5017               	movf	?_abs^0,w,c
  1171   00079C  0F30               	addlw	48
  1172   00079E  6EDF               	movwf	indf2,c
  1173   0007A0                     
  1174                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1175   0007A0  0634               	decf	dtoa@p^0,f,c
  1176   0007A2  A0D8               	btfss	status,0,c
  1177   0007A4  0635               	decf	(dtoa@p+1)^0,f,c
  1178   0007A6                     
  1179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1180   0007A6  0636               	decf	dtoa@w^0,f,c
  1181   0007A8  A0D8               	btfss	status,0,c
  1182   0007AA  0637               	decf	(dtoa@w+1)^0,f,c
  1183   0007AC                     
  1184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1185   0007AC  C038  F005         	movff	dtoa@n,___aodiv@dividend
  1186   0007B0  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1187   0007B4  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1188   0007B8  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1189   0007BC  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1190   0007C0  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1191   0007C4  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1192   0007C8  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1193   0007CC  0E0A               	movlw	10
  1194   0007CE  6E0D               	movwf	___aodiv@divisor^0,c
  1195   0007D0  0E00               	movlw	0
  1196   0007D2  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  1197   0007D4  0E00               	movlw	0
  1198   0007D6  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  1199   0007D8  0E00               	movlw	0
  1200   0007DA  6E10               	movwf	(___aodiv@divisor+3)^0,c
  1201   0007DC  0E00               	movlw	0
  1202   0007DE  6E11               	movwf	(___aodiv@divisor+4)^0,c
  1203   0007E0  0E00               	movlw	0
  1204   0007E2  6E12               	movwf	(___aodiv@divisor+5)^0,c
  1205   0007E4  0E00               	movlw	0
  1206   0007E6  6E13               	movwf	(___aodiv@divisor+6)^0,c
  1207   0007E8  0E00               	movlw	0
  1208   0007EA  6E14               	movwf	(___aodiv@divisor+7)^0,c
  1209   0007EC  EC55  F004         	call	___aodiv	;wreg free
  1210   0007F0  C005  F038         	movff	?___aodiv,dtoa@n
  1211   0007F4  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  1212   0007F8  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  1213   0007FC  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  1214   000800  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  1215   000804  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  1216   000808  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  1217   00080C  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  1218   000810                     l1412:
  1219                           
  1220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1221   000810  BE41               	btfsc	(dtoa@i+1)^0,7,c
  1222   000812  EF13  F004         	goto	u771
  1223   000816  5041               	movf	(dtoa@i+1)^0,w,c
  1224   000818  E108               	bnz	u770
  1225   00081A  0440               	decf	dtoa@i^0,w,c
  1226   00081C  A0D8               	btfss	status,0,c
  1227   00081E  EF13  F004         	goto	u771
  1228   000822  EF15  F004         	goto	u770
  1229   000826                     u771:
  1230   000826  EF31  F004         	goto	l1418
  1231   00082A                     u770:
  1232   00082A  5038               	movf	dtoa@n^0,w,c
  1233   00082C  1039               	iorwf	(dtoa@n+1)^0,w,c
  1234   00082E  103A               	iorwf	(dtoa@n+2)^0,w,c
  1235   000830  103B               	iorwf	(dtoa@n+3)^0,w,c
  1236   000832  103C               	iorwf	(dtoa@n+4)^0,w,c
  1237   000834  103D               	iorwf	(dtoa@n+5)^0,w,c
  1238   000836  103E               	iorwf	(dtoa@n+6)^0,w,c
  1239   000838  103F               	iorwf	(dtoa@n+7)^0,w,c
  1240   00083A  A4D8               	btfss	status,2,c
  1241   00083C  EF22  F004         	goto	u781
  1242   000840  EF24  F004         	goto	u780
  1243   000844                     u781:
  1244   000844  EF8C  F003         	goto	l1402
  1245   000848                     u780:
  1246   000848  BE35               	btfsc	(dtoa@p+1)^0,7,c
  1247   00084A  EF31  F004         	goto	u790
  1248   00084E  5035               	movf	(dtoa@p+1)^0,w,c
  1249   000850  E106               	bnz	u791
  1250   000852  0434               	decf	dtoa@p^0,w,c
  1251   000854  B0D8               	btfsc	status,0,c
  1252   000856  EF2F  F004         	goto	u791
  1253   00085A  EF31  F004         	goto	u790
  1254   00085E                     u791:
  1255   00085E  EF8C  F003         	goto	l1402
  1256   000862                     u790:
  1257   000862                     l1418:
  1258                           
  1259                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1260   000862  5042               	movf	dtoa@s^0,w,c
  1261   000864  B4D8               	btfsc	status,2,c
  1262   000866  EF37  F004         	goto	u801
  1263   00086A  EF39  F004         	goto	u800
  1264   00086E                     u801:
  1265   00086E  EF44  F004         	goto	l1424
  1266   000872                     u800:
  1267   000872                     
  1268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1269   000872  0640               	decf	dtoa@i^0,f,c
  1270   000874  A0D8               	btfss	status,0,c
  1271   000876  0641               	decf	(dtoa@i+1)^0,f,c
  1272   000878                     
  1273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1274   000878  0E80               	movlw	low _dbuf
  1275   00087A  2440               	addwf	dtoa@i^0,w,c
  1276   00087C  6ED9               	movwf	fsr2l,c
  1277   00087E  0E00               	movlw	high _dbuf
  1278   000880  2041               	addwfc	(dtoa@i+1)^0,w,c
  1279   000882  6EDA               	movwf	fsr2h,c
  1280   000884  C042  FFDF         	movff	dtoa@s,indf2
  1281   000888                     l1424:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1284   000888  C020  F015         	movff	dtoa@fp,pad@fp
  1285   00088C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1286   000890  0E80               	movlw	low _dbuf
  1287   000892  2440               	addwf	dtoa@i^0,w,c
  1288   000894  6E17               	movwf	pad@buf^0,c
  1289   000896  0E00               	movlw	high _dbuf
  1290   000898  2041               	addwfc	(dtoa@i+1)^0,w,c
  1291   00089A  6E18               	movwf	(pad@buf+1)^0,c
  1292   00089C  C036  F019         	movff	dtoa@w,pad@p
  1293   0008A0  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1294   0008A4  ECE5  F007         	call	_pad	;wreg free
  1295   0008A8  0012               	return		;funcret
  1296   0008AA                     __end_of_dtoa:
  1297                           	callstack 0
  1298                           
  1299 ;; *************** function _pad *****************
  1300 ;; Defined at:
  1301 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1304 ;;		 -> sprintf@f(11), 
  1305 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1306 ;;		 -> dbuf(32), 
  1307 ;;  p               2   24[COMRAM] int 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  w               2   29[COMRAM] int 
  1310 ;;  i               2   27[COMRAM] int 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1320 ;;      Params:         6       0       0       0       0       0       0
  1321 ;;      Locals:         4       0       0       0       0       0       0
  1322 ;;      Temps:          1       0       0       0       0       0       0
  1323 ;;      Totals:        11       0       0       0       0       0       0
  1324 ;;Total ram usage:       11 bytes
  1325 ;; Hardware stack levels used: 1
  1326 ;; Hardware stack levels required when called: 4
  1327 ;; This function calls:
  1328 ;;		_fputc
  1329 ;;		_fputs
  1330 ;; This function is called by:
  1331 ;;		_dtoa
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text5
  1336   000FCA                     __ptext5:
  1337                           	callstack 0
  1338   000FCA                     _pad:
  1339                           	callstack 22
  1340   000FCA                     
  1341                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  1342   000FCA  BE1A               	btfsc	(pad@p+1)^0,7,c
  1343   000FCC  EFEA  F007         	goto	u671
  1344   000FD0  EFEC  F007         	goto	u670
  1345   000FD4                     u671:
  1346   000FD4  EFF2  F007         	goto	l1350
  1347   000FD8                     u670:
  1348   000FD8  C019  F01E         	movff	pad@p,pad@w
  1349   000FDC  C01A  F01F         	movff	pad@p+1,pad@w+1
  1350   000FE0  EFF6  F007         	goto	l812
  1351   000FE4                     l1350:
  1352   000FE4  0E00               	movlw	0
  1353   000FE6  6E1F               	movwf	(pad@w+1)^0,c
  1354   000FE8  0E00               	movlw	0
  1355   000FEA  6E1E               	movwf	pad@w^0,c
  1356   000FEC                     l812:
  1357                           
  1358                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1359   000FEC  0E00               	movlw	0
  1360   000FEE  6E1D               	movwf	(pad@i+1)^0,c
  1361   000FF0  0E00               	movlw	0
  1362   000FF2  6E1C               	movwf	pad@i^0,c
  1363                           
  1364                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1365   000FF4  EF08  F008         	goto	l1356
  1366   000FF8                     l1352:
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1369   000FF8  0E00               	movlw	0
  1370   000FFA  6E06               	movwf	(fputc@c+1)^0,c
  1371   000FFC  0E20               	movlw	32
  1372   000FFE  6E05               	movwf	fputc@c^0,c
  1373   001000  C015  F007         	movff	pad@fp,fputc@fp
  1374   001004  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1375   001008  ECE3  F006         	call	_fputc	;wreg free
  1376   00100C                     
  1377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1378   00100C  4A1C               	infsnz	pad@i^0,f,c
  1379   00100E  2A1D               	incf	(pad@i+1)^0,f,c
  1380   001010                     l1356:
  1381                           
  1382                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1383   001010  501E               	movf	pad@w^0,w,c
  1384   001012  5C1C               	subwf	pad@i^0,w,c
  1385   001014  501D               	movf	(pad@i+1)^0,w,c
  1386   001016  0A80               	xorlw	128
  1387   001018  6E1B               	movwf	??_pad^0,c
  1388   00101A  501F               	movf	(pad@w+1)^0,w,c
  1389   00101C  0A80               	xorlw	128
  1390   00101E  581B               	subwfb	??_pad^0,w,c
  1391   001020  A0D8               	btfss	status,0,c
  1392   001022  EF15  F008         	goto	u681
  1393   001026  EF17  F008         	goto	u680
  1394   00102A                     u681:
  1395   00102A  EFFC  F007         	goto	l1352
  1396   00102E                     u680:
  1397   00102E                     
  1398                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1399   00102E  C017  F00E         	movff	pad@buf,fputs@s
  1400   001032  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1401   001036  C015  F010         	movff	pad@fp,fputs@fp
  1402   00103A  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1403   00103E  ECA7  F008         	call	_fputs	;wreg free
  1404   001042  0012               	return		;funcret
  1405   001044                     __end_of_pad:
  1406                           	callstack 0
  1407                           
  1408 ;; *************** function _fputs *****************
  1409 ;; Defined at:
  1410 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1413 ;;		 -> dbuf(32), 
  1414 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1415 ;;		 -> sprintf@f(11), 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  i               2   18[COMRAM] int 
  1418 ;;  c               1   17[COMRAM] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  2   13[COMRAM] int 
  1421 ;; Registers used:
  1422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1428 ;;      Params:         4       0       0       0       0       0       0
  1429 ;;      Locals:         3       0       0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0       0       0
  1431 ;;      Totals:         7       0       0       0       0       0       0
  1432 ;;Total ram usage:        7 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 3
  1435 ;; This function calls:
  1436 ;;		_fputc
  1437 ;; This function is called by:
  1438 ;;		_pad
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text6
  1443   00114E                     __ptext6:
  1444                           	callstack 0
  1445   00114E                     _fputs:
  1446                           	callstack 22
  1447   00114E  0E00               	movlw	0
  1448   001150  6E14               	movwf	(fputs@i+1)^0,c
  1449   001152  0E00               	movlw	0
  1450   001154  6E13               	movwf	fputs@i^0,c
  1451   001156  EFB8  F008         	goto	l1264
  1452   00115A                     l1260:
  1453   00115A  C012  F005         	movff	fputs@c,fputc@c
  1454   00115E  6A06               	clrf	(fputc@c+1)^0,c
  1455   001160  C010  F007         	movff	fputs@fp,fputc@fp
  1456   001164  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1457   001168  ECE3  F006         	call	_fputc	;wreg free
  1458   00116C  4A13               	infsnz	fputs@i^0,f,c
  1459   00116E  2A14               	incf	(fputs@i+1)^0,f,c
  1460   001170                     l1264:
  1461   001170  5013               	movf	fputs@i^0,w,c
  1462   001172  240E               	addwf	fputs@s^0,w,c
  1463   001174  6ED9               	movwf	fsr2l,c
  1464   001176  5014               	movf	(fputs@i+1)^0,w,c
  1465   001178  200F               	addwfc	(fputs@s+1)^0,w,c
  1466   00117A  6EDA               	movwf	fsr2h,c
  1467   00117C  50DF               	movf	indf2,w,c
  1468   00117E  6E12               	movwf	fputs@c^0,c
  1469   001180  5012               	movf	fputs@c^0,w,c
  1470   001182  A4D8               	btfss	status,2,c
  1471   001184  EFC6  F008         	goto	u531
  1472   001188  EFC8  F008         	goto	u530
  1473   00118C                     u531:
  1474   00118C  EFAD  F008         	goto	l1260
  1475   001190                     u530:
  1476   001190  0012               	return		;funcret
  1477   001192                     __end_of_fputs:
  1478                           	callstack 0
  1479                           
  1480 ;; *************** function _fputc *****************
  1481 ;; Defined at:
  1482 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  c               2    4[COMRAM] int 
  1485 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1486 ;;		 -> sprintf@f(11), 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  2    4[COMRAM] int 
  1491 ;; Registers used:
  1492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1498 ;;      Params:         4       0       0       0       0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0
  1500 ;;      Temps:          5       0       0       0       0       0       0
  1501 ;;      Totals:         9       0       0       0       0       0       0
  1502 ;;Total ram usage:        9 bytes
  1503 ;; Hardware stack levels used: 1
  1504 ;; Hardware stack levels required when called: 2
  1505 ;; This function calls:
  1506 ;;		_putch
  1507 ;; This function is called by:
  1508 ;;		_pad
  1509 ;;		_vfpfcnvrt
  1510 ;;		_fputs
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text7
  1515   000DC6                     __ptext7:
  1516                           	callstack 0
  1517   000DC6                     _fputc:
  1518                           	callstack 25
  1519   000DC6  5007               	movf	fputc@fp^0,w,c
  1520   000DC8  1008               	iorwf	(fputc@fp+1)^0,w,c
  1521   000DCA  B4D8               	btfsc	status,2,c
  1522   000DCC  EFEA  F006         	goto	u491
  1523   000DD0  EFEC  F006         	goto	u490
  1524   000DD4                     u491:
  1525   000DD4  EFF5  F006         	goto	l1248
  1526   000DD8                     u490:
  1527   000DD8  5007               	movf	fputc@fp^0,w,c
  1528   000DDA  1008               	iorwf	(fputc@fp+1)^0,w,c
  1529   000DDC  A4D8               	btfss	status,2,c
  1530   000DDE  EFF3  F006         	goto	u501
  1531   000DE2  EFF5  F006         	goto	u500
  1532   000DE6                     u501:
  1533   000DE6  EFFA  F006         	goto	l1250
  1534   000DEA                     u500:
  1535   000DEA                     l1248:
  1536   000DEA  5005               	movf	fputc@c^0,w,c
  1537   000DEC  EC31  F009         	call	_putch
  1538   000DF0  EF47  F007         	goto	l867
  1539   000DF4                     l1250:
  1540   000DF4  EE20 F009          	lfsr	2,9
  1541   000DF8  5007               	movf	fputc@fp^0,w,c
  1542   000DFA  26D9               	addwf	fsr2l,f,c
  1543   000DFC  5008               	movf	(fputc@fp+1)^0,w,c
  1544   000DFE  22DA               	addwfc	fsr2h,f,c
  1545   000E00  50DE               	movf	postinc2,w,c
  1546   000E02  10DE               	iorwf	postinc2,w,c
  1547   000E04  B4D8               	btfsc	status,2,c
  1548   000E06  EF07  F007         	goto	u511
  1549   000E0A  EF09  F007         	goto	u510
  1550   000E0E                     u511:
  1551   000E0E  EF24  F007         	goto	l1254
  1552   000E12                     u510:
  1553   000E12  EE20 F009          	lfsr	2,9
  1554   000E16  5007               	movf	fputc@fp^0,w,c
  1555   000E18  26D9               	addwf	fsr2l,f,c
  1556   000E1A  5008               	movf	(fputc@fp+1)^0,w,c
  1557   000E1C  22DA               	addwfc	fsr2h,f,c
  1558   000E1E  EE10 F003          	lfsr	1,3
  1559   000E22  5007               	movf	fputc@fp^0,w,c
  1560   000E24  26E1               	addwf	fsr1l,f,c
  1561   000E26  5008               	movf	(fputc@fp+1)^0,w,c
  1562   000E28  22E2               	addwfc	fsr1h,f,c
  1563   000E2A  50DE               	movf	postinc2,w,c
  1564   000E2C  5CE6               	subwf	postinc1,w,c
  1565   000E2E  50E6               	movf	postinc1,w,c
  1566   000E30  0A80               	xorlw	128
  1567   000E32  6E0D               	movwf	(??_fputc+4)^0,c
  1568   000E34  50DE               	movf	postinc2,w,c
  1569   000E36  0A80               	xorlw	128
  1570   000E38  580D               	subwfb	(??_fputc+4)^0,w,c
  1571   000E3A  B0D8               	btfsc	status,0,c
  1572   000E3C  EF22  F007         	goto	u521
  1573   000E40  EF24  F007         	goto	u520
  1574   000E44                     u521:
  1575   000E44  EF47  F007         	goto	l867
  1576   000E48                     u520:
  1577   000E48                     l1254:
  1578   000E48  EE20 F003          	lfsr	2,3
  1579   000E4C  5007               	movf	fputc@fp^0,w,c
  1580   000E4E  26D9               	addwf	fsr2l,f,c
  1581   000E50  5008               	movf	(fputc@fp+1)^0,w,c
  1582   000E52  22DA               	addwfc	fsr2h,f,c
  1583   000E54  CFDE F009          	movff	postinc2,??_fputc
  1584   000E58  CFDD F00A          	movff	postdec2,??_fputc+1
  1585   000E5C  C007  FFD9         	movff	fputc@fp,fsr2l
  1586   000E60  C008  FFDA         	movff	fputc@fp+1,fsr2h
  1587   000E64  CFDE F00B          	movff	postinc2,??_fputc+2
  1588   000E68  CFDD F00C          	movff	postdec2,??_fputc+3
  1589   000E6C  5009               	movf	??_fputc^0,w,c
  1590   000E6E  240B               	addwf	(??_fputc+2)^0,w,c
  1591   000E70  6ED9               	movwf	fsr2l,c
  1592   000E72  500A               	movf	(??_fputc+1)^0,w,c
  1593   000E74  200C               	addwfc	(??_fputc+3)^0,w,c
  1594   000E76  6EDA               	movwf	fsr2h,c
  1595   000E78  C005  FFDF         	movff	fputc@c,indf2
  1596   000E7C  EE20 F003          	lfsr	2,3
  1597   000E80  5007               	movf	fputc@fp^0,w,c
  1598   000E82  26D9               	addwf	fsr2l,f,c
  1599   000E84  5008               	movf	(fputc@fp+1)^0,w,c
  1600   000E86  22DA               	addwfc	fsr2h,f,c
  1601   000E88  2ADE               	incf	postinc2,f,c
  1602   000E8A  0E00               	movlw	0
  1603   000E8C  22DD               	addwfc	postdec2,f,c
  1604   000E8E                     l867:
  1605   000E8E  0012               	return		;funcret
  1606   000E90                     __end_of_fputc:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _putch *****************
  1610 ;; Defined at:
  1611 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  c               1    wreg     unsigned char 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  c               1    0[COMRAM] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         0       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_fputc
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text8
  1640   001262                     __ptext8:
  1641                           	callstack 0
  1642   001262                     _putch:
  1643                           	callstack 25
  1644   001262  0012               	return		;funcret
  1645   001264                     __end_of_putch:
  1646                           	callstack 0
  1647                           
  1648 ;; *************** function _abs *****************
  1649 ;; Defined at:
  1650 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  a               2   22[COMRAM] int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2   22[COMRAM] int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1664 ;;      Params:         2       0       0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0       0       0
  1666 ;;      Temps:          2       0       0       0       0       0       0
  1667 ;;      Totals:         4       0       0       0       0       0       0
  1668 ;;Total ram usage:        4 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_dtoa
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text9
  1679   001192                     __ptext9:
  1680                           	callstack 0
  1681   001192                     _abs:
  1682                           	callstack 25
  1683   001192  BE18               	btfsc	(abs@a+1)^0,7,c
  1684   001194  EFD6  F008         	goto	u690
  1685   001198  5018               	movf	(abs@a+1)^0,w,c
  1686   00119A  E106               	bnz	u691
  1687   00119C  0417               	decf	abs@a^0,w,c
  1688   00119E  B0D8               	btfsc	status,0,c
  1689   0011A0  EFD4  F008         	goto	u691
  1690   0011A4  EFD6  F008         	goto	u690
  1691   0011A8                     u691:
  1692   0011A8  EFE4  F008         	goto	l852
  1693   0011AC                     u690:
  1694   0011AC  C017  F019         	movff	abs@a,??_abs
  1695   0011B0  C018  F01A         	movff	abs@a+1,??_abs+1
  1696   0011B4  1E19               	comf	??_abs^0,f,c
  1697   0011B6  1E1A               	comf	(??_abs+1)^0,f,c
  1698   0011B8  4A19               	infsnz	??_abs^0,f,c
  1699   0011BA  2A1A               	incf	(??_abs+1)^0,f,c
  1700   0011BC  C019  F017         	movff	??_abs,?_abs
  1701   0011C0  C01A  F018         	movff	??_abs+1,?_abs+1
  1702   0011C4  EFE8  F008         	goto	l855
  1703   0011C8                     l852:
  1704   0011C8  C017  F017         	movff	abs@a,?_abs
  1705   0011CC  C018  F018         	movff	abs@a+1,?_abs+1
  1706   0011D0                     l855:
  1707   0011D0  0012               	return		;funcret
  1708   0011D2                     __end_of_abs:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function ___aomod *****************
  1712 ;; Defined at:
  1713 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  dividend        8    4[COMRAM] long long 
  1716 ;;  divisor         8   12[COMRAM] long long 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  sign            1   21[COMRAM] unsigned char 
  1719 ;;  counter         1   20[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  8    4[COMRAM] long long 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1729 ;;      Params:        16       0       0       0       0       0       0
  1730 ;;      Locals:         2       0       0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0
  1732 ;;      Totals:        18       0       0       0       0       0       0
  1733 ;;Total ram usage:       18 bytes
  1734 ;; Hardware stack levels used: 1
  1735 ;; Hardware stack levels required when called: 1
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_dtoa
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text10
  1744   000A32                     __ptext10:
  1745                           	callstack 0
  1746   000A32                     ___aomod:
  1747                           	callstack 25
  1748   000A32  0E00               	movlw	0
  1749   000A34  6E16               	movwf	___aomod@sign^0,c
  1750   000A36  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  1751   000A38  EF22  F005         	goto	u610
  1752   000A3C  EF20  F005         	goto	u611
  1753   000A40                     u611:
  1754   000A40  EF34  F005         	goto	l1318
  1755   000A44                     u610:
  1756   000A44  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  1757   000A46  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  1758   000A48  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  1759   000A4A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  1760   000A4C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  1761   000A4E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  1762   000A50  1E06               	comf	(___aomod@dividend+1)^0,f,c
  1763   000A52  6C05               	negf	___aomod@dividend^0,c
  1764   000A54  0E00               	movlw	0
  1765   000A56  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  1766   000A58  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  1767   000A5A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  1768   000A5C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  1769   000A5E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  1770   000A60  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  1771   000A62  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  1772   000A64  0E01               	movlw	1
  1773   000A66  6E16               	movwf	___aomod@sign^0,c
  1774   000A68                     l1318:
  1775   000A68  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  1776   000A6A  EF3B  F005         	goto	u620
  1777   000A6E  EF39  F005         	goto	u621
  1778   000A72                     u621:
  1779   000A72  EF4B  F005         	goto	l1322
  1780   000A76                     u620:
  1781   000A76  1E14               	comf	(___aomod@divisor+7)^0,f,c
  1782   000A78  1E13               	comf	(___aomod@divisor+6)^0,f,c
  1783   000A7A  1E12               	comf	(___aomod@divisor+5)^0,f,c
  1784   000A7C  1E11               	comf	(___aomod@divisor+4)^0,f,c
  1785   000A7E  1E10               	comf	(___aomod@divisor+3)^0,f,c
  1786   000A80  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  1787   000A82  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  1788   000A84  6C0D               	negf	___aomod@divisor^0,c
  1789   000A86  0E00               	movlw	0
  1790   000A88  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  1791   000A8A  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  1792   000A8C  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  1793   000A8E  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  1794   000A90  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  1795   000A92  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  1796   000A94  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  1797   000A96                     l1322:
  1798   000A96  500D               	movf	___aomod@divisor^0,w,c
  1799   000A98  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  1800   000A9A  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  1801   000A9C  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  1802   000A9E  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  1803   000AA0  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  1804   000AA2  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  1805   000AA4  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  1806   000AA6  B4D8               	btfsc	status,2,c
  1807   000AA8  EF58  F005         	goto	u631
  1808   000AAC  EF5A  F005         	goto	u630
  1809   000AB0                     u631:
  1810   000AB0  EFA2  F005         	goto	l1338
  1811   000AB4                     u630:
  1812   000AB4  0E01               	movlw	1
  1813   000AB6  6E15               	movwf	___aomod@counter^0,c
  1814   000AB8  EF68  F005         	goto	l1328
  1815   000ABC                     l1326:
  1816   000ABC  90D8               	bcf	status,0,c
  1817   000ABE  360D               	rlcf	___aomod@divisor^0,f,c
  1818   000AC0  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  1819   000AC2  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  1820   000AC4  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  1821   000AC6  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  1822   000AC8  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  1823   000ACA  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  1824   000ACC  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  1825   000ACE  2A15               	incf	___aomod@counter^0,f,c
  1826   000AD0                     l1328:
  1827   000AD0  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  1828   000AD2  EF6D  F005         	goto	u641
  1829   000AD6  EF6F  F005         	goto	u640
  1830   000ADA                     u641:
  1831   000ADA  EF5E  F005         	goto	l1326
  1832   000ADE                     u640:
  1833   000ADE                     l1330:
  1834   000ADE  500D               	movf	___aomod@divisor^0,w,c
  1835   000AE0  5C05               	subwf	___aomod@dividend^0,w,c
  1836   000AE2  500E               	movf	(___aomod@divisor+1)^0,w,c
  1837   000AE4  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  1838   000AE6  500F               	movf	(___aomod@divisor+2)^0,w,c
  1839   000AE8  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  1840   000AEA  5010               	movf	(___aomod@divisor+3)^0,w,c
  1841   000AEC  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  1842   000AEE  5011               	movf	(___aomod@divisor+4)^0,w,c
  1843   000AF0  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  1844   000AF2  5012               	movf	(___aomod@divisor+5)^0,w,c
  1845   000AF4  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  1846   000AF6  5013               	movf	(___aomod@divisor+6)^0,w,c
  1847   000AF8  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  1848   000AFA  5014               	movf	(___aomod@divisor+7)^0,w,c
  1849   000AFC  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  1850   000AFE  A0D8               	btfss	status,0,c
  1851   000B00  EF84  F005         	goto	u651
  1852   000B04  EF86  F005         	goto	u650
  1853   000B08                     u651:
  1854   000B08  EF96  F005         	goto	l1334
  1855   000B0C                     u650:
  1856   000B0C  500D               	movf	___aomod@divisor^0,w,c
  1857   000B0E  5E05               	subwf	___aomod@dividend^0,f,c
  1858   000B10  500E               	movf	(___aomod@divisor+1)^0,w,c
  1859   000B12  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  1860   000B14  500F               	movf	(___aomod@divisor+2)^0,w,c
  1861   000B16  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  1862   000B18  5010               	movf	(___aomod@divisor+3)^0,w,c
  1863   000B1A  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  1864   000B1C  5011               	movf	(___aomod@divisor+4)^0,w,c
  1865   000B1E  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  1866   000B20  5012               	movf	(___aomod@divisor+5)^0,w,c
  1867   000B22  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  1868   000B24  5013               	movf	(___aomod@divisor+6)^0,w,c
  1869   000B26  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  1870   000B28  5014               	movf	(___aomod@divisor+7)^0,w,c
  1871   000B2A  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  1872   000B2C                     l1334:
  1873   000B2C  90D8               	bcf	status,0,c
  1874   000B2E  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  1875   000B30  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  1876   000B32  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  1877   000B34  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  1878   000B36  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  1879   000B38  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  1880   000B3A  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  1881   000B3C  320D               	rrcf	___aomod@divisor^0,f,c
  1882   000B3E  2E15               	decfsz	___aomod@counter^0,f,c
  1883   000B40  EF6F  F005         	goto	l1330
  1884   000B44                     l1338:
  1885   000B44  5016               	movf	___aomod@sign^0,w,c
  1886   000B46  B4D8               	btfsc	status,2,c
  1887   000B48  EFA8  F005         	goto	u661
  1888   000B4C  EFAA  F005         	goto	u660
  1889   000B50                     u661:
  1890   000B50  EFBA  F005         	goto	l1342
  1891   000B54                     u660:
  1892   000B54  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  1893   000B56  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  1894   000B58  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  1895   000B5A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  1896   000B5C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  1897   000B5E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  1898   000B60  1E06               	comf	(___aomod@dividend+1)^0,f,c
  1899   000B62  6C05               	negf	___aomod@dividend^0,c
  1900   000B64  0E00               	movlw	0
  1901   000B66  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  1902   000B68  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  1903   000B6A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  1904   000B6C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  1905   000B6E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  1906   000B70  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  1907   000B72  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  1908   000B74                     l1342:
  1909   000B74  C005  F005         	movff	___aomod@dividend,?___aomod
  1910   000B78  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  1911   000B7C  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  1912   000B80  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  1913   000B84  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  1914   000B88  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  1915   000B8C  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  1916   000B90  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  1917   000B94  0012               	return		;funcret
  1918   000B96                     __end_of___aomod:
  1919                           	callstack 0
  1920                           
  1921 ;; *************** function ___aodiv *****************
  1922 ;; Defined at:
  1923 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  dividend        8    4[COMRAM] long long 
  1926 ;;  divisor         8   12[COMRAM] long long 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  quotient        8   22[COMRAM] long long 
  1929 ;;  sign            1   21[COMRAM] unsigned char 
  1930 ;;  counter         1   20[COMRAM] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  8    4[COMRAM] long long 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1940 ;;      Params:        16       0       0       0       0       0       0
  1941 ;;      Locals:        10       0       0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0
  1943 ;;      Totals:        26       0       0       0       0       0       0
  1944 ;;Total ram usage:       26 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; Hardware stack levels required when called: 1
  1947 ;; This function calls:
  1948 ;;		Nothing
  1949 ;; This function is called by:
  1950 ;;		_dtoa
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text11
  1955   0008AA                     __ptext11:
  1956                           	callstack 0
  1957   0008AA                     ___aodiv:
  1958                           	callstack 25
  1959   0008AA  0E00               	movlw	0
  1960   0008AC  6E16               	movwf	___aodiv@sign^0,c
  1961   0008AE  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  1962   0008B0  EF5E  F004         	goto	u540
  1963   0008B4  EF5C  F004         	goto	u541
  1964   0008B8                     u541:
  1965   0008B8  EF70  F004         	goto	l1274
  1966   0008BC                     u540:
  1967   0008BC  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  1968   0008BE  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  1969   0008C0  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  1970   0008C2  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  1971   0008C4  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  1972   0008C6  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  1973   0008C8  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  1974   0008CA  6C0D               	negf	___aodiv@divisor^0,c
  1975   0008CC  0E00               	movlw	0
  1976   0008CE  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  1977   0008D0  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  1978   0008D2  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  1979   0008D4  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  1980   0008D6  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  1981   0008D8  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  1982   0008DA  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  1983   0008DC  0E01               	movlw	1
  1984   0008DE  6E16               	movwf	___aodiv@sign^0,c
  1985   0008E0                     l1274:
  1986   0008E0  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  1987   0008E2  EF77  F004         	goto	u550
  1988   0008E6  EF75  F004         	goto	u551
  1989   0008EA                     u551:
  1990   0008EA  EF89  F004         	goto	l1280
  1991   0008EE                     u550:
  1992   0008EE  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  1993   0008F0  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  1994   0008F2  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  1995   0008F4  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  1996   0008F6  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  1997   0008F8  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  1998   0008FA  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  1999   0008FC  6C05               	negf	___aodiv@dividend^0,c
  2000   0008FE  0E00               	movlw	0
  2001   000900  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  2002   000902  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  2003   000904  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  2004   000906  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  2005   000908  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  2006   00090A  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  2007   00090C  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  2008   00090E  0E01               	movlw	1
  2009   000910  1A16               	xorwf	___aodiv@sign^0,f,c
  2010   000912                     l1280:
  2011   000912  EE20  F017         	lfsr	2,___aodiv@quotient
  2012   000916  0E07               	movlw	7
  2013   000918                     u561:
  2014   000918  6ADE               	clrf	postinc2,c
  2015   00091A  06E8               	decf	wreg,f,c
  2016   00091C  E2FD               	bc	u561
  2017   00091E  500D               	movf	___aodiv@divisor^0,w,c
  2018   000920  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  2019   000922  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  2020   000924  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  2021   000926  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  2022   000928  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  2023   00092A  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  2024   00092C  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  2025   00092E  B4D8               	btfsc	status,2,c
  2026   000930  EF9C  F004         	goto	u571
  2027   000934  EF9E  F004         	goto	u570
  2028   000938                     u571:
  2029   000938  EFF0  F004         	goto	l1302
  2030   00093C                     u570:
  2031   00093C  0E01               	movlw	1
  2032   00093E  6E15               	movwf	___aodiv@counter^0,c
  2033   000940  EFAC  F004         	goto	l1288
  2034   000944                     l1286:
  2035   000944  90D8               	bcf	status,0,c
  2036   000946  360D               	rlcf	___aodiv@divisor^0,f,c
  2037   000948  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  2038   00094A  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  2039   00094C  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  2040   00094E  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  2041   000950  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  2042   000952  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  2043   000954  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  2044   000956  2A15               	incf	___aodiv@counter^0,f,c
  2045   000958                     l1288:
  2046   000958  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  2047   00095A  EFB1  F004         	goto	u581
  2048   00095E  EFB3  F004         	goto	u580
  2049   000962                     u581:
  2050   000962  EFA2  F004         	goto	l1286
  2051   000966                     u580:
  2052   000966                     l1290:
  2053   000966  90D8               	bcf	status,0,c
  2054   000968  3617               	rlcf	___aodiv@quotient^0,f,c
  2055   00096A  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  2056   00096C  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  2057   00096E  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  2058   000970  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  2059   000972  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  2060   000974  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  2061   000976  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  2062   000978  500D               	movf	___aodiv@divisor^0,w,c
  2063   00097A  5C05               	subwf	___aodiv@dividend^0,w,c
  2064   00097C  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2065   00097E  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  2066   000980  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2067   000982  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  2068   000984  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2069   000986  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  2070   000988  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2071   00098A  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  2072   00098C  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2073   00098E  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  2074   000990  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2075   000992  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  2076   000994  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2077   000996  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  2078   000998  A0D8               	btfss	status,0,c
  2079   00099A  EFD1  F004         	goto	u591
  2080   00099E  EFD3  F004         	goto	u590
  2081   0009A2                     u591:
  2082   0009A2  EFE4  F004         	goto	l1298
  2083   0009A6                     u590:
  2084   0009A6  500D               	movf	___aodiv@divisor^0,w,c
  2085   0009A8  5E05               	subwf	___aodiv@dividend^0,f,c
  2086   0009AA  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2087   0009AC  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  2088   0009AE  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2089   0009B0  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  2090   0009B2  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2091   0009B4  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  2092   0009B6  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2093   0009B8  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  2094   0009BA  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2095   0009BC  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  2096   0009BE  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2097   0009C0  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  2098   0009C2  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2099   0009C4  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  2100   0009C6  8017               	bsf	___aodiv@quotient^0,0,c
  2101   0009C8                     l1298:
  2102   0009C8  90D8               	bcf	status,0,c
  2103   0009CA  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  2104   0009CC  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  2105   0009CE  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  2106   0009D0  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  2107   0009D2  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  2108   0009D4  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  2109   0009D6  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  2110   0009D8  320D               	rrcf	___aodiv@divisor^0,f,c
  2111   0009DA  2E15               	decfsz	___aodiv@counter^0,f,c
  2112   0009DC  EFB3  F004         	goto	l1290
  2113   0009E0                     l1302:
  2114   0009E0  5016               	movf	___aodiv@sign^0,w,c
  2115   0009E2  B4D8               	btfsc	status,2,c
  2116   0009E4  EFF6  F004         	goto	u601
  2117   0009E8  EFF8  F004         	goto	u600
  2118   0009EC                     u601:
  2119   0009EC  EF08  F005         	goto	l1306
  2120   0009F0                     u600:
  2121   0009F0  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  2122   0009F2  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  2123   0009F4  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  2124   0009F6  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  2125   0009F8  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  2126   0009FA  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  2127   0009FC  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  2128   0009FE  6C17               	negf	___aodiv@quotient^0,c
  2129   000A00  0E00               	movlw	0
  2130   000A02  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  2131   000A04  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  2132   000A06  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  2133   000A08  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  2134   000A0A  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  2135   000A0C  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  2136   000A0E  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  2137   000A10                     l1306:
  2138   000A10  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2139   000A14  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2140   000A18  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2141   000A1C  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2142   000A20  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2143   000A24  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2144   000A28  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2145   000A2C  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2146   000A30  0012               	return		;funcret
  2147   000A32                     __end_of___aodiv:
  2148                           	callstack 0
  2149                           
  2150 ;; *************** function _lcd_write *****************
  2151 ;; Defined at:
  2152 ;;		line 75 in file "LCD4b.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  lin             1    wreg     unsigned char 
  2155 ;;  col             1   10[COMRAM] unsigned char 
  2156 ;;  str             2   11[COMRAM] PTR unsigned char 
  2157 ;;		 -> STR_5(16), STR_4(16), bufferLCD(16), STR_2(13), 
  2158 ;;		 -> STR_1(7), 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  lin             1   14[COMRAM] unsigned char 
  2161 ;;  end             1   13[COMRAM] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2171 ;;      Params:         3       0       0       0       0       0       0
  2172 ;;      Locals:         2       0       0       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0
  2174 ;;      Totals:         5       0       0       0       0       0       0
  2175 ;;Total ram usage:        5 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 4
  2178 ;; This function calls:
  2179 ;;		_lcd_send_byte
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;;		_lcd_clear
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text12
  2187   000E90                     __ptext12:
  2188                           	callstack 0
  2189   000E90                     _lcd_write:
  2190                           	callstack 26
  2191                           
  2192                           ;incstack = 0
  2193                           ;lcd_write@lin stored from wreg
  2194   000E90  6E0F               	movwf	lcd_write@lin^0,c
  2195   000E92                     
  2196                           ;LCD4b.c: 75: void lcd_write(char lin, char col, char *str);LCD4b.c: 76: {;LCD4b.c: 77: 
      +                              char end;;LCD4b.c: 79:     if(lin == 1)
  2197   000E92  040F               	decf	lcd_write@lin^0,w,c
  2198   000E94  A4D8               	btfss	status,2,c
  2199   000E96  EF4F  F007         	goto	u871
  2200   000E9A  EF51  F007         	goto	u870
  2201   000E9E                     u871:
  2202   000E9E  EF56  F007         	goto	l1548
  2203   000EA2                     u870:
  2204   000EA2                     
  2205                           ;LCD4b.c: 80:     {;LCD4b.c: 81:         end = col + 0X80 - 1;
  2206   000EA2  500B               	movf	lcd_write@col^0,w,c
  2207   000EA4  0F7F               	addlw	127
  2208   000EA6  6E0E               	movwf	lcd_write@end^0,c
  2209                           
  2210                           ;LCD4b.c: 82:     }
  2211   000EA8  EF62  F007         	goto	l1552
  2212   000EAC                     l1548:
  2213   000EAC  0E02               	movlw	2
  2214   000EAE  180F               	xorwf	lcd_write@lin^0,w,c
  2215   000EB0  A4D8               	btfss	status,2,c
  2216   000EB2  EF5D  F007         	goto	u881
  2217   000EB6  EF5F  F007         	goto	u880
  2218   000EBA                     u881:
  2219   000EBA  EF62  F007         	goto	l1552
  2220   000EBE                     u880:
  2221   000EBE                     
  2222                           ;LCD4b.c: 84:     {;LCD4b.c: 85:         end = col + 0xC0 - 1;
  2223   000EBE  500B               	movf	lcd_write@col^0,w,c
  2224   000EC0  0FBF               	addlw	191
  2225   000EC2  6E0E               	movwf	lcd_write@end^0,c
  2226   000EC4                     l1552:
  2227                           
  2228                           ;LCD4b.c: 87:     lcd_send_byte(0,end);
  2229   000EC4  C00E  F009         	movff	lcd_write@end,lcd_send_byte@data
  2230   000EC8  0E00               	movlw	0
  2231   000ECA  EC0C  F009         	call	_lcd_send_byte
  2232                           
  2233                           ;LCD4b.c: 89:     while(*str)
  2234   000ECE  EF7F  F007         	goto	l1558
  2235   000ED2                     l1554:
  2236                           
  2237                           ;LCD4b.c: 90:     {;LCD4b.c: 91:         lcd_send_byte(1,*str);
  2238   000ED2  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2239   000ED6  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2240   000EDA  6AF8               	clrf	tblptru,c
  2241   000EDC  0E05               	movlw	(high __ramtop+-1)
  2242   000EDE  64F7               	cpfsgt	tblptrh,c
  2243   000EE0  D003               	bra	u897
  2244   000EE2  0008               	tblrd		*
  2245   000EE4  50F5               	movf	tablat,w,c
  2246   000EE6  D005               	bra	u890
  2247   000EE8                     u897:
  2248   000EE8  CFF6 FFE1          	movff	tblptrl,fsr1l
  2249   000EEC  CFF7 FFE2          	movff	tblptrh,fsr1h
  2250   000EF0  50E7               	movf	indf1,w,c
  2251   000EF2                     u890:
  2252   000EF2  6E09               	movwf	lcd_send_byte@data^0,c
  2253   000EF4  0E01               	movlw	1
  2254   000EF6  EC0C  F009         	call	_lcd_send_byte
  2255   000EFA                     
  2256                           ;LCD4b.c: 92:         str++;
  2257   000EFA  4A0C               	infsnz	lcd_write@str^0,f,c
  2258   000EFC  2A0D               	incf	(lcd_write@str+1)^0,f,c
  2259   000EFE                     l1558:
  2260                           
  2261                           ;LCD4b.c: 89:     while(*str)
  2262   000EFE  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2263   000F02  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2264   000F06  6AF8               	clrf	tblptru,c
  2265   000F08  0E05               	movlw	(high __ramtop+-1)
  2266   000F0A  64F7               	cpfsgt	tblptrh,c
  2267   000F0C  D003               	bra	u907
  2268   000F0E  0008               	tblrd		*
  2269   000F10  50F5               	movf	tablat,w,c
  2270   000F12  D005               	bra	u900
  2271   000F14                     u907:
  2272   000F14  CFF6 FFE1          	movff	tblptrl,fsr1l
  2273   000F18  CFF7 FFE2          	movff	tblptrh,fsr1h
  2274   000F1C  50E7               	movf	indf1,w,c
  2275   000F1E                     u900:
  2276   000F1E  0900               	iorlw	0
  2277   000F20  A4D8               	btfss	status,2,c
  2278   000F22  EF95  F007         	goto	u911
  2279   000F26  EF97  F007         	goto	u910
  2280   000F2A                     u911:
  2281   000F2A  EF69  F007         	goto	l1554
  2282   000F2E                     u910:
  2283   000F2E  0012               	return		;funcret
  2284   000F30                     __end_of_lcd_write:
  2285                           	callstack 0
  2286                           
  2287 ;; *************** function _lcd_send_byte *****************
  2288 ;; Defined at:
  2289 ;;		line 61 in file "LCD4b.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  level           1    wreg     unsigned char 
  2292 ;;  data            1    8[COMRAM] unsigned char 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  level           1    9[COMRAM] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2304 ;;      Params:         1       0       0       0       0       0       0
  2305 ;;      Locals:         1       0       0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0
  2307 ;;      Totals:         2       0       0       0       0       0       0
  2308 ;;Total ram usage:        2 bytes
  2309 ;; Hardware stack levels used: 1
  2310 ;; Hardware stack levels required when called: 3
  2311 ;; This function calls:
  2312 ;;		_lcd_cmd
  2313 ;; This function is called by:
  2314 ;;		_lcd_write
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text13
  2319   001218                     __ptext13:
  2320                           	callstack 0
  2321   001218                     _lcd_send_byte:
  2322                           	callstack 26
  2323                           
  2324                           ;incstack = 0
  2325                           ;lcd_send_byte@level stored from wreg
  2326   001218  6E0A               	movwf	lcd_send_byte@level^0,c
  2327   00121A                     
  2328                           ;LCD4b.c: 61: void lcd_send_byte(char level, char data);LCD4b.c: 62: {;LCD4b.c: 63:     
      +                          PORTEbits.RE2 = level;
  2329   00121A  B00A               	btfsc	lcd_send_byte@level^0,0,c
  2330   00121C  D002               	bra	u845
  2331   00121E  9484               	bcf	132,2,c	;volatile
  2332   001220  D001               	bra	u846
  2333   001222                     u845:
  2334   001222  8484               	bsf	132,2,c	;volatile
  2335   001224                     u846:
  2336   001224                     
  2337                           ;LCD4b.c: 64:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2338   001224  0E42               	movlw	66
  2339   001226                     u927:
  2340   001226  2EE8               	decfsz	wreg,f,c
  2341   001228  D7FE               	bra	u927
  2342   00122A  D000               	nop2	
  2343   00122C                     
  2344                           ;LCD4b.c: 65:     PORTEbits.RE1 = 0;
  2345   00122C  9284               	bcf	132,1,c	;volatile
  2346   00122E                     
  2347                           ;LCD4b.c: 66:     lcd_cmd(data);
  2348   00122E  5009               	movf	lcd_send_byte@data^0,w,c
  2349   001230  EC71  F006         	call	_lcd_cmd
  2350   001234  0012               	return		;funcret
  2351   001236                     __end_of_lcd_send_byte:
  2352                           	callstack 0
  2353                           
  2354 ;; *************** function _lcd_init *****************
  2355 ;; Defined at:
  2356 ;;		line 3 in file "LCD4b.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;		None
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  i               1    9[COMRAM] unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2370 ;;      Params:         0       0       0       0       0       0       0
  2371 ;;      Locals:         1       0       0       0       0       0       0
  2372 ;;      Temps:          1       0       0       0       0       0       0
  2373 ;;      Totals:         2       0       0       0       0       0       0
  2374 ;;Total ram usage:        2 bytes
  2375 ;; Hardware stack levels used: 1
  2376 ;; Hardware stack levels required when called: 3
  2377 ;; This function calls:
  2378 ;;		_lcd_cmd
  2379 ;; This function is called by:
  2380 ;;		_main
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text14
  2385   000F30                     __ptext14:
  2386                           	callstack 0
  2387   000F30                     _lcd_init:
  2388                           	callstack 27
  2389   000F30                     
  2390                           ;LCD4b.c: 5:     char i;;LCD4b.c: 7:     TRISD = 0b00000000;
  2391   000F30  0E00               	movlw	0
  2392   000F32  6E95               	movwf	149,c	;volatile
  2393   000F34                     
  2394                           ;LCD4b.c: 8:     TRISEbits.TRISE1 = 0;
  2395   000F34  9296               	bcf	150,1,c	;volatile
  2396   000F36                     
  2397                           ;LCD4b.c: 9:     TRISEbits.TRISE2 = 0;
  2398   000F36  9496               	bcf	150,2,c	;volatile
  2399                           
  2400                           ;LCD4b.c: 10:     PORTD = 0b00000000;
  2401   000F38  0E00               	movlw	0
  2402   000F3A  6E83               	movwf	131,c	;volatile
  2403   000F3C                     
  2404                           ;LCD4b.c: 11:     PORTEbits.RE2 = 0;
  2405   000F3C  9484               	bcf	132,2,c	;volatile
  2406   000F3E                     
  2407                           ;LCD4b.c: 12:     PORTEbits.RE1 = 0;
  2408   000F3E  9284               	bcf	132,1,c	;volatile
  2409   000F40                     
  2410                           ;LCD4b.c: 14:     _delay((unsigned long)((15)*(8000000/4000.0)));
  2411   000F40  0E27               	movlw	39
  2412   000F42  6E09               	movwf	??_lcd_init^0,c
  2413   000F44  0EF5               	movlw	245
  2414   000F46                     u937:
  2415   000F46  2EE8               	decfsz	wreg,f,c
  2416   000F48  D7FE               	bra	u937
  2417   000F4A  2E09               	decfsz	??_lcd_init^0,f,c
  2418   000F4C  D7FC               	bra	u937
  2419   000F4E  F000               	nop	
  2420   000F50                     
  2421                           ;LCD4b.c: 16:     for(i=0;i<=2;i++)
  2422   000F50  0E00               	movlw	0
  2423   000F52  6E0A               	movwf	lcd_init@i^0,c
  2424   000F54                     l1522:
  2425                           
  2426                           ;LCD4b.c: 17:     {;LCD4b.c: 18:         lcd_cmd(0x30);
  2427   000F54  0E30               	movlw	48
  2428   000F56  EC71  F006         	call	_lcd_cmd
  2429   000F5A                     
  2430                           ;LCD4b.c: 19:         _delay((unsigned long)((5)*(8000000/4000.0)));
  2431   000F5A  0E0D               	movlw	13
  2432   000F5C  6E09               	movwf	??_lcd_init^0,c
  2433   000F5E  0EFC               	movlw	252
  2434   000F60                     u947:
  2435   000F60  2EE8               	decfsz	wreg,f,c
  2436   000F62  D7FE               	bra	u947
  2437   000F64  2E09               	decfsz	??_lcd_init^0,f,c
  2438   000F66  D7FC               	bra	u947
  2439   000F68                     
  2440                           ;LCD4b.c: 20:     }
  2441   000F68  2A0A               	incf	lcd_init@i^0,f,c
  2442   000F6A  0E02               	movlw	2
  2443   000F6C  640A               	cpfsgt	lcd_init@i^0,c
  2444   000F6E  EFBB  F007         	goto	u861
  2445   000F72  EFBD  F007         	goto	u860
  2446   000F76                     u861:
  2447   000F76  EFAA  F007         	goto	l1522
  2448   000F7A                     u860:
  2449   000F7A                     
  2450                           ;LCD4b.c: 22:     lcd_cmd(0x02);
  2451   000F7A  0E02               	movlw	2
  2452   000F7C  EC71  F006         	call	_lcd_cmd
  2453   000F80                     
  2454                           ;LCD4b.c: 23:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2455   000F80  0E1A               	movlw	26
  2456   000F82                     u957:
  2457   000F82  2EE8               	decfsz	wreg,f,c
  2458   000F84  D7FE               	bra	u957
  2459   000F86  D000               	nop2	
  2460   000F88                     
  2461                           ;LCD4b.c: 24:     lcd_cmd(0x28);
  2462   000F88  0E28               	movlw	40
  2463   000F8A  EC71  F006         	call	_lcd_cmd
  2464                           
  2465                           ;LCD4b.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2466   000F8E  0E1A               	movlw	26
  2467   000F90                     u967:
  2468   000F90  2EE8               	decfsz	wreg,f,c
  2469   000F92  D7FE               	bra	u967
  2470   000F94  D000               	nop2	
  2471   000F96                     
  2472                           ;LCD4b.c: 26:     lcd_cmd(0x01);
  2473   000F96  0E01               	movlw	1
  2474   000F98  EC71  F006         	call	_lcd_cmd
  2475   000F9C                     
  2476                           ;LCD4b.c: 27:     _delay((unsigned long)((2)*(8000000/4000.0)));
  2477   000F9C  0E06               	movlw	6
  2478   000F9E  6E09               	movwf	??_lcd_init^0,c
  2479   000FA0  0E30               	movlw	48
  2480   000FA2                     u977:
  2481   000FA2  2EE8               	decfsz	wreg,f,c
  2482   000FA4  D7FE               	bra	u977
  2483   000FA6  2E09               	decfsz	??_lcd_init^0,f,c
  2484   000FA8  D7FC               	bra	u977
  2485   000FAA  D000               	nop2	
  2486                           
  2487                           ;LCD4b.c: 28:     lcd_cmd(0x0C);
  2488   000FAC  0E0C               	movlw	12
  2489   000FAE  EC71  F006         	call	_lcd_cmd
  2490   000FB2                     
  2491                           ;LCD4b.c: 29:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2492   000FB2  0E1A               	movlw	26
  2493   000FB4                     u987:
  2494   000FB4  2EE8               	decfsz	wreg,f,c
  2495   000FB6  D7FE               	bra	u987
  2496   000FB8  D000               	nop2	
  2497   000FBA                     
  2498                           ;LCD4b.c: 30:     lcd_cmd(0x06);
  2499   000FBA  0E06               	movlw	6
  2500   000FBC  EC71  F006         	call	_lcd_cmd
  2501                           
  2502                           ;LCD4b.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2503   000FC0  0E1A               	movlw	26
  2504   000FC2                     u997:
  2505   000FC2  2EE8               	decfsz	wreg,f,c
  2506   000FC4  D7FE               	bra	u997
  2507   000FC6  D000               	nop2	
  2508   000FC8  0012               	return		;funcret
  2509   000FCA                     __end_of_lcd_init:
  2510                           	callstack 0
  2511                           
  2512 ;; *************** function _lcd_cmd *****************
  2513 ;; Defined at:
  2514 ;;		line 40 in file "LCD4b.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  cmd             1    wreg     unsigned char 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  cmd             1    7[COMRAM] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2528 ;;      Params:         0       0       0       0       0       0       0
  2529 ;;      Locals:         1       0       0       0       0       0       0
  2530 ;;      Temps:          1       0       0       0       0       0       0
  2531 ;;      Totals:         2       0       0       0       0       0       0
  2532 ;;Total ram usage:        2 bytes
  2533 ;; Hardware stack levels used: 1
  2534 ;; Hardware stack levels required when called: 2
  2535 ;; This function calls:
  2536 ;;		_set_bit
  2537 ;; This function is called by:
  2538 ;;		_lcd_init
  2539 ;;		_lcd_send_byte
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text15
  2544   000CE2                     __ptext15:
  2545                           	callstack 0
  2546   000CE2                     _lcd_cmd:
  2547                           	callstack 26
  2548                           
  2549                           ;incstack = 0
  2550                           ;lcd_cmd@cmd stored from wreg
  2551   000CE2  6E08               	movwf	lcd_cmd@cmd^0,c
  2552   000CE4                     
  2553                           ;LCD4b.c: 40: void lcd_cmd(char cmd);LCD4b.c: 41: {;LCD4b.c: 42:     PORTDbits.RD4 = set
      +                          _bit(cmd, 0b00010000);
  2554   000CE4  0E10               	movlw	16
  2555   000CE6  6E05               	movwf	set_bit@comp^0,c
  2556   000CE8  5008               	movf	lcd_cmd@cmd^0,w,c
  2557   000CEA  ECFC  F008         	call	_set_bit
  2558   000CEE  6E07               	movwf	??_lcd_cmd^0,c
  2559   000CF0  3A07               	swapf	??_lcd_cmd^0,f,c
  2560   000CF2  5083               	movf	131,w,c	;volatile
  2561   000CF4  1807               	xorwf	??_lcd_cmd^0,w,c
  2562   000CF6  0BEF               	andlw	-17
  2563   000CF8  1807               	xorwf	??_lcd_cmd^0,w,c
  2564   000CFA  6E83               	movwf	131,c	;volatile
  2565                           
  2566                           ;LCD4b.c: 43:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  2567   000CFC  0E20               	movlw	32
  2568   000CFE  6E05               	movwf	set_bit@comp^0,c
  2569   000D00  5008               	movf	lcd_cmd@cmd^0,w,c
  2570   000D02  ECFC  F008         	call	_set_bit
  2571   000D06  6E07               	movwf	??_lcd_cmd^0,c
  2572   000D08  3A07               	swapf	??_lcd_cmd^0,f,c
  2573   000D0A  4607               	rlncf	??_lcd_cmd^0,f,c
  2574   000D0C  5083               	movf	131,w,c	;volatile
  2575   000D0E  1807               	xorwf	??_lcd_cmd^0,w,c
  2576   000D10  0BDF               	andlw	-33
  2577   000D12  1807               	xorwf	??_lcd_cmd^0,w,c
  2578   000D14  6E83               	movwf	131,c	;volatile
  2579                           
  2580                           ;LCD4b.c: 44:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  2581   000D16  0E40               	movlw	64
  2582   000D18  6E05               	movwf	set_bit@comp^0,c
  2583   000D1A  5008               	movf	lcd_cmd@cmd^0,w,c
  2584   000D1C  ECFC  F008         	call	_set_bit
  2585   000D20  6E07               	movwf	??_lcd_cmd^0,c
  2586   000D22  3A07               	swapf	??_lcd_cmd^0,f,c
  2587   000D24  4607               	rlncf	??_lcd_cmd^0,f,c
  2588   000D26  4607               	rlncf	??_lcd_cmd^0,f,c
  2589   000D28  5083               	movf	131,w,c	;volatile
  2590   000D2A  1807               	xorwf	??_lcd_cmd^0,w,c
  2591   000D2C  0BBF               	andlw	-65
  2592   000D2E  1807               	xorwf	??_lcd_cmd^0,w,c
  2593   000D30  6E83               	movwf	131,c	;volatile
  2594                           
  2595                           ;LCD4b.c: 45:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  2596   000D32  0E80               	movlw	128
  2597   000D34  6E05               	movwf	set_bit@comp^0,c
  2598   000D36  5008               	movf	lcd_cmd@cmd^0,w,c
  2599   000D38  ECFC  F008         	call	_set_bit
  2600   000D3C  6E07               	movwf	??_lcd_cmd^0,c
  2601   000D3E  3207               	rrcf	??_lcd_cmd^0,f,c
  2602   000D40  3207               	rrcf	??_lcd_cmd^0,f,c
  2603   000D42  5083               	movf	131,w,c	;volatile
  2604   000D44  1807               	xorwf	??_lcd_cmd^0,w,c
  2605   000D46  0B7F               	andlw	-129
  2606   000D48  1807               	xorwf	??_lcd_cmd^0,w,c
  2607   000D4A  6E83               	movwf	131,c	;volatile
  2608   000D4C                     
  2609                           ;LCD4b.c: 47:     PORTEbits.RE1 = 1;
  2610   000D4C  8284               	bsf	132,1,c	;volatile
  2611   000D4E                     
  2612                           ;LCD4b.c: 48:     PORTEbits.RE1 = 0;
  2613   000D4E  9284               	bcf	132,1,c	;volatile
  2614   000D50                     
  2615                           ;LCD4b.c: 50:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2616   000D50  0E42               	movlw	66
  2617   000D52                     u1007:
  2618   000D52  2EE8               	decfsz	wreg,f,c
  2619   000D54  D7FE               	bra	u1007
  2620   000D56  D000               	nop2	
  2621   000D58                     
  2622                           ;LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  2623   000D58  0E01               	movlw	1
  2624   000D5A  6E05               	movwf	set_bit@comp^0,c
  2625   000D5C  5008               	movf	lcd_cmd@cmd^0,w,c
  2626   000D5E  ECFC  F008         	call	_set_bit
  2627   000D62  6E07               	movwf	??_lcd_cmd^0,c
  2628   000D64  3A07               	swapf	??_lcd_cmd^0,f,c
  2629   000D66  5083               	movf	131,w,c	;volatile
  2630   000D68  1807               	xorwf	??_lcd_cmd^0,w,c
  2631   000D6A  0BEF               	andlw	-17
  2632   000D6C  1807               	xorwf	??_lcd_cmd^0,w,c
  2633   000D6E  6E83               	movwf	131,c	;volatile
  2634   000D70                     
  2635                           ;LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  2636   000D70  0E02               	movlw	2
  2637   000D72  6E05               	movwf	set_bit@comp^0,c
  2638   000D74  5008               	movf	lcd_cmd@cmd^0,w,c
  2639   000D76  ECFC  F008         	call	_set_bit
  2640   000D7A  6E07               	movwf	??_lcd_cmd^0,c
  2641   000D7C  3A07               	swapf	??_lcd_cmd^0,f,c
  2642   000D7E  4607               	rlncf	??_lcd_cmd^0,f,c
  2643   000D80  5083               	movf	131,w,c	;volatile
  2644   000D82  1807               	xorwf	??_lcd_cmd^0,w,c
  2645   000D84  0BDF               	andlw	-33
  2646   000D86  1807               	xorwf	??_lcd_cmd^0,w,c
  2647   000D88  6E83               	movwf	131,c	;volatile
  2648   000D8A                     
  2649                           ;LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  2650   000D8A  0E04               	movlw	4
  2651   000D8C  6E05               	movwf	set_bit@comp^0,c
  2652   000D8E  5008               	movf	lcd_cmd@cmd^0,w,c
  2653   000D90  ECFC  F008         	call	_set_bit
  2654   000D94  6E07               	movwf	??_lcd_cmd^0,c
  2655   000D96  3A07               	swapf	??_lcd_cmd^0,f,c
  2656   000D98  4607               	rlncf	??_lcd_cmd^0,f,c
  2657   000D9A  4607               	rlncf	??_lcd_cmd^0,f,c
  2658   000D9C  5083               	movf	131,w,c	;volatile
  2659   000D9E  1807               	xorwf	??_lcd_cmd^0,w,c
  2660   000DA0  0BBF               	andlw	-65
  2661   000DA2  1807               	xorwf	??_lcd_cmd^0,w,c
  2662   000DA4  6E83               	movwf	131,c	;volatile
  2663   000DA6                     
  2664                           ;LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  2665   000DA6  0E08               	movlw	8
  2666   000DA8  6E05               	movwf	set_bit@comp^0,c
  2667   000DAA  5008               	movf	lcd_cmd@cmd^0,w,c
  2668   000DAC  ECFC  F008         	call	_set_bit
  2669   000DB0  6E07               	movwf	??_lcd_cmd^0,c
  2670   000DB2  3207               	rrcf	??_lcd_cmd^0,f,c
  2671   000DB4  3207               	rrcf	??_lcd_cmd^0,f,c
  2672   000DB6  5083               	movf	131,w,c	;volatile
  2673   000DB8  1807               	xorwf	??_lcd_cmd^0,w,c
  2674   000DBA  0B7F               	andlw	-129
  2675   000DBC  1807               	xorwf	??_lcd_cmd^0,w,c
  2676   000DBE  6E83               	movwf	131,c	;volatile
  2677   000DC0                     
  2678                           ;LCD4b.c: 57:     PORTEbits.RE1 = 1;
  2679   000DC0  8284               	bsf	132,1,c	;volatile
  2680   000DC2                     
  2681                           ;LCD4b.c: 58:     PORTEbits.RE1 = 0;
  2682   000DC2  9284               	bcf	132,1,c	;volatile
  2683   000DC4  0012               	return		;funcret
  2684   000DC6                     __end_of_lcd_cmd:
  2685                           	callstack 0
  2686                           
  2687 ;; *************** function _set_bit *****************
  2688 ;; Defined at:
  2689 ;;		line 34 in file "LCD4b.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  cmd             1    wreg     unsigned char 
  2692 ;;  comp            1    4[COMRAM] unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  cmd             1    5[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      unsigned char 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2704 ;;      Params:         1       0       0       0       0       0       0
  2705 ;;      Locals:         1       0       0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0
  2707 ;;      Totals:         2       0       0       0       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used: 1
  2710 ;; Hardware stack levels required when called: 1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_lcd_cmd
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text16
  2719   0011F8                     __ptext16:
  2720                           	callstack 0
  2721   0011F8                     _set_bit:
  2722                           	callstack 26
  2723                           
  2724                           ;incstack = 0
  2725                           ;set_bit@cmd stored from wreg
  2726   0011F8  6E06               	movwf	set_bit@cmd^0,c
  2727   0011FA                     
  2728                           ;LCD4b.c: 34: char set_bit(char cmd, char comp);LCD4b.c: 35: {;LCD4b.c: 36:     if((cmd 
      +                          & comp) >= 1) return 1;
  2729   0011FA  5006               	movf	set_bit@cmd^0,w,c
  2730   0011FC  1405               	andwf	set_bit@comp^0,w,c
  2731   0011FE  0900               	iorlw	0
  2732   001200  B4D8               	btfsc	status,2,c
  2733   001202  EF05  F009         	goto	u701
  2734   001206  EF07  F009         	goto	u700
  2735   00120A                     u701:
  2736   00120A  EF0A  F009         	goto	l1372
  2737   00120E                     u700:
  2738   00120E  0E01               	movlw	1
  2739   001210  EF0B  F009         	goto	l90
  2740   001214                     l1372:
  2741   001214  0E00               	movlw	0
  2742   001216                     l90:
  2743   001216  0012               	return		;funcret
  2744   001218                     __end_of_set_bit:
  2745                           	callstack 0
  2746                           
  2747 ;; *************** function _config_TIMER0 *****************
  2748 ;; Defined at:
  2749 ;;		line 102 in file "Program_main.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2763 ;;      Params:         0       0       0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used: 1
  2769 ;; Hardware stack levels required when called: 1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text17
  2778   001236                     __ptext17:
  2779                           	callstack 0
  2780   001236                     _config_TIMER0:
  2781                           	callstack 29
  2782   001236                     
  2783                           ;Program_main.c: 105:     T0CON = 0XC7;
  2784   001236  0EC7               	movlw	199
  2785   001238  6ED5               	movwf	213,c	;volatile
  2786                           
  2787                           ;Program_main.c: 113:     TMR0 = 61;
  2788   00123A  0E00               	movlw	0
  2789   00123C  6ED7               	movwf	215,c	;volatile
  2790   00123E  0E3D               	movlw	61
  2791   001240  6ED6               	movwf	214,c	;volatile
  2792   001242  0012               	return		;funcret
  2793   001244                     __end_of_config_TIMER0:
  2794                           	callstack 0
  2795                           
  2796 ;; *************** function _config_IO *****************
  2797 ;; Defined at:
  2798 ;;		line 77 in file "Program_main.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         0       0       0       0       0       0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         0       0       0       0       0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels used: 1
  2818 ;; Hardware stack levels required when called: 1
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text18
  2827   001244                     __ptext18:
  2828                           	callstack 0
  2829   001244                     _config_IO:
  2830                           	callstack 29
  2831   001244                     
  2832                           ;Program_main.c: 79:     TRISB = 0X00;
  2833   001244  0E00               	movlw	0
  2834   001246  6E93               	movwf	147,c	;volatile
  2835                           
  2836                           ;Program_main.c: 80:     PORTB = 0X01;
  2837   001248  0E01               	movlw	1
  2838   00124A  6E81               	movwf	129,c	;volatile
  2839                           
  2840                           ;Program_main.c: 81:     ADCON1 = 0X0F;
  2841   00124C  0E0F               	movlw	15
  2842   00124E  6EC1               	movwf	193,c	;volatile
  2843   001250  0012               	return		;funcret
  2844   001252                     __end_of_config_IO:
  2845                           	callstack 0
  2846                           
  2847 ;; *************** function _config_INTERRUPT *****************
  2848 ;; Defined at:
  2849 ;;		line 90 in file "Program_main.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2863 ;;      Params:         0       0       0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used: 1
  2869 ;; Hardware stack levels required when called: 1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text19
  2878   00125C                     __ptext19:
  2879                           	callstack 0
  2880   00125C                     _config_INTERRUPT:
  2881                           	callstack 29
  2882   00125C                     
  2883                           ;Program_main.c: 92:     INTCON = 0xA0;
  2884   00125C  0EA0               	movlw	160
  2885   00125E  6EF2               	movwf	242,c	;volatile
  2886   001260  0012               	return		;funcret
  2887   001262                     __end_of_config_INTERRUPT:
  2888                           	callstack 0
  2889                           
  2890 ;; *************** function _config_FOSC *****************
  2891 ;; Defined at:
  2892 ;;		line 84 in file "Program_main.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2906 ;;      Params:         0       0       0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used: 1
  2912 ;; Hardware stack levels required when called: 1
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text20
  2921   001252                     __ptext20:
  2922                           	callstack 0
  2923   001252                     _config_FOSC:
  2924                           	callstack 29
  2925   001252                     
  2926                           ;Program_main.c: 86:     OSCCON = 0X72;
  2927   001252  0E72               	movlw	114
  2928   001254  6ED3               	movwf	211,c	;volatile
  2929                           
  2930                           ;Program_main.c: 87:     OSCTUNE = 0X00;
  2931   001256  0E00               	movlw	0
  2932   001258  6E9B               	movwf	155,c	;volatile
  2933   00125A  0012               	return		;funcret
  2934   00125C                     __end_of_config_FOSC:
  2935                           	callstack 0
  2936                           
  2937 ;; *************** function _intern_TMR0 *****************
  2938 ;; Defined at:
  2939 ;;		line 127 in file "Program_main.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;		None
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;		None
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2953 ;;      Params:         0       0       0       0       0       0       0
  2954 ;;      Locals:         0       0       0       0       0       0       0
  2955 ;;      Temps:          4       0       0       0       0       0       0
  2956 ;;      Totals:         4       0       0       0       0       0       0
  2957 ;;Total ram usage:        4 bytes
  2958 ;; Hardware stack levels used: 1
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		Interrupt level 1
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	intcodelo
  2967   000018                     __pintcodelo:
  2968                           	callstack 0
  2969   000018                     _intern_TMR0:
  2970                           	callstack 22
  2971                           
  2972                           ;incstack = 0
  2973   000018  807B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2974   00001A  CFD8 F002          	movff	status,??_intern_TMR0+1
  2975   00001E  CFE8 F003          	movff	wreg,??_intern_TMR0+2
  2976   000022  CFE0 F004          	movff	bsr,??_intern_TMR0+3
  2977   000026                     
  2978                           ;Program_main.c: 129:     if (INTCONbits.TMR0IF == 1)
  2979   000026  A4F2               	btfss	242,2,c	;volatile
  2980   000028  EF18  F000         	goto	i1u44_21
  2981   00002C  EF1A  F000         	goto	i1u44_20
  2982   000030                     i1u44_21:
  2983   000030  EF69  F000         	goto	i1l57
  2984   000034                     i1u44_20:
  2985   000034                     
  2986                           ;Program_main.c: 130:     {;Program_main.c: 131:         timer_500ms++;
  2987   000034  4A78               	infsnz	_timer_500ms^0,f,c
  2988   000036  2A79               	incf	(_timer_500ms+1)^0,f,c
  2989   000038                     
  2990                           ;Program_main.c: 132:         if (timer_500ms >= 20)
  2991   000038  BE79               	btfsc	(_timer_500ms+1)^0,7,c
  2992   00003A  EF28  F000         	goto	i1u45_21
  2993   00003E  5079               	movf	(_timer_500ms+1)^0,w,c
  2994   000040  E109               	bnz	i1u45_20
  2995   000042  0E14               	movlw	20
  2996   000044  5C78               	subwf	_timer_500ms^0,w,c
  2997   000046  A0D8               	btfss	status,0,c
  2998   000048  EF28  F000         	goto	i1u45_21
  2999   00004C  EF2A  F000         	goto	i1u45_20
  3000   000050                     i1u45_21:
  3001   000050  EF66  F000         	goto	i1l54
  3002   000054                     i1u45_20:
  3003   000054                     
  3004                           ;Program_main.c: 133:         {;Program_main.c: 134:             timer_500ms = 0;
  3005   000054  0E00               	movlw	0
  3006   000056  6E79               	movwf	(_timer_500ms+1)^0,c
  3007   000058  0E00               	movlw	0
  3008   00005A  6E78               	movwf	_timer_500ms^0,c
  3009   00005C                     
  3010                           ;Program_main.c: 135:             PORTBbits.RB0 = ~PORTBbits.RB0;
  3011   00005C  B081               	btfsc	129,0,c	;volatile
  3012   00005E  EF33  F000         	goto	i1u46_21
  3013   000062  EF36  F000         	goto	i1u46_20
  3014   000066                     i1u46_21:
  3015   000066  0E01               	movlw	1
  3016   000068  EF37  F000         	goto	i1u46_26
  3017   00006C                     i1u46_20:
  3018   00006C  0E00               	movlw	0
  3019   00006E                     i1u46_26:
  3020   00006E  0AFF               	xorlw	255
  3021   000070  6E01               	movwf	??_intern_TMR0^0,c
  3022   000072  5081               	movf	129,w,c	;volatile
  3023   000074  1801               	xorwf	??_intern_TMR0^0,w,c
  3024   000076  0BFE               	andlw	-2
  3025   000078  1801               	xorwf	??_intern_TMR0^0,w,c
  3026   00007A  6E81               	movwf	129,c	;volatile
  3027   00007C                     
  3028                           ;Program_main.c: 136:             timer_1000ms++;
  3029   00007C  4A76               	infsnz	_timer_1000ms^0,f,c
  3030   00007E  2A77               	incf	(_timer_1000ms+1)^0,f,c
  3031   000080                     
  3032                           ;Program_main.c: 137:             if (timer_1000ms >= 2)
  3033   000080  BE77               	btfsc	(_timer_1000ms+1)^0,7,c
  3034   000082  EF4C  F000         	goto	i1u47_21
  3035   000086  5077               	movf	(_timer_1000ms+1)^0,w,c
  3036   000088  E109               	bnz	i1u47_20
  3037   00008A  0E02               	movlw	2
  3038   00008C  5C76               	subwf	_timer_1000ms^0,w,c
  3039   00008E  A0D8               	btfss	status,0,c
  3040   000090  EF4C  F000         	goto	i1u47_21
  3041   000094  EF4E  F000         	goto	i1u47_20
  3042   000098                     i1u47_21:
  3043   000098  EF66  F000         	goto	i1l54
  3044   00009C                     i1u47_20:
  3045   00009C                     
  3046                           ;Program_main.c: 138:             {;Program_main.c: 139:                 counter++;
  3047   00009C  4A74               	infsnz	_counter^0,f,c
  3048   00009E  2A75               	incf	(_counter+1)^0,f,c
  3049   0000A0                     
  3050                           ;Program_main.c: 140:                 if (counter > 60) counter = 0;
  3051   0000A0  BE75               	btfsc	(_counter+1)^0,7,c
  3052   0000A2  EF5C  F000         	goto	i1u48_21
  3053   0000A6  5075               	movf	(_counter+1)^0,w,c
  3054   0000A8  E109               	bnz	i1u48_20
  3055   0000AA  0E3D               	movlw	61
  3056   0000AC  5C74               	subwf	_counter^0,w,c
  3057   0000AE  A0D8               	btfss	status,0,c
  3058   0000B0  EF5C  F000         	goto	i1u48_21
  3059   0000B4  EF5E  F000         	goto	i1u48_20
  3060   0000B8                     i1u48_21:
  3061   0000B8  EF62  F000         	goto	i1l56
  3062   0000BC                     i1u48_20:
  3063   0000BC  0E00               	movlw	0
  3064   0000BE  6E75               	movwf	(_counter+1)^0,c
  3065   0000C0  0E00               	movlw	0
  3066   0000C2  6E74               	movwf	_counter^0,c
  3067   0000C4                     i1l56:
  3068                           
  3069                           ;Program_main.c: 141:                 timer_1000ms = 0;
  3070   0000C4  0E00               	movlw	0
  3071   0000C6  6E77               	movwf	(_timer_1000ms+1)^0,c
  3072   0000C8  0E00               	movlw	0
  3073   0000CA  6E76               	movwf	_timer_1000ms^0,c
  3074   0000CC                     i1l54:
  3075                           
  3076                           ;Program_main.c: 144:         TMR0L = 61;
  3077   0000CC  0E3D               	movlw	61
  3078   0000CE  6ED6               	movwf	214,c	;volatile
  3079   0000D0                     
  3080                           ;Program_main.c: 145:         INTCONbits.TMR0IF = 0;
  3081   0000D0  94F2               	bcf	242,2,c	;volatile
  3082   0000D2                     i1l57:
  3083   0000D2  C004  FFE0         	movff	??_intern_TMR0+3,bsr
  3084   0000D6  C003  FFE8         	movff	??_intern_TMR0+2,wreg
  3085   0000DA  C002  FFD8         	movff	??_intern_TMR0+1,status
  3086   0000DE  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3087   0000E0  0010               	retfie	
  3088   0000E2                     __end_of_intern_TMR0:
  3089                           	callstack 0
  3090                           
  3091                           	psect	rparam
  3092   000000                     
  3093                           	psect	temp
  3094   00007B                     btemp:
  3095                           	callstack 0
  3096   00007B                     	ds	1
  3097   000000                     int$flags	set	btemp
  3098   000000                     wtemp8	set	btemp+1
  3099   000000                     ttemp5	set	btemp+1
  3100   000000                     ttemp6	set	btemp+4
  3101   000000                     ttemp7	set	btemp+8
  3102                           
  3103                           	psect	idloc
  3104                           
  3105                           ;Config register IDLOC0 @ 0x200000
  3106                           ;	unspecified, using default values
  3107   200000                     	org	2097152
  3108   200000  FF                 	db	255
  3109                           
  3110                           ;Config register IDLOC1 @ 0x200001
  3111                           ;	unspecified, using default values
  3112   200001                     	org	2097153
  3113   200001  FF                 	db	255
  3114                           
  3115                           ;Config register IDLOC2 @ 0x200002
  3116                           ;	unspecified, using default values
  3117   200002                     	org	2097154
  3118   200002  FF                 	db	255
  3119                           
  3120                           ;Config register IDLOC3 @ 0x200003
  3121                           ;	unspecified, using default values
  3122   200003                     	org	2097155
  3123   200003  FF                 	db	255
  3124                           
  3125                           ;Config register IDLOC4 @ 0x200004
  3126                           ;	unspecified, using default values
  3127   200004                     	org	2097156
  3128   200004  FF                 	db	255
  3129                           
  3130                           ;Config register IDLOC5 @ 0x200005
  3131                           ;	unspecified, using default values
  3132   200005                     	org	2097157
  3133   200005  FF                 	db	255
  3134                           
  3135                           ;Config register IDLOC6 @ 0x200006
  3136                           ;	unspecified, using default values
  3137   200006                     	org	2097158
  3138   200006  FF                 	db	255
  3139                           
  3140                           ;Config register IDLOC7 @ 0x200007
  3141                           ;	unspecified, using default values
  3142   200007                     	org	2097159
  3143   200007  FF                 	db	255
  3144                           
  3145                           	psect	config
  3146                           
  3147                           ; Padding undefined space
  3148   300000                     	org	3145728
  3149   300000  FF                 	db	255
  3150                           
  3151                           ;Config register CONFIG1H @ 0x300001
  3152                           ;	Oscillator Selection bits
  3153                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3154                           ;	Fail-Safe Clock Monitor Enable bit
  3155                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3156                           ;	Internal/External Oscillator Switchover bit
  3157                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3158   300001                     	org	3145729
  3159   300001  08                 	db	8
  3160                           
  3161                           ;Config register CONFIG2L @ 0x300002
  3162                           ;	Power-up Timer Enable bit
  3163                           ;	PWRT = OFF, PWRT disabled
  3164                           ;	Brown-out Reset Enable bits
  3165                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3166                           ;	Brown Out Reset Voltage bits
  3167                           ;	BORV = 3, Minimum setting
  3168   300002                     	org	3145730
  3169   300002  19                 	db	25
  3170                           
  3171                           ;Config register CONFIG2H @ 0x300003
  3172                           ;	Watchdog Timer Enable bit
  3173                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3174                           ;	Watchdog Timer Postscale Select bits
  3175                           ;	WDTPS = 32768, 1:32768
  3176   300003                     	org	3145731
  3177   300003  1E                 	db	30
  3178                           
  3179                           ; Padding undefined space
  3180   300004                     	org	3145732
  3181   300004  FF                 	db	255
  3182                           
  3183                           ;Config register CONFIG3H @ 0x300005
  3184                           ;	CCP2 MUX bit
  3185                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3186                           ;	PORTB A/D Enable bit
  3187                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3188                           ;	Low-Power Timer1 Oscillator Enable bit
  3189                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3190                           ;	MCLR Pin Enable bit
  3191                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3192   300005                     	org	3145733
  3193   300005  81                 	db	129
  3194                           
  3195                           ;Config register CONFIG4L @ 0x300006
  3196                           ;	Stack Full/Underflow Reset Enable bit
  3197                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3198                           ;	Single-Supply ICSP Enable bit
  3199                           ;	LVP = OFF, Single-Supply ICSP disabled
  3200                           ;	Extended Instruction Set Enable bit
  3201                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3202                           ;	Background Debugger Enable bit
  3203                           ;	DEBUG = 0x1, unprogrammed default
  3204   300006                     	org	3145734
  3205   300006  81                 	db	129
  3206                           
  3207                           ; Padding undefined space
  3208   300007                     	org	3145735
  3209   300007  FF                 	db	255
  3210                           
  3211                           ;Config register CONFIG5L @ 0x300008
  3212                           ;	Code Protection bit
  3213                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3214                           ;	Code Protection bit
  3215                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3216                           ;	Code Protection bit
  3217                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3218                           ;	Code Protection bit
  3219                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3220   300008                     	org	3145736
  3221   300008  0F                 	db	15
  3222                           
  3223                           ;Config register CONFIG5H @ 0x300009
  3224                           ;	Boot Block Code Protection bit
  3225                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3226                           ;	Data EEPROM Code Protection bit
  3227                           ;	CPD = OFF, Data EEPROM not code-protected
  3228   300009                     	org	3145737
  3229   300009  C0                 	db	192
  3230                           
  3231                           ;Config register CONFIG6L @ 0x30000A
  3232                           ;	Write Protection bit
  3233                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3234                           ;	Write Protection bit
  3235                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3236                           ;	Write Protection bit
  3237                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3238                           ;	Write Protection bit
  3239                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3240   30000A                     	org	3145738
  3241   30000A  0F                 	db	15
  3242                           
  3243                           ;Config register CONFIG6H @ 0x30000B
  3244                           ;	Configuration Register Write Protection bit
  3245                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3246                           ;	Boot Block Write Protection bit
  3247                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3248                           ;	Data EEPROM Write Protection bit
  3249                           ;	WRTD = OFF, Data EEPROM not write-protected
  3250   30000B                     	org	3145739
  3251   30000B  E0                 	db	224
  3252                           
  3253                           ;Config register CONFIG7L @ 0x30000C
  3254                           ;	Table Read Protection bit
  3255                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3256                           ;	Table Read Protection bit
  3257                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3258                           ;	Table Read Protection bit
  3259                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3260                           ;	Table Read Protection bit
  3261                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3262   30000C                     	org	3145740
  3263   30000C  0F                 	db	15
  3264                           
  3265                           ;Config register CONFIG7H @ 0x30000D
  3266                           ;	Boot Block Table Read Protection bit
  3267                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3268   30000D                     	org	3145741
  3269   30000D  40                 	db	64
  3270                           tosu	equ	0xFFF
  3271                           tosh	equ	0xFFE
  3272                           tosl	equ	0xFFD
  3273                           stkptr	equ	0xFFC
  3274                           pclatu	equ	0xFFB
  3275                           pclath	equ	0xFFA
  3276                           pcl	equ	0xFF9
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           prodh	equ	0xFF4
  3282                           prodl	equ	0xFF3
  3283                           indf0	equ	0xFEF
  3284                           postinc0	equ	0xFEE
  3285                           postdec0	equ	0xFED
  3286                           preinc0	equ	0xFEC
  3287                           plusw0	equ	0xFEB
  3288                           fsr0h	equ	0xFEA
  3289                           fsr0l	equ	0xFE9
  3290                           wreg	equ	0xFE8
  3291                           indf1	equ	0xFE7
  3292                           postinc1	equ	0xFE6
  3293                           postdec1	equ	0xFE5
  3294                           preinc1	equ	0xFE4
  3295                           plusw1	equ	0xFE3
  3296                           fsr1h	equ	0xFE2
  3297                           fsr1l	equ	0xFE1
  3298                           bsr	equ	0xFE0
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           preinc2	equ	0xFDC
  3303                           plusw2	equ	0xFDB
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8

Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         59
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     122
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S939$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S886$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S886$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), bufferLCD(BANK0[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _intern_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _intern_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intern_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intern_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intern_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intern_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intern_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8385
                        _config_FOSC
                   _config_INTERRUPT
                          _config_IO
                      _config_TIMER0
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    5570
                                             92 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             84 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1941
                                             10 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              8 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              8 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              6 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_TIMER0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _intern_TMR0                                          4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_INTERRUPT
   _config_IO
   _config_TIMER0
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc

 _intern_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7A       1       96.8%
BITBIGSFRhlh        25      0       0      20        0.0%
BITBIGSFRhhhlh      1A      0       0      17        0.0%
BITBIGSFRhhl        11      0       0      19        0.0%
BITBIGSFRlhh         E      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      16        0.0%
BITBIGSFRhllh        4      0       0      21        0.0%
BITBIGSFRhhhll       1      0       0      18        0.0%
BITBIGSFRlhl         1      0       0      24        0.0%
BITBIGSFRhlll        1      0       0      22        0.0%
BITBIGSFRll          1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      26        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 24 11:09:31 2023

                      l42 125A                        l45 1260                        l39 1250  
                      l48 1242                        l90 1216                        l94 0DC4  
                      l86 0FC8                        l97 1234            ?_lcd_send_byte 0009  
                      bsr 000FE0                       l109 0F2E                       l226 0A30  
                     l239 0B94                       l812 0FEC                       l821 06B8  
                     l823 06C0                       l816 1042                       l824 0706  
                     l842 0CE0                       l835 08A8                       l852 11C8  
                     l790 10FE                       l855 11D0                       l848 114C  
                     l867 0E8E                       l875 1190                       l878 1262  
                     u500 0DEA                       u501 0DE6                       u510 0E12  
                     u511 0E0E                       u600 09F0                       u520 0E48  
                     u601 09EC                       u521 0E44                       u610 0A44  
                     u530 1190                       u611 0A40                       u531 118C  
                     u700 120E                       u540 08BC                       u620 0A76  
                     u701 120A                       u541 08B8                       u621 0A72  
                     u550 08EE                       u630 0AB4                       u710 065E  
                     u551 08EA                       u631 0AB0                       u711 0658  
                     u640 0ADE                       u800 0872                       u720 0660  
                     u561 0918                       u641 0ADA                       u801 086E  
                     u570 093C                       u650 0B0C                       u490 0DD8  
                     u730 0672                       u810 0BBA                       u571 0938  
                     u651 0B08                       u491 0DD4                       u731 066E  
                     u811 0BB6                       u900 0F1E                       u580 0966  
                     u660 0B54                       u740 06AC                       u820 0C04  
                     u581 0962                       u661 0B50                       u741 06A8  
                     u821 0C00                       u910 0F2E                       u590 09A6  
                     u670 0FD8                       u750 06D8                       u830 0C20  
                     u911 0F2A                       u591 09A2                       u671 0FD4  
                     u751 06D4                       u831 0C1C                       u680 102E  
                     u760 06EE                       u681 102A                       u761 06EA  
                     u690 11AC                       u770 082A                       u850 1144  
                     u907 0F14                       u691 11A8                       u771 0826  
                     u851 1140                       u860 0F7A                       u780 0848  
                     u861 0F76                       u845 1222                       u781 0844  
                     u846 1224                       u870 0EA2                       u790 0862  
                     u927 1226                       u871 0E9E                       u791 085E  
                     u880 0EBE                       u937 0F46                       u881 0EBA  
                     u890 0EF2                       u947 0F60                       u957 0F82  
                     u967 0F90                       u977 0FA2                       u897 0EE8  
                     u987 0FB4                       u997 0FC2                       _abs 1192  
                     _pad 0FCA                       wreg 000FE8                      ?_abs 0017  
                    l1300 09DA                      l1302 09E0                      l1310 0A32  
                    l1304 09F0                      l1320 0A76                      l1312 0A36  
                    l1400 070E                      l1306 0A10                      l1330 0ADE  
                    l1322 0A96                      l1314 0A44                      l1250 0DF4  
                    l1410 07AC                      l1402 0718                      l1500 125C  
                    l1340 0B54                      l1332 0B0C                      l1324 0AB4  
                    l1316 0A64                      l1252 0E12                      l1244 0DC6  
                    l1260 115A                      l1420 0872                      l1404 071E  
                    l1412 0810                      l1502 1236                      l1430 0D4C  
                    l1510 0F3C                      l1270 08BC                      l1342 0B74  
                    l1334 0B2C                      l1326 0ABC                      l1318 0A68  
                    l1254 0E48                      l1246 0DD8                      l1262 116C  
                    l1350 0FE4                      l1422 0878                      l1414 082A  
                    l1406 07A0                      l1440 0D8A                      l1432 0D4E  
                    l1512 0F3E                      l1504 0F30                      l1280 0912  
                    l1272 08DC                      l1336 0B3E                      l1328 0AD0  
                    l1360 1192                      l1248 0DEA                      l1264 1170  
                    l1352 0FF8                      l1424 0888                      l1416 0848  
                    l1408 07A6                      l1442 0DA6                      l1434 0D50  
                    l1530 0F7A                      l1522 0F54                      l1514 0F40  
                    l1506 0F34                      l1290 0966                      l1282 091E  
                    l1274 08E0                      l1266 08AA                      l1338 0B44  
                    l1362 11AC                      l1258 114E                      l1354 100C  
                    l1346 0FCA                      l1418 0862                      l1450 0BBA  
                    l1372 1214                      l1364 11FA                      l1444 0DC0  
                    l1436 0D58                      l1428 0CE4                      l1540 0FB2  
                    l1532 0F80                      l1524 0F5A                      l1516 0F50  
                    l1508 0F36                      l1292 0978                      l1284 093C  
                    l1276 08EE                      l1268 08AE                      l1356 1010  
                    l1348 0FD8                      l1380 0662                      l1460 0C04  
                    l1452 0BC8                      l1366 120E                      l1446 0DC2  
                    l1438 0D70                      l1542 0FBA                      l1534 0F88  
                    l1526 0F68                      l1550 0EBE                      l1294 09A6  
                    l1286 0944                      l1278 090E                      l1358 102E  
                    l1390 06D8                      l1382 0672                      l1462 0C20  
                    l1454 0BD4                      l1536 0F96                      l1528 0F6A  
                    l1480 1224                      l1552 0EC4                      l1544 0E92  
                    l1296 09C6                      l1288 0958                      l1392 06DE  
                    l1384 0692                      l1376 062E                      l1464 0C76  
                    l1456 0BD8                      l1472 0CB8                      l1448 0B96  
                    l1560 10B2                      l1538 0F9C                      l1482 122C  
                    l1554 0ED2                      l1546 0EA2                      l1298 09C8  
                    l1394 06EE                      l1386 06AC                      l1378 064E  
                    l1458 0BE8                      l1490 1128                      l1562 10C2  
                    l1484 122E                      l1556 0EFA                      l1548 0EAC  
                    l1396 06FA                      l1388 06C8                      l1468 0CA6  
                    l1492 1144                      l1564 10CA                      l1580 107C  
                    l1572 1044                      l1478 121A                      l1558 0EFE  
                    l1398 0702                      l1486 1100                      l1566 10D2  
                    l1582 1098                      l1574 1054                      l1496 1244  
                    l1488 110C                      l1568 10EE                      l1576 1058  
                    l1498 1252                      l1578 106A                      ?_pad 0015  
                    STR_1 0625                      STR_2 0611                      STR_3 061E  
                    STR_4 0601                      u1007 0D52                      i1l54 00CC  
                    i1l56 00C4                      i1l57 00D2                      _TMR0 000FD6  
                    abs@a 0017                      _dbuf 0080                      _main 1044  
                    _dtoa 062E                      _prec 0072                      pad@i 001C  
                    pad@p 0019                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf1 000FE7                      indf2 000FDF                      fsr1l 000FE1  
                    pad@w 001E                      fsr2l 000FD9                      btemp 007B  
                    start 00E2              ___param_bank 000000                     ??_abs 0019  
                   ??_pad 001B           __end_of___aodiv 0A32                     ?_main 0001  
                   ?_dtoa 0020           __end_of___aomod 0B96           ??_config_TIMER0 0005  
                   _T0CON 000FD5              vfpfcnvrt@fmt 0045                     _TMR0L 000FD6  
                   _PORTB 000F81                     _PORTD 000F83                     _TRISB 000F93  
                   _TRISD 000F95           __end_of_lcd_cmd 0DC6                     _flags 007A  
                   _fputc 0DC6                     _fputs 114E                     pad@fp 0015  
                   _width 0070                     _putch 1262                     dtoa@d 0022  
                   dtoa@i 0040                     dtoa@n 0038                     dtoa@p 0034  
                   dtoa@s 0042                     dtoa@w 0036           __end_of_set_bit 1218  
                   tablat 000FF5                     ttemp5 007C                     ttemp6 007F  
                   ttemp7 0083                     status 000FD8              ?_intern_TMR0 0001  
                   wtemp8 007C           __end_of_sprintf 1100              lcd_write@end 000E  
            lcd_write@col 000B              lcd_write@lin 000F              lcd_write@str 000C  
         __initialization 11D2              __end_of_main 10B2              __end_of_dtoa 08AA  
         ??_lcd_send_byte 000A                    ??_main 0070                    ??_dtoa 002A  
           __activetblptr 000002          _config_INTERRUPT 125C                    _ADCON1 000FC1  
                  ?_fputc 0005                    ?_fputs 000E                    ?_putch 0001  
                  i1l1210 0034                    i1l1220 0080                    i1l1212 0038  
                  i1l1222 009C                    i1l1214 0054                    i1l1224 00A0  
                  i1l1216 005C                    i1l1208 0026                    i1l1226 00BC  
                  i1l1218 007C                    i1l1228 00D0                    _INTCON 000FF2  
                  _OSCCON 000FD3              vfprintf@cfmt 005B          __end_of_lcd_init 0FCA  
               ??___aodiv 0015                 ??___aomod 0015                    clear_0 11D8  
                  clear_1 11E4                    isa$std 000001                    pad@buf 0017  
               ??_lcd_cmd 0007                    dtoa@fp 0020                    fputc@c 0005  
                  fputs@c 0012                    fputs@i 0013                    fputs@s 000E  
            __mediumconst 0000                 ??_set_bit 0006                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                    putch@c 0001  
        __end_of_vfprintf 114E                 ??_sprintf 0063                __accesstop 0080  
 __end_of__initialization 11EA             ___rparam_used 000001            __pcstackCOMRAM 0001  
           __end_of_fputc 0E90             __end_of_fputs 1192             __end_of_putch 1264  
                 ??_fputc 0009                   ??_fputs 0012                   ??_putch 0005  
              __pbssBANK0 0080        lcd_send_byte@level 000A                   i1u44_20 0034  
                 i1u44_21 0030                   i1u45_20 0054                   i1u45_21 0050  
                 i1u46_20 006C                   i1u46_21 0066                   i1u46_26 006E  
                 i1u47_20 009C                   i1u47_21 0098                   i1u48_20 00BC  
                 i1u48_21 00B8                   _OSCTUNE 000F9B                 ?_lcd_init 0001  
__end_of_config_INTERRUPT 1262                   __Hparam 0000                   __Lparam 0000  
       __end_of_config_IO 1252                   ___aodiv 08AA                   ___aomod 0A32  
       __end_of_lcd_write 0F30                 ?_vfprintf 0055               set_bit@comp 0005  
            __psmallconst 0600                   __pcinit 11D2                   __ramtop 0600  
                 __ptext0 1044                   __ptext1 10B2                   __ptext2 1100  
                 __ptext3 0B96                   __ptext4 062E                   __ptext5 0FCA  
                 __ptext6 114E                   __ptext7 0DC6                   __ptext8 1262  
                 __ptext9 1192                   _lcd_cmd 0CE2                   _counter 0074  
   __end_of_config_TIMER0 1244                   _set_bit 11F8                   _sprintf 10B2  
              ??_lcd_init 0009      end_of_initialization 11EA                   fputc@fp 0007  
           __Lmediumconst 0000                   fputs@fp 0010         __end_of_vfpfcnvrt 0CE2  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE          vfpfcnvrt@convarg 004B                ??_vfprintf 005B  
   __end_of_lcd_send_byte 1236                 _PORTBbits 000F81                 _PORTDbits 000F83  
               _PORTEbits 000F84                 _TRISEbits 000F96                lcd_cmd@cmd 0008  
           ??_config_FOSC 0005               vfpfcnvrt@ap 0047               vfpfcnvrt@cp 0053  
             vfpfcnvrt@fp 0043       start_initialization 11D2               __end_of_abs 11D2  
             __end_of_pad 1044               vfprintf@fmt 0057       __end_of_config_FOSC 125C  
             __pbssCOMRAM 0070          ___aodiv@dividend 0005             ??_intern_TMR0 0001  
       ?_config_INTERRUPT 0001        ??_config_INTERRUPT 0005                  ?___aodiv 0005  
                ?___aomod 0005          ___aodiv@quotient 0017                 _bufferLCD 00A0  
             __pintcodelo 0018                 _config_IO 1244         lcd_send_byte@data 0009  
                ?_lcd_cmd 0001                 _lcd_write 0E90               __smallconst 0600  
                ?_set_bit 0005                set_bit@cmd 0006                  ?_sprintf 005D  
             _config_FOSC 1252       __end_of_intern_TMR0 00E2                 _vfpfcnvrt 0B96  
              ?_config_IO 0001                ?_lcd_write 000B                 lcd_init@i 000A  
                __Hrparam 0000                vfprintf@ap 0059                  __Lrparam 0000  
              vfprintf@fp 0055                ?_vfpfcnvrt 0043           ___aodiv@divisor 000D  
         ___aodiv@counter 0015                sprintf@fmt 005F                  _dtoa$967 0032  
                __ptext10 0A32                  __ptext11 08AA                  __ptext20 1252  
                __ptext12 0E90                  __ptext13 1218                  __ptext14 0F30  
                __ptext15 0CE2                  __ptext16 11F8                  __ptext17 1236  
                __ptext18 1244                  __ptext19 125C                  _lcd_init 0F30  
             _intern_TMR0 0018                  isa$xinst 000000                  int$flags 007B  
                _vfprintf 1100               ??_config_IO 0005              _timer_1000ms 0076  
             ??_lcd_write 000E          ___aomod@dividend 0005                _INTCONbits 000FF2  
           _config_TIMER0 1236                  intlevel1 0000                 sprintf@ap 0063  
         ___aomod@divisor 000D               _timer_500ms 0078               ??_vfpfcnvrt 0049  
         ___aomod@counter 0015             _lcd_send_byte 1218                  sprintf@f 0065  
                sprintf@s 005D            ?_config_TIMER0 0001              ___aodiv@sign 0016  
            ?_config_FOSC 0001              ___aomod@sign 0016  
