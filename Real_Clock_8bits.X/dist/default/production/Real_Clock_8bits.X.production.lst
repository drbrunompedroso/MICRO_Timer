

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 10 15:57:46 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Generated 23/03/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77   000000                     _PORTDbits	set	3971
    78   000000                     _PORTBbits	set	3969
    79   000000                     _INTCONbits	set	4082
    80   000000                     _PORTB	set	3969
    81   000000                     _TRISB	set	3987
    82   000000                     _TRISD	set	3989
    83   000000                     _OSCTUNE	set	3995
    84   000000                     _ADCON1	set	4033
    85   000000                     _PORTD	set	3971
    86   000000                     _OSCCON	set	4051
    87   000000                     _T0CON	set	4053
    88   000000                     _INTCON	set	4082
    89   000000                     _TMR0	set	4054
    90   000000                     _TRISEbits	set	3990
    91   000000                     _PORTEbits	set	3972
    92                           
    93                           	psect	smallconst
    94   000600                     __psmallconst:
    95                           	callstack 0
    96   000600  00                 	db	0
    97   000601                     STR_1:
    98   000601  52                 	db	82	;'R'
    99   000602  45                 	db	69	;'E'
   100   000603  41                 	db	65	;'A'
   101   000604  4C                 	db	76	;'L'
   102   000605  20                 	db	32
   103   000606  43                 	db	67	;'C'
   104   000607  4C                 	db	76	;'L'
   105   000608  4F                 	db	79	;'O'
   106   000609  43                 	db	67	;'C'
   107   00060A  4B                 	db	75	;'K'
   108   00060B  20                 	db	32
   109   00060C  38                 	db	56	;'8'
   110   00060D  62                 	db	98	;'b'
   111   00060E  69                 	db	105	;'i'
   112   00060F  74                 	db	116	;'t'
   113   000610  73                 	db	115	;'s'
   114   000611  00                 	db	0
   115   000612                     STR_3:
   116   000612  20                 	db	32
   117   000613  20                 	db	32
   118   000614  20                 	db	32
   119   000615  20                 	db	32
   120   000616  20                 	db	32
   121   000617  20                 	db	32
   122   000618  20                 	db	32
   123   000619  20                 	db	32
   124   00061A  20                 	db	32
   125   00061B  20                 	db	32
   126   00061C  20                 	db	32
   127   00061D  20                 	db	32
   128   00061E  20                 	db	32
   129   00061F  20                 	db	32
   130   000620  20                 	db	32
   131   000621  00                 	db	0
   132   000622                     STR_2:
   133   000622  25                 	db	37
   134   000623  30                 	db	48	;'0'
   135   000624  32                 	db	50	;'2'
   136   000625  64                 	db	100	;'d'
   137   000626  3A                 	db	58	;':'
   138   000627  25                 	db	37
   139   000628  30                 	db	48	;'0'
   140   000629  32                 	db	50	;'2'
   141   00062A  64                 	db	100	;'d'
   142   00062B  3A                 	db	58	;':'
   143   00062C  25                 	db	37
   144   00062D  30                 	db	48	;'0'
   145   00062E  32                 	db	50	;'2'
   146   00062F  64                 	db	100	;'d'
   147   000630  00                 	db	0
   148   000631  00                 	db	0	; dummy byte at the end
   149   000000                     
   150                           ; #config settings
   151                           
   152                           	psect	cinit
   153   00154E                     __pcinit:
   154                           	callstack 0
   155   00154E                     start_initialization:
   156                           	callstack 0
   157   00154E                     __initialization:
   158                           	callstack 0
   159                           
   160                           ; Clear objects allocated to BANK0 (56 bytes)
   161   00154E  EE00  F080         	lfsr	0,__pbssBANK0
   162   001552  0E38               	movlw	56
   163   001554                     clear_0:
   164   001554  6AEE               	clrf	postinc0,c
   165   001556  06E8               	decf	wreg,f,c
   166   001558  E1FD               	bnz	clear_0
   167                           
   168                           ; Clear objects allocated to COMRAM (7 bytes)
   169   00155A  EE00  F06A         	lfsr	0,__pbssCOMRAM
   170   00155E  0E07               	movlw	7
   171   001560                     clear_1:
   172   001560  6AEE               	clrf	postinc0,c
   173   001562  06E8               	decf	wreg,f,c
   174   001564  E1FD               	bnz	clear_1
   175   001566                     end_of_initialization:
   176                           	callstack 0
   177   001566                     __end_of__initialization:
   178                           	callstack 0
   179   001566  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   180   001568  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   181   00156A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   182   00156C  6EF8               	movwf	tblptru,c
   183   00156E  0100               	movlb	0
   184   001570  EFA6  F009         	goto	_main	;jump to C main() function
   185                           
   186                           	psect	bssCOMRAM
   187   00006A                     __pbssCOMRAM:
   188                           	callstack 0
   189   00006A                     _width:
   190                           	callstack 0
   191   00006A                     	ds	2
   192   00006C                     _prec:
   193                           	callstack 0
   194   00006C                     	ds	2
   195   00006E                     _counterSeg:
   196                           	callstack 0
   197   00006E                     	ds	2
   198   000070                     _flags:
   199                           	callstack 0
   200   000070                     	ds	1
   201                           
   202                           	psect	bssBANK0
   203   000080                     __pbssBANK0:
   204                           	callstack 0
   205   000080                     _counterHor:
   206                           	callstack 0
   207   000080                     	ds	2
   208   000082                     _counterMin:
   209                           	callstack 0
   210   000082                     	ds	2
   211   000084                     _timer_1000ms:
   212                           	callstack 0
   213   000084                     	ds	2
   214   000086                     _timer_500ms:
   215                           	callstack 0
   216   000086                     	ds	2
   217   000088                     _dbuf:
   218                           	callstack 0
   219   000088                     	ds	32
   220   0000A8                     _bufferLCD:
   221                           	callstack 0
   222   0000A8                     	ds	16
   223                           
   224                           	psect	cstackBANK0
   225   0000B8                     __pcstackBANK0:
   226                           	callstack 0
   227   0000B8                     sprintf@ap:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0x0
   231   0000B8                     	ds	2
   232   0000BA                     sprintf@f:
   233                           	callstack 0
   234                           
   235                           ; 11 bytes @ 0x2
   236   0000BA                     	ds	11
   237                           
   238                           	psect	cstackCOMRAM
   239   000001                     __pcstackCOMRAM:
   240                           	callstack 0
   241   000001                     ??_intern_TMR0:
   242   000001                     
   243                           ; 1 bytes @ 0x0
   244   000001                     	ds	4
   245   000005                     ?_isdigit:
   246                           	callstack 0
   247   000005                     ?_isspace:
   248                           	callstack 0
   249   000005                     ?___wmul:
   250                           	callstack 0
   251   000005                     ?___aodiv:
   252                           	callstack 0
   253   000005                     ?___aomod:
   254                           	callstack 0
   255   000005                     set_bit@comp:
   256                           	callstack 0
   257   000005                     ___wmul@multiplier:
   258                           	callstack 0
   259   000005                     isdigit@c:
   260                           	callstack 0
   261   000005                     isspace@c:
   262                           	callstack 0
   263   000005                     fputc@c:
   264                           	callstack 0
   265   000005                     ___aodiv@dividend:
   266                           	callstack 0
   267   000005                     ___aomod@dividend:
   268                           	callstack 0
   269                           
   270                           ; 8 bytes @ 0x4
   271   000005                     	ds	1
   272   000006                     set_bit@cmd:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x5
   276   000006                     	ds	1
   277   000007                     ??_lcd_cmd:
   278   000007                     ??_isdigit:
   279   000007                     ??_isspace:
   280   000007                     ___wmul@multiplicand:
   281                           	callstack 0
   282   000007                     fputc@fp:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x6
   286   000007                     	ds	1
   287   000008                     lcd_cmd@cmd:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x7
   291   000008                     	ds	1
   292   000009                     ??_lcd_init:
   293   000009                     ??_fputc:
   294   000009                     lcd_send_byte@data:
   295                           	callstack 0
   296   000009                     _isspace$1026:
   297                           	callstack 0
   298   000009                     ___wmul@product:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x8
   302   000009                     	ds	1
   303   00000A                     lcd_init@i:
   304                           	callstack 0
   305   00000A                     lcd_send_byte@level:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0x9
   309   00000A                     	ds	1
   310   00000B                     ?_atoi:
   311                           	callstack 0
   312   00000B                     lcd_write@col:
   313                           	callstack 0
   314   00000B                     atoi@s:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xA
   318   00000B                     	ds	1
   319   00000C                     lcd_write@str:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xB
   323   00000C                     	ds	1
   324   00000D                     ??_atoi:
   325   00000D                     ___aodiv@divisor:
   326                           	callstack 0
   327   00000D                     ___aomod@divisor:
   328                           	callstack 0
   329                           
   330                           ; 8 bytes @ 0xC
   331   00000D                     	ds	1
   332   00000E                     lcd_write@end:
   333                           	callstack 0
   334   00000E                     fputs@s:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0xD
   338   00000E                     	ds	1
   339   00000F                     lcd_write@lin:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0xE
   343   00000F                     	ds	1
   344   000010                     atoi@neg:
   345                           	callstack 0
   346   000010                     fputs@fp:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0xF
   350   000010                     	ds	2
   351   000012                     fputs@c:
   352                           	callstack 0
   353   000012                     atoi@n:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x11
   357   000012                     	ds	1
   358   000013                     fputs@i:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x12
   362   000013                     	ds	2
   363   000015                     ___aodiv@counter:
   364                           	callstack 0
   365   000015                     ___aomod@counter:
   366                           	callstack 0
   367   000015                     pad@fp:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x14
   371   000015                     	ds	1
   372   000016                     ___aodiv@sign:
   373                           	callstack 0
   374   000016                     ___aomod@sign:
   375                           	callstack 0
   376                           
   377                           ; 1 bytes @ 0x15
   378   000016                     	ds	1
   379   000017                     ?_abs:
   380                           	callstack 0
   381   000017                     pad@buf:
   382                           	callstack 0
   383   000017                     abs@a:
   384                           	callstack 0
   385   000017                     ___aodiv@quotient:
   386                           	callstack 0
   387                           
   388                           ; 8 bytes @ 0x16
   389   000017                     	ds	2
   390   000019                     ??_abs:
   391   000019                     pad@p:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x18
   395   000019                     	ds	2
   396   00001B                     ??_pad:
   397                           
   398                           ; 1 bytes @ 0x1A
   399   00001B                     	ds	1
   400   00001C                     pad@i:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x1B
   404   00001C                     	ds	2
   405   00001E                     pad@w:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x1D
   409   00001E                     	ds	2
   410   000020                     dtoa@fp:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x1F
   414   000020                     	ds	2
   415   000022                     dtoa@d:
   416                           	callstack 0
   417                           
   418                           ; 8 bytes @ 0x21
   419   000022                     	ds	8
   420   00002A                     ??_dtoa:
   421                           
   422                           ; 1 bytes @ 0x29
   423   00002A                     	ds	8
   424   000032                     _dtoa$977:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x31
   428   000032                     	ds	2
   429   000034                     dtoa@p:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x33
   433   000034                     	ds	2
   434   000036                     dtoa@w:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x35
   438   000036                     	ds	2
   439   000038                     dtoa@n:
   440                           	callstack 0
   441                           
   442                           ; 8 bytes @ 0x37
   443   000038                     	ds	8
   444   000040                     dtoa@s:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x3F
   448   000040                     	ds	1
   449   000041                     dtoa@i:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x40
   453   000041                     	ds	2
   454   000043                     vfpfcnvrt@fp:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x42
   458   000043                     	ds	2
   459   000045                     vfpfcnvrt@fmt:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x44
   463   000045                     	ds	2
   464   000047                     vfpfcnvrt@ap:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x46
   468   000047                     	ds	2
   469   000049                     ??_vfpfcnvrt:
   470                           
   471                           ; 1 bytes @ 0x48
   472   000049                     	ds	3
   473   00004C                     vfpfcnvrt@convarg:
   474                           	callstack 0
   475                           
   476                           ; 8 bytes @ 0x4B
   477   00004C                     	ds	8
   478   000054                     vfpfcnvrt@done:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x53
   482   000054                     	ds	2
   483   000056                     vfpfcnvrt@cp:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x55
   487   000056                     	ds	2
   488   000058                     ?_vfprintf:
   489                           	callstack 0
   490   000058                     vfprintf@fp:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x57
   494   000058                     	ds	2
   495   00005A                     vfprintf@fmt:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x59
   499   00005A                     	ds	2
   500   00005C                     vfprintf@ap:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x5B
   504   00005C                     	ds	2
   505   00005E                     vfprintf@cfmt:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x5D
   509   00005E                     	ds	2
   510   000060                     ?_sprintf:
   511                           	callstack 0
   512   000060                     sprintf@s:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x5F
   516   000060                     	ds	2
   517   000062                     sprintf@fmt:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x61
   521   000062                     	ds	8
   522   00006A                     
   523                           ; 1 bytes @ 0x69
   524 ;;
   525 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   526 ;;
   527 ;; *************** function _main *****************
   528 ;; Defined at:
   529 ;;		line 164 in file "Program.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;		None
   532 ;; Auto vars:     Size  Location     Type
   533 ;;		None
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   543 ;;      Params:         0       0       0       0       0       0       0
   544 ;;      Locals:         0       0       0       0       0       0       0
   545 ;;      Temps:          0       0       0       0       0       0       0
   546 ;;      Totals:         0       0       0       0       0       0       0
   547 ;;Total ram usage:        0 bytes
   548 ;; Hardware stack levels required when called: 9
   549 ;; This function calls:
   550 ;;		_config_FOSC
   551 ;;		_config_INTERRUPT
   552 ;;		_config_IO
   553 ;;		_config_TIMER0
   554 ;;		_lcd_init
   555 ;;		_lcd_write
   556 ;;		_sprintf
   557 ;; This function is called by:
   558 ;;		Startup code after reset
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text0
   563   00134C                     __ptext0:
   564                           	callstack 0
   565   00134C                     _main:
   566                           	callstack 22
   567   00134C                     
   568                           ;Program.c: 166:     config_FOSC();
   569   00134C  ECFA  F00A         	call	_config_FOSC	;wreg free
   570                           
   571                           ;Program.c: 167:     config_IO();
   572   001350  ECF3  F00A         	call	_config_IO	;wreg free
   573                           
   574                           ;Program.c: 168:     config_INTERRUPT();
   575   001354  ECFF  F00A         	call	_config_INTERRUPT	;wreg free
   576                           
   577                           ;Program.c: 169:     config_TIMER0();
   578   001358  ECEC  F00A         	call	_config_TIMER0	;wreg free
   579   00135C                     
   580                           ;Program.c: 170:     lcd_init();
   581   00135C  EC57  F009         	call	_lcd_init	;wreg free
   582   001360                     
   583                           ;Program.c: 172:     lcd_write(1,1, "REAL CLOCK 8bits");
   584   001360  0E01               	movlw	1
   585   001362  6E0B               	movwf	lcd_write@col^0,c
   586   001364  0E01               	movlw	low STR_1
   587   001366  6E0C               	movwf	lcd_write@str^0,c
   588   001368  0E06               	movlw	high STR_1
   589   00136A  6E0D               	movwf	(lcd_write@str+1)^0,c
   590   00136C  0E01               	movlw	1
   591   00136E  EC07  F009         	call	_lcd_write
   592   001372                     l2281:
   593                           
   594                           ;Program.c: 175:     {;Program.c: 176:         sprintf(bufferLCD, "%02d:%02d:%02d", coun
      +                          terHor, counterMin, counterSeg);
   595   001372  0EA8               	movlw	low _bufferLCD
   596   001374  6E60               	movwf	sprintf@s^0,c
   597   001376  0E00               	movlw	high _bufferLCD
   598   001378  6E61               	movwf	(sprintf@s+1)^0,c
   599   00137A  0E22               	movlw	low STR_2
   600   00137C  6E62               	movwf	sprintf@fmt^0,c
   601   00137E  0E06               	movlw	high STR_2
   602   001380  6E63               	movwf	(sprintf@fmt+1)^0,c
   603   001382  C080  F064         	movff	_counterHor,?_sprintf+4
   604   001386  C081  F065         	movff	_counterHor+1,?_sprintf+5
   605   00138A  C082  F066         	movff	_counterMin,?_sprintf+6
   606   00138E  C083  F067         	movff	_counterMin+1,?_sprintf+7
   607   001392  C06E  F068         	movff	_counterSeg,?_sprintf+8
   608   001396  C06F  F069         	movff	_counterSeg+1,?_sprintf+9
   609   00139A  ECDC  F009         	call	_sprintf	;wreg free
   610   00139E                     
   611                           ;Program.c: 177:         lcd_write(2, 5, bufferLCD);
   612   00139E  0E05               	movlw	5
   613   0013A0  6E0B               	movwf	lcd_write@col^0,c
   614   0013A2  0EA8               	movlw	low _bufferLCD
   615   0013A4  6E0C               	movwf	lcd_write@str^0,c
   616   0013A6  0E00               	movlw	high _bufferLCD
   617   0013A8  6E0D               	movwf	(lcd_write@str+1)^0,c
   618   0013AA  0E02               	movlw	2
   619   0013AC  EC07  F009         	call	_lcd_write
   620   0013B0  EFB9  F009         	goto	l2281
   621   0013B4  EF9C  F000         	goto	start
   622   0013B8                     __end_of_main:
   623                           	callstack 0
   624                           
   625 ;; *************** function _sprintf *****************
   626 ;; Defined at:
   627 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  s               2   95[COMRAM] PTR unsigned char 
   630 ;;		 -> bufferLCD(16), 
   631 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
   632 ;;		 -> STR_2(15), 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  f              11    2[BANK0 ] struct _IO_FILE
   635 ;;  ap              2    0[BANK0 ] PTR void [1]
   636 ;;		 -> ?_sprintf(2), 
   637 ;;  ret             2    0        int 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2   95[COMRAM] int 
   640 ;; Registers used:
   641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   647 ;;      Params:        10       0       0       0       0       0       0
   648 ;;      Locals:         0      13       0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0
   650 ;;      Totals:        10      13       0       0       0       0       0
   651 ;;Total ram usage:       23 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; Hardware stack levels required when called: 8
   654 ;; This function calls:
   655 ;;		_vfprintf
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text1
   662   0013B8                     __ptext1:
   663                           	callstack 0
   664   0013B8                     _sprintf:
   665                           	callstack 22
   666   0013B8  0E64               	movlw	low (?_sprintf+4)
   667   0013BA  0100               	movlb	0	; () banked
   668   0013BC  6FB8               	movwf	sprintf@ap& (0+255),b
   669   0013BE  0E00               	movlw	high (?_sprintf+4)
   670   0013C0  6FB9               	movwf	(sprintf@ap+1)& (0+255),b
   671   0013C2  C060  F0BA         	movff	sprintf@s,sprintf@f
   672   0013C6  C061  F0BB         	movff	sprintf@s+1,sprintf@f+1
   673   0013CA                     
   674                           ; BSR set to: 0
   675   0013CA  0E00               	movlw	0
   676   0013CC  6FBE               	movwf	(sprintf@f+4)& (0+255),b
   677   0013CE  0E00               	movlw	0
   678   0013D0  6FBD               	movwf	(sprintf@f+3)& (0+255),b
   679   0013D2                     
   680                           ; BSR set to: 0
   681   0013D2  0E00               	movlw	0
   682   0013D4  6FC4               	movwf	(sprintf@f+10)& (0+255),b
   683   0013D6  0E00               	movlw	0
   684   0013D8  6FC3               	movwf	(sprintf@f+9)& (0+255),b
   685   0013DA                     
   686                           ; BSR set to: 0
   687   0013DA  0EBA               	movlw	low sprintf@f
   688   0013DC  6E58               	movwf	vfprintf@fp^0,c
   689   0013DE  0E00               	movlw	high sprintf@f
   690   0013E0  6E59               	movwf	(vfprintf@fp+1)^0,c
   691   0013E2  C062  F05A         	movff	sprintf@fmt,vfprintf@fmt
   692   0013E6  C063  F05B         	movff	sprintf@fmt+1,vfprintf@fmt+1
   693   0013EA  0EB8               	movlw	low sprintf@ap
   694   0013EC  6E5C               	movwf	vfprintf@ap^0,c
   695   0013EE  0E00               	movlw	high sprintf@ap
   696   0013F0  6E5D               	movwf	(vfprintf@ap+1)^0,c
   697   0013F2  EC05  F00A         	call	_vfprintf	;wreg free
   698   0013F6  0100               	movlb	0	; () banked
   699   0013F8  51BD               	movf	(sprintf@f+3)& (0+255),w,b
   700   0013FA  2460               	addwf	sprintf@s^0,w,c
   701   0013FC  6ED9               	movwf	fsr2l,c
   702   0013FE  51BE               	movf	(sprintf@f+4)& (0+255),w,b
   703   001400  2061               	addwfc	(sprintf@s+1)^0,w,c
   704   001402  6EDA               	movwf	fsr2h,c
   705   001404  0E00               	movlw	0
   706   001406  6EDF               	movwf	indf2,c
   707   001408                     
   708                           ; BSR set to: 0
   709   001408  0012               	return		;funcret
   710   00140A                     __end_of_sprintf:
   711                           	callstack 0
   712                           
   713 ;; *************** function _vfprintf *****************
   714 ;; Defined at:
   715 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  fp              2   87[COMRAM] PTR struct _IO_FILE
   718 ;;		 -> sprintf@f(11), 
   719 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   720 ;;		 -> STR_2(15), 
   721 ;;  ap              2   91[COMRAM] PTR PTR void 
   722 ;;		 -> sprintf@ap(2), 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  cfmt            2   93[COMRAM] PTR unsigned char 
   725 ;;		 -> STR_2(15), 
   726 ;; Return value:  Size  Location     Type
   727 ;;                  2   87[COMRAM] int 
   728 ;; Registers used:
   729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   735 ;;      Params:         6       0       0       0       0       0       0
   736 ;;      Locals:         2       0       0       0       0       0       0
   737 ;;      Temps:          0       0       0       0       0       0       0
   738 ;;      Totals:         8       0       0       0       0       0       0
   739 ;;Total ram usage:        8 bytes
   740 ;; Hardware stack levels used: 1
   741 ;; Hardware stack levels required when called: 7
   742 ;; This function calls:
   743 ;;		_vfpfcnvrt
   744 ;; This function is called by:
   745 ;;		_sprintf
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text2
   750   00140A                     __ptext2:
   751                           	callstack 0
   752   00140A                     _vfprintf:
   753                           	callstack 22
   754   00140A                     
   755                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   756   00140A  C05A  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
   757   00140E  C05B  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   758                           
   759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   760   001412  EF19  F00A         	goto	l2257
   761   001416                     l2255:
   762                           
   763                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   764   001416  C058  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   765   00141A  C059  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   766   00141E  0E5E               	movlw	low vfprintf@cfmt
   767   001420  6E45               	movwf	vfpfcnvrt@fmt^0,c
   768   001422  0E00               	movlw	high vfprintf@cfmt
   769   001424  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
   770   001426  C05C  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   771   00142A  C05D  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   772   00142E  EC73  F004         	call	_vfpfcnvrt	;wreg free
   773   001432                     l2257:
   774                           
   775                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   776   001432  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
   777   001436  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   778   00143A                     	if	0	;tblptru may be non-zero
   779   00143A                     	endif
   780   00143A                     	if	0	;tblptru may be non-zero
   781   00143A                     	endif
   782   00143A  0008               	tblrd		*
   783   00143C  50F5               	movf	tablat,w,c
   784   00143E  0900               	iorlw	0
   785   001440  A4D8               	btfss	status,2,c
   786   001442  EF25  F00A         	goto	u1861
   787   001446  EF27  F00A         	goto	u1860
   788   00144A                     u1861:
   789   00144A  EF0B  F00A         	goto	l2255
   790   00144E                     u1860:
   791   00144E                     
   792                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   793   00144E  0E00               	movlw	0
   794   001450  6E59               	movwf	(?_vfprintf+1)^0,c
   795   001452  0E00               	movlw	0
   796   001454  6E58               	movwf	?_vfprintf^0,c
   797   001456  0012               	return		;funcret
   798   001458                     __end_of_vfprintf:
   799                           	callstack 0
   800                           
   801 ;; *************** function _vfpfcnvrt *****************
   802 ;; Defined at:
   803 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   806 ;;		 -> sprintf@f(11), 
   807 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   808 ;;		 -> vfprintf@cfmt(2), 
   809 ;;  ap              2   70[COMRAM] PTR PTR void 
   810 ;;		 -> sprintf@ap(2), 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  convarg         8   75[COMRAM] struct .
   813 ;;  cp              2   85[COMRAM] PTR unsigned char 
   814 ;;		 -> STR_2(15), 
   815 ;;  done            2   83[COMRAM] int 
   816 ;;  i               2    0        int 
   817 ;;  c               1    0        unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   827 ;;      Params:         6       0       0       0       0       0       0
   828 ;;      Locals:        12       0       0       0       0       0       0
   829 ;;      Temps:          3       0       0       0       0       0       0
   830 ;;      Totals:        21       0       0       0       0       0       0
   831 ;;Total ram usage:       21 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; Hardware stack levels required when called: 6
   834 ;; This function calls:
   835 ;;		_atoi
   836 ;;		_dtoa
   837 ;;		_fputc
   838 ;;		_isdigit
   839 ;; This function is called by:
   840 ;;		_vfprintf
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text3
   845   0008E6                     __ptext3:
   846                           	callstack 0
   847   0008E6                     _vfpfcnvrt:
   848                           	callstack 22
   849   0008E6                     
   850                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   851   0008E6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   852   0008EA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   853   0008EE  CFDE FFF6          	movff	postinc2,tblptrl
   854   0008F2  CFDD FFF7          	movff	postdec2,tblptrh
   855   0008F6                     	if	0	;tblptru may be non-zero
   856   0008F6                     	endif
   857   0008F6                     	if	0	;tblptru may be non-zero
   858   0008F6                     	endif
   859   0008F6  0008               	tblrd		*
   860   0008F8  50F5               	movf	tablat,w,c
   861   0008FA  0A25               	xorlw	37
   862   0008FC  A4D8               	btfss	status,2,c
   863   0008FE  EF83  F004         	goto	u1791
   864   000902  EF85  F004         	goto	u1790
   865   000906                     u1791:
   866   000906  EFAB  F005         	goto	l2243
   867   00090A                     u1790:
   868   00090A                     
   869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   870   00090A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   871   00090E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   872   000912  2ADE               	incf	postinc2,f,c
   873   000914  0E00               	movlw	0
   874   000916  22DD               	addwfc	postdec2,f,c
   875   000918                     
   876                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   877   000918  0E00               	movlw	0
   878   00091A  6E6B               	movwf	(_width+1)^0,c
   879   00091C  0E00               	movlw	0
   880   00091E  6E6A               	movwf	_width^0,c
   881   000920  C06A  F070         	movff	_width,_flags
   882   000924                     
   883                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   884   000924  686C               	setf	_prec^0,c
   885   000926  686D               	setf	(_prec+1)^0,c
   886   000928                     
   887                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   888   000928  0E00               	movlw	0
   889   00092A  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   890   00092C  0E00               	movlw	0
   891   00092E  6E54               	movwf	vfpfcnvrt@done^0,c
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   894   000930  EFC4  F004         	goto	l2209
   895   000934                     l2199:
   896                           
   897                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   898   000934  8270               	bsf	_flags^0,1,c
   899   000936                     
   900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   901   000936  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   902   00093A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   903   00093E  2ADE               	incf	postinc2,f,c
   904   000940  0E00               	movlw	0
   905   000942  22DD               	addwfc	postdec2,f,c
   906                           
   907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   908   000944  EFC4  F004         	goto	l2209
   909   000948                     l2203:
   910                           
   911                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   912   000948  0E00               	movlw	0
   913   00094A  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   914   00094C  0E01               	movlw	1
   915   00094E  6E54               	movwf	vfpfcnvrt@done^0,c
   916                           
   917                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   918   000950  EFC4  F004         	goto	l2209
   919   000954                     l2207:
   920   000954  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   921   000958  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   922   00095C  CFDE FFF6          	movff	postinc2,tblptrl
   923   000960  CFDD FFF7          	movff	postdec2,tblptrh
   924   000964                     	if	0	;tblptru may be non-zero
   925   000964                     	endif
   926   000964                     	if	0	;tblptru may be non-zero
   927   000964                     	endif
   928   000964  0008               	tblrd		*
   929   000966  50F5               	movf	tablat,w,c
   930   000968  6E49               	movwf	??_vfpfcnvrt^0,c
   931   00096A  6A4A               	clrf	(??_vfpfcnvrt+1)^0,c
   932                           
   933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 1, Range of values is 0 to 0
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte            4     3 (average)
   939                           ;	Chosen strategy is simple_byte
   940   00096C  504A               	movf	(??_vfpfcnvrt+1)^0,w,c
   941   00096E  0A00               	xorlw	0	; case 0
   942   000970  B4D8               	btfsc	status,2,c
   943   000972  EFBD  F004         	goto	l2325
   944   000976  EFA4  F004         	goto	l2203
   945   00097A                     l2325:
   946                           
   947                           ; Switch size 1, requested type "simple"
   948                           ; Number of cases is 1, Range of values is 48 to 48
   949                           ; switch strategies available:
   950                           ; Name         Instructions Cycles
   951                           ; simple_byte            4     3 (average)
   952                           ;	Chosen strategy is simple_byte
   953   00097A  5049               	movf	??_vfpfcnvrt^0,w,c
   954   00097C  0A30               	xorlw	48	; case 48
   955   00097E  B4D8               	btfsc	status,2,c
   956   000980  EF9A  F004         	goto	l2199
   957   000984  EFA4  F004         	goto	l2203
   958   000988                     l2209:
   959                           
   960                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   961   000988  5054               	movf	vfpfcnvrt@done^0,w,c
   962   00098A  1055               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   963   00098C  B4D8               	btfsc	status,2,c
   964   00098E  EFCB  F004         	goto	u1801
   965   000992  EFCD  F004         	goto	u1800
   966   000996                     u1801:
   967   000996  EFAA  F004         	goto	l2207
   968   00099A                     u1800:
   969   00099A                     
   970                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
   971   00099A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   972   00099E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   973   0009A2  CFDE FFF6          	movff	postinc2,tblptrl
   974   0009A6  CFDD FFF7          	movff	postdec2,tblptrh
   975   0009AA                     	if	0	;tblptru may be non-zero
   976   0009AA                     	endif
   977   0009AA                     	if	0	;tblptru may be non-zero
   978   0009AA                     	endif
   979   0009AA  0008               	tblrd		*
   980   0009AC  50F5               	movf	tablat,w,c
   981   0009AE  0A2A               	xorlw	42
   982   0009B0  A4D8               	btfss	status,2,c
   983   0009B2  EFDD  F004         	goto	u1811
   984   0009B6  EFDF  F004         	goto	u1810
   985   0009BA                     u1811:
   986   0009BA  EF08  F005         	goto	l2219
   987   0009BE                     u1810:
   988   0009BE                     
   989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
   990   0009BE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   991   0009C2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   992   0009C6  2ADE               	incf	postinc2,f,c
   993   0009C8  0E00               	movlw	0
   994   0009CA  22DD               	addwfc	postdec2,f,c
   995                           
   996                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
   997   0009CC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   998   0009D0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   999   0009D4  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1000   0009D8  0E02               	movlw	2
  1001   0009DA  26DE               	addwf	postinc2,f,c
  1002   0009DC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1003   0009E0  0E00               	movlw	0
  1004   0009E2  22DD               	addwfc	postdec2,f,c
  1005   0009E4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1006   0009E8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1007   0009EC  CFDE F06A          	movff	postinc2,_width
  1008   0009F0  CFDD F06B          	movff	postdec2,_width+1
  1009   0009F4                     
  1010                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1011   0009F4  BE6B               	btfsc	(_width+1)^0,7,c
  1012   0009F6  EF01  F005         	goto	u1820
  1013   0009FA  EFFF  F004         	goto	u1821
  1014   0009FE                     u1821:
  1015   0009FE  EF3B  F005         	goto	l2227
  1016   000A02                     u1820:
  1017   000A02                     
  1018                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1019   000A02  8070               	bsf	_flags^0,0,c
  1020                           
  1021                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1022   000A04  6C6A               	negf	_width^0,c
  1023   000A06  1E6B               	comf	(_width+1)^0,f,c
  1024   000A08  B0D8               	btfsc	status,0,c
  1025   000A0A  2A6B               	incf	(_width+1)^0,f,c
  1026   000A0C  EF3B  F005         	goto	l2227
  1027   000A10                     l2219:
  1028                           
  1029                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1030   000A10  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1031   000A14  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1032   000A18  CFDE F00B          	movff	postinc2,atoi@s
  1033   000A1C  CFDD F00C          	movff	postdec2,atoi@s+1
  1034   000A20  EC36  F007         	call	_atoi	;wreg free
  1035   000A24  C00B  F06A         	movff	?_atoi,_width
  1036   000A28  C00C  F06B         	movff	?_atoi+1,_width+1
  1037                           
  1038                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1039   000A2C  EF1F  F005         	goto	l2225
  1040   000A30                     l2221:
  1041                           
  1042                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1043   000A30  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1044   000A34  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1045   000A38  2ADE               	incf	postinc2,f,c
  1046   000A3A  0E00               	movlw	0
  1047   000A3C  22DD               	addwfc	postdec2,f,c
  1048   000A3E                     l2225:
  1049   000A3E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1050   000A42  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1051   000A46  CFDE FFF6          	movff	postinc2,tblptrl
  1052   000A4A  CFDD FFF7          	movff	postdec2,tblptrh
  1053   000A4E                     	if	0	;tblptru may be non-zero
  1054   000A4E                     	endif
  1055   000A4E                     	if	0	;tblptru may be non-zero
  1056   000A4E                     	endif
  1057   000A4E  0008               	tblrd		*
  1058   000A50  CFF5 F049          	movff	tablat,??_vfpfcnvrt
  1059   000A54  0ED0               	movlw	208
  1060   000A56  2449               	addwf	??_vfpfcnvrt^0,w,c
  1061   000A58  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  1062   000A5A  6A4B               	clrf	(??_vfpfcnvrt+2)^0,c
  1063   000A5C  0EFF               	movlw	255
  1064   000A5E  224B               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1065   000A60  504B               	movf	(??_vfpfcnvrt+2)^0,w,c
  1066   000A62  E109               	bnz	u1830
  1067   000A64  0E0A               	movlw	10
  1068   000A66  5C4A               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1069   000A68  A0D8               	btfss	status,0,c
  1070   000A6A  EF39  F005         	goto	u1831
  1071   000A6E  EF3B  F005         	goto	u1830
  1072   000A72                     u1831:
  1073   000A72  EF18  F005         	goto	l2221
  1074   000A76                     u1830:
  1075   000A76                     l2227:
  1076                           
  1077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1078   000A76  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1079   000A7A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1080   000A7E  CFDE F056          	movff	postinc2,vfpfcnvrt@cp
  1081   000A82  CFDD F057          	movff	postdec2,vfpfcnvrt@cp+1
  1082   000A86                     
  1083                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1084   000A86  C056  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1085   000A8A  C057  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1086   000A8E                     	if	0	;tblptru may be non-zero
  1087   000A8E                     	endif
  1088   000A8E                     	if	0	;tblptru may be non-zero
  1089   000A8E                     	endif
  1090   000A8E  0008               	tblrd		*
  1091   000A90  50F5               	movf	tablat,w,c
  1092   000A92  0A64               	xorlw	100
  1093   000A94  B4D8               	btfsc	status,2,c
  1094   000A96  EF4F  F005         	goto	u1841
  1095   000A9A  EF51  F005         	goto	u1840
  1096   000A9E                     u1841:
  1097   000A9E  EF5F  F005         	goto	l2233
  1098   000AA2                     u1840:
  1099   000AA2  C056  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1100   000AA6  C057  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1101   000AAA                     	if	0	;tblptru may be non-zero
  1102   000AAA                     	endif
  1103   000AAA                     	if	0	;tblptru may be non-zero
  1104   000AAA                     	endif
  1105   000AAA  0008               	tblrd		*
  1106   000AAC  50F5               	movf	tablat,w,c
  1107   000AAE  0A69               	xorlw	105
  1108   000AB0  A4D8               	btfss	status,2,c
  1109   000AB2  EF5D  F005         	goto	u1851
  1110   000AB6  EF5F  F005         	goto	u1850
  1111   000ABA                     u1851:
  1112   000ABA  EFA2  F005         	goto	l2239
  1113   000ABE                     u1850:
  1114   000ABE                     l2233:
  1115                           
  1116                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1117   000ABE  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1118   000AC2  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1119   000AC6  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1120   000ACA  0E02               	movlw	2
  1121   000ACC  26DE               	addwf	postinc2,f,c
  1122   000ACE  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1123   000AD2  0E00               	movlw	0
  1124   000AD4  22DD               	addwfc	postdec2,f,c
  1125   000AD6  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1126   000ADA  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1127   000ADE  CFDE F04C          	movff	postinc2,vfpfcnvrt@convarg
  1128   000AE2  CFDD F04D          	movff	postdec2,vfpfcnvrt@convarg+1
  1129   000AE6  0E00               	movlw	0
  1130   000AE8  BE4D               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1131   000AEA  0EFF               	movlw	-1
  1132   000AEC  6E4E               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1133   000AEE  6E4F               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1134   000AF0  6E50               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1135   000AF2  6E51               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1136   000AF4  6E52               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1137   000AF6  6E53               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1138                           
  1139                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1140   000AF8  0E01               	movlw	1
  1141   000AFA  2456               	addwf	vfpfcnvrt@cp^0,w,c
  1142   000AFC  6E49               	movwf	??_vfpfcnvrt^0,c
  1143   000AFE  0E00               	movlw	0
  1144   000B00  2057               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1145   000B02  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
  1146   000B04  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1147   000B08  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1148   000B0C  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
  1149   000B10  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1150   000B14                     
  1151                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1152   000B14  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1153   000B18  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1154   000B1C  C04C  F022         	movff	vfpfcnvrt@convarg,dtoa@d
  1155   000B20  C04D  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1156   000B24  C04E  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1157   000B28  C04F  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1158   000B2C  C050  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1159   000B30  C051  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1160   000B34  C052  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1161   000B38  C053  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1162   000B3C  EC19  F003         	call	_dtoa	;wreg free
  1163   000B40  EFBF  F005         	goto	l870
  1164   000B44                     l2239:
  1165                           
  1166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1167   000B44  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1168   000B48  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1169   000B4C  2ADE               	incf	postinc2,f,c
  1170   000B4E  0E00               	movlw	0
  1171   000B50  22DD               	addwfc	postdec2,f,c
  1172   000B52  EFBF  F005         	goto	l870
  1173   000B56                     l2243:
  1174                           
  1175                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1176   000B56  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1177   000B5A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1178   000B5E  CFDE FFF6          	movff	postinc2,tblptrl
  1179   000B62  CFDD FFF7          	movff	postdec2,tblptrh
  1180   000B66                     	if	0	;tblptru may be non-zero
  1181   000B66                     	endif
  1182   000B66                     	if	0	;tblptru may be non-zero
  1183   000B66                     	endif
  1184   000B66  0008               	tblrd		*
  1185   000B68  50F5               	movf	tablat,w,c
  1186   000B6A  6E05               	movwf	fputc@c^0,c
  1187   000B6C  6A06               	clrf	(fputc@c+1)^0,c
  1188   000B6E  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1189   000B72  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1190   000B76  EC4D  F008         	call	_fputc	;wreg free
  1191   000B7A  EFA2  F005         	goto	l2239
  1192   000B7E                     l870:
  1193   000B7E  0012               	return		;funcret
  1194   000B80                     __end_of_vfpfcnvrt:
  1195                           	callstack 0
  1196                           
  1197 ;; *************** function _dtoa *****************
  1198 ;; Defined at:
  1199 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1202 ;;		 -> sprintf@f(11), 
  1203 ;;  d               8   33[COMRAM] long long 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  n               8   55[COMRAM] long long 
  1206 ;;  i               2   64[COMRAM] int 
  1207 ;;  w               2   53[COMRAM] int 
  1208 ;;  p               2   51[COMRAM] int 
  1209 ;;  s               1   63[COMRAM] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1219 ;;      Params:        10       0       0       0       0       0       0
  1220 ;;      Locals:        17       0       0       0       0       0       0
  1221 ;;      Temps:          8       0       0       0       0       0       0
  1222 ;;      Totals:        35       0       0       0       0       0       0
  1223 ;;Total ram usage:       35 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 5
  1226 ;; This function calls:
  1227 ;;		___aodiv
  1228 ;;		___aomod
  1229 ;;		_abs
  1230 ;;		_pad
  1231 ;; This function is called by:
  1232 ;;		_vfpfcnvrt
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text4
  1237   000632                     __ptext4:
  1238                           	callstack 0
  1239   000632                     _dtoa:
  1240                           	callstack 22
  1241   000632                     
  1242                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1243   000632  C022  F038         	movff	dtoa@d,dtoa@n
  1244   000636  C023  F039         	movff	dtoa@d+1,dtoa@n+1
  1245   00063A  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
  1246   00063E  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
  1247   000642  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
  1248   000646  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
  1249   00064A  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
  1250   00064E  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  1251   000652                     
  1252                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1253   000652  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1254   000654  EF2E  F003         	goto	u1621
  1255   000658  EF31  F003         	goto	u1620
  1256   00065C                     u1621:
  1257   00065C  0E01               	movlw	1
  1258   00065E  EF32  F003         	goto	u1630
  1259   000662                     u1620:
  1260   000662  0E00               	movlw	0
  1261   000664                     u1630:
  1262   000664  6E40               	movwf	dtoa@s^0,c
  1263   000666                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1265   000666  5040               	movf	dtoa@s^0,w,c
  1266   000668  B4D8               	btfsc	status,2,c
  1267   00066A  EF39  F003         	goto	u1641
  1268   00066E  EF3B  F003         	goto	u1640
  1269   000672                     u1641:
  1270   000672  EF4B  F003         	goto	l2105
  1271   000676                     u1640:
  1272   000676                     
  1273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1274   000676  1E3F               	comf	(dtoa@n+7)^0,f,c
  1275   000678  1E3E               	comf	(dtoa@n+6)^0,f,c
  1276   00067A  1E3D               	comf	(dtoa@n+5)^0,f,c
  1277   00067C  1E3C               	comf	(dtoa@n+4)^0,f,c
  1278   00067E  1E3B               	comf	(dtoa@n+3)^0,f,c
  1279   000680  1E3A               	comf	(dtoa@n+2)^0,f,c
  1280   000682  1E39               	comf	(dtoa@n+1)^0,f,c
  1281   000684  6C38               	negf	dtoa@n^0,c
  1282   000686  0E00               	movlw	0
  1283   000688  2239               	addwfc	(dtoa@n+1)^0,f,c
  1284   00068A  223A               	addwfc	(dtoa@n+2)^0,f,c
  1285   00068C  223B               	addwfc	(dtoa@n+3)^0,f,c
  1286   00068E  223C               	addwfc	(dtoa@n+4)^0,f,c
  1287   000690  223D               	addwfc	(dtoa@n+5)^0,f,c
  1288   000692  223E               	addwfc	(dtoa@n+6)^0,f,c
  1289   000694  223F               	addwfc	(dtoa@n+7)^0,f,c
  1290   000696                     l2105:
  1291                           
  1292                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1293   000696  BE6D               	btfsc	(_prec+1)^0,7,c
  1294   000698  EF50  F003         	goto	u1651
  1295   00069C  EF52  F003         	goto	u1650
  1296   0006A0                     u1651:
  1297   0006A0  EF53  F003         	goto	l2109
  1298   0006A4                     u1650:
  1299   0006A4                     
  1300                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1301   0006A4  9270               	bcf	_flags^0,1,c
  1302   0006A6                     l2109:
  1303                           
  1304                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1305   0006A6  BE6D               	btfsc	(_prec+1)^0,7,c
  1306   0006A8  EF60  F003         	goto	u1660
  1307   0006AC  506D               	movf	(_prec+1)^0,w,c
  1308   0006AE  E106               	bnz	u1661
  1309   0006B0  046C               	decf	_prec^0,w,c
  1310   0006B2  B0D8               	btfsc	status,0,c
  1311   0006B4  EF5E  F003         	goto	u1661
  1312   0006B8  EF60  F003         	goto	u1660
  1313   0006BC                     u1661:
  1314   0006BC  EF66  F003         	goto	l832
  1315   0006C0                     u1660:
  1316   0006C0  0E00               	movlw	0
  1317   0006C2  6E35               	movwf	(dtoa@p+1)^0,c
  1318   0006C4  0E01               	movlw	1
  1319   0006C6  6E34               	movwf	dtoa@p^0,c
  1320   0006C8  EF6A  F003         	goto	l834
  1321   0006CC                     l832:
  1322   0006CC  C06C  F034         	movff	_prec,dtoa@p
  1323   0006D0  C06D  F035         	movff	_prec+1,dtoa@p+1
  1324   0006D4                     l834:
  1325                           
  1326                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1327   0006D4  C06A  F036         	movff	_width,dtoa@w
  1328   0006D8  C06B  F037         	movff	_width+1,dtoa@w+1
  1329   0006DC                     
  1330                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1331   0006DC  5040               	movf	dtoa@s^0,w,c
  1332   0006DE  B4D8               	btfsc	status,2,c
  1333   0006E0  EF74  F003         	goto	u1671
  1334   0006E4  EF76  F003         	goto	u1670
  1335   0006E8                     u1671:
  1336   0006E8  EF8D  F003         	goto	l835
  1337   0006EC                     u1670:
  1338   0006EC                     
  1339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1340   0006EC  0636               	decf	dtoa@w^0,f,c
  1341   0006EE  A0D8               	btfss	status,0,c
  1342   0006F0  0637               	decf	(dtoa@w+1)^0,f,c
  1343   0006F2                     
  1344                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1345   0006F2  5040               	movf	dtoa@s^0,w,c
  1346   0006F4  A4D8               	btfss	status,2,c
  1347   0006F6  EF7F  F003         	goto	u1681
  1348   0006FA  EF81  F003         	goto	u1680
  1349   0006FE                     u1681:
  1350   0006FE  EF87  F003         	goto	l2121
  1351   000702                     u1680:
  1352   000702  0E00               	movlw	0
  1353   000704  6E33               	movwf	(_dtoa$977+1)^0,c
  1354   000706  0E2B               	movlw	43
  1355   000708  6E32               	movwf	_dtoa$977^0,c
  1356   00070A  EF8B  F003         	goto	l2123
  1357   00070E                     l2121:
  1358   00070E  0E00               	movlw	0
  1359   000710  6E33               	movwf	(_dtoa$977+1)^0,c
  1360   000712  0E2D               	movlw	45
  1361   000714  6E32               	movwf	_dtoa$977^0,c
  1362   000716                     l2123:
  1363   000716  C032  F040         	movff	_dtoa$977,dtoa@s
  1364   00071A                     l835:
  1365                           
  1366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1367   00071A  0E00               	movlw	0
  1368   00071C  6E42               	movwf	(dtoa@i+1)^0,c
  1369   00071E  0E1F               	movlw	31
  1370   000720  6E41               	movwf	dtoa@i^0,c
  1371   000722                     
  1372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1373   000722  0E00               	movlw	0
  1374   000724  0100               	movlb	0	; () banked
  1375   000726  6FA7               	movwf	(_dbuf+31)& (0+255),b
  1376                           
  1377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1378   000728  EF12  F004         	goto	l2137
  1379   00072C                     l2127:
  1380                           
  1381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1382   00072C  0641               	decf	dtoa@i^0,f,c
  1383   00072E  A0D8               	btfss	status,0,c
  1384   000730  0642               	decf	(dtoa@i+1)^0,f,c
  1385   000732                     
  1386                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1387   000732  0E88               	movlw	low _dbuf
  1388   000734  2441               	addwf	dtoa@i^0,w,c
  1389   000736  6ED9               	movwf	fsr2l,c
  1390   000738  0E00               	movlw	high _dbuf
  1391   00073A  2042               	addwfc	(dtoa@i+1)^0,w,c
  1392   00073C  6EDA               	movwf	fsr2h,c
  1393   00073E  C038  F005         	movff	dtoa@n,___aomod@dividend
  1394   000742  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1395   000746  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1396   00074A  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1397   00074E  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1398   000752  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1399   000756  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1400   00075A  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1401   00075E  0E0A               	movlw	10
  1402   000760  6E0D               	movwf	___aomod@divisor^0,c
  1403   000762  0E00               	movlw	0
  1404   000764  6E0E               	movwf	(___aomod@divisor+1)^0,c
  1405   000766  0E00               	movlw	0
  1406   000768  6E0F               	movwf	(___aomod@divisor+2)^0,c
  1407   00076A  0E00               	movlw	0
  1408   00076C  6E10               	movwf	(___aomod@divisor+3)^0,c
  1409   00076E  0E00               	movlw	0
  1410   000770  6E11               	movwf	(___aomod@divisor+4)^0,c
  1411   000772  0E00               	movlw	0
  1412   000774  6E12               	movwf	(___aomod@divisor+5)^0,c
  1413   000776  0E00               	movlw	0
  1414   000778  6E13               	movwf	(___aomod@divisor+6)^0,c
  1415   00077A  0E00               	movlw	0
  1416   00077C  6E14               	movwf	(___aomod@divisor+7)^0,c
  1417   00077E  EC84  F006         	call	___aomod	;wreg free
  1418   000782  C005  F02A         	movff	?___aomod,??_dtoa
  1419   000786  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1420   00078A  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1421   00078E  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1422   000792  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1423   000796  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1424   00079A  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1425   00079E  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1426   0007A2  C02A  F017         	movff	??_dtoa,abs@a
  1427   0007A6  C02B  F018         	movff	??_dtoa+1,abs@a+1
  1428   0007AA  EC71  F00A         	call	_abs	;wreg free
  1429   0007AE  5017               	movf	?_abs^0,w,c
  1430   0007B0  0F30               	addlw	48
  1431   0007B2  6EDF               	movwf	indf2,c
  1432   0007B4                     
  1433                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1434   0007B4  0634               	decf	dtoa@p^0,f,c
  1435   0007B6  A0D8               	btfss	status,0,c
  1436   0007B8  0635               	decf	(dtoa@p+1)^0,f,c
  1437   0007BA                     
  1438                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1439   0007BA  0636               	decf	dtoa@w^0,f,c
  1440   0007BC  A0D8               	btfss	status,0,c
  1441   0007BE  0637               	decf	(dtoa@w+1)^0,f,c
  1442   0007C0                     
  1443                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1444   0007C0  C038  F005         	movff	dtoa@n,___aodiv@dividend
  1445   0007C4  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1446   0007C8  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1447   0007CC  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1448   0007D0  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1449   0007D4  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1450   0007D8  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1451   0007DC  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1452   0007E0  0E0A               	movlw	10
  1453   0007E2  6E0D               	movwf	___aodiv@divisor^0,c
  1454   0007E4  0E00               	movlw	0
  1455   0007E6  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  1456   0007E8  0E00               	movlw	0
  1457   0007EA  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  1458   0007EC  0E00               	movlw	0
  1459   0007EE  6E10               	movwf	(___aodiv@divisor+3)^0,c
  1460   0007F0  0E00               	movlw	0
  1461   0007F2  6E11               	movwf	(___aodiv@divisor+4)^0,c
  1462   0007F4  0E00               	movlw	0
  1463   0007F6  6E12               	movwf	(___aodiv@divisor+5)^0,c
  1464   0007F8  0E00               	movlw	0
  1465   0007FA  6E13               	movwf	(___aodiv@divisor+6)^0,c
  1466   0007FC  0E00               	movlw	0
  1467   0007FE  6E14               	movwf	(___aodiv@divisor+7)^0,c
  1468   000800  ECC0  F005         	call	___aodiv	;wreg free
  1469   000804  C005  F038         	movff	?___aodiv,dtoa@n
  1470   000808  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  1471   00080C  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  1472   000810  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  1473   000814  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  1474   000818  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  1475   00081C  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  1476   000820  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  1477   000824                     l2137:
  1478                           
  1479                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1480   000824  BE42               	btfsc	(dtoa@i+1)^0,7,c
  1481   000826  EF1D  F004         	goto	u1691
  1482   00082A  5042               	movf	(dtoa@i+1)^0,w,c
  1483   00082C  E108               	bnz	u1690
  1484   00082E  0441               	decf	dtoa@i^0,w,c
  1485   000830  A0D8               	btfss	status,0,c
  1486   000832  EF1D  F004         	goto	u1691
  1487   000836  EF1F  F004         	goto	u1690
  1488   00083A                     u1691:
  1489   00083A  EF4F  F004         	goto	l2147
  1490   00083E                     u1690:
  1491   00083E  5038               	movf	dtoa@n^0,w,c
  1492   000840  1039               	iorwf	(dtoa@n+1)^0,w,c
  1493   000842  103A               	iorwf	(dtoa@n+2)^0,w,c
  1494   000844  103B               	iorwf	(dtoa@n+3)^0,w,c
  1495   000846  103C               	iorwf	(dtoa@n+4)^0,w,c
  1496   000848  103D               	iorwf	(dtoa@n+5)^0,w,c
  1497   00084A  103E               	iorwf	(dtoa@n+6)^0,w,c
  1498   00084C  103F               	iorwf	(dtoa@n+7)^0,w,c
  1499   00084E  A4D8               	btfss	status,2,c
  1500   000850  EF2C  F004         	goto	u1701
  1501   000854  EF2E  F004         	goto	u1700
  1502   000858                     u1701:
  1503   000858  EF96  F003         	goto	l2127
  1504   00085C                     u1700:
  1505   00085C  BE35               	btfsc	(dtoa@p+1)^0,7,c
  1506   00085E  EF3B  F004         	goto	u1710
  1507   000862  5035               	movf	(dtoa@p+1)^0,w,c
  1508   000864  E106               	bnz	u1711
  1509   000866  0434               	decf	dtoa@p^0,w,c
  1510   000868  B0D8               	btfsc	status,0,c
  1511   00086A  EF39  F004         	goto	u1711
  1512   00086E  EF3B  F004         	goto	u1710
  1513   000872                     u1711:
  1514   000872  EF96  F003         	goto	l2127
  1515   000876                     u1710:
  1516   000876  BE37               	btfsc	(dtoa@w+1)^0,7,c
  1517   000878  EF46  F004         	goto	u1721
  1518   00087C  5037               	movf	(dtoa@w+1)^0,w,c
  1519   00087E  E108               	bnz	u1720
  1520   000880  0436               	decf	dtoa@w^0,w,c
  1521   000882  A0D8               	btfss	status,0,c
  1522   000884  EF46  F004         	goto	u1721
  1523   000888  EF48  F004         	goto	u1720
  1524   00088C                     u1721:
  1525   00088C  EF4F  F004         	goto	l2147
  1526   000890                     u1720:
  1527   000890  B270               	btfsc	_flags^0,1,c
  1528   000892  EF4D  F004         	goto	u1731
  1529   000896  EF4F  F004         	goto	u1730
  1530   00089A                     u1731:
  1531   00089A  EF96  F003         	goto	l2127
  1532   00089E                     u1730:
  1533   00089E                     l2147:
  1534                           
  1535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1536   00089E  5040               	movf	dtoa@s^0,w,c
  1537   0008A0  B4D8               	btfsc	status,2,c
  1538   0008A2  EF55  F004         	goto	u1741
  1539   0008A6  EF57  F004         	goto	u1740
  1540   0008AA                     u1741:
  1541   0008AA  EF62  F004         	goto	l2153
  1542   0008AE                     u1740:
  1543   0008AE                     
  1544                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1545   0008AE  0641               	decf	dtoa@i^0,f,c
  1546   0008B0  A0D8               	btfss	status,0,c
  1547   0008B2  0642               	decf	(dtoa@i+1)^0,f,c
  1548   0008B4                     
  1549                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1550   0008B4  0E88               	movlw	low _dbuf
  1551   0008B6  2441               	addwf	dtoa@i^0,w,c
  1552   0008B8  6ED9               	movwf	fsr2l,c
  1553   0008BA  0E00               	movlw	high _dbuf
  1554   0008BC  2042               	addwfc	(dtoa@i+1)^0,w,c
  1555   0008BE  6EDA               	movwf	fsr2h,c
  1556   0008C0  C040  FFDF         	movff	dtoa@s,indf2
  1557   0008C4                     l2153:
  1558                           
  1559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1560   0008C4  C020  F015         	movff	dtoa@fp,pad@fp
  1561   0008C8  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1562   0008CC  0E88               	movlw	low _dbuf
  1563   0008CE  2441               	addwf	dtoa@i^0,w,c
  1564   0008D0  6E17               	movwf	pad@buf^0,c
  1565   0008D2  0E00               	movlw	high _dbuf
  1566   0008D4  2042               	addwfc	(dtoa@i+1)^0,w,c
  1567   0008D6  6E18               	movwf	(pad@buf+1)^0,c
  1568   0008D8  C036  F019         	movff	dtoa@w,pad@p
  1569   0008DC  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1570   0008E0  ECB2  F008         	call	_pad	;wreg free
  1571   0008E4  0012               	return		;funcret
  1572   0008E6                     __end_of_dtoa:
  1573                           	callstack 0
  1574                           
  1575 ;; *************** function _pad *****************
  1576 ;; Defined at:
  1577 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1580 ;;		 -> sprintf@f(11), 
  1581 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1582 ;;		 -> dbuf(32), 
  1583 ;;  p               2   24[COMRAM] int 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  w               2   29[COMRAM] int 
  1586 ;;  i               2   27[COMRAM] int 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1596 ;;      Params:         6       0       0       0       0       0       0
  1597 ;;      Locals:         4       0       0       0       0       0       0
  1598 ;;      Temps:          1       0       0       0       0       0       0
  1599 ;;      Totals:        11       0       0       0       0       0       0
  1600 ;;Total ram usage:       11 bytes
  1601 ;; Hardware stack levels used: 1
  1602 ;; Hardware stack levels required when called: 4
  1603 ;; This function calls:
  1604 ;;		_fputc
  1605 ;;		_fputs
  1606 ;; This function is called by:
  1607 ;;		_dtoa
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text5
  1612   001164                     __ptext5:
  1613                           	callstack 0
  1614   001164                     _pad:
  1615                           	callstack 22
  1616   001164                     
  1617                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1618   001164  A070               	btfss	_flags^0,0,c
  1619   001166  EFB7  F008         	goto	u1531
  1620   00116A  EFB9  F008         	goto	u1530
  1621   00116E                     u1531:
  1622   00116E  EFC3  F008         	goto	l2063
  1623   001172                     u1530:
  1624   001172                     
  1625                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1626   001172  C017  F00E         	movff	pad@buf,fputs@s
  1627   001176  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1628   00117A  C015  F010         	movff	pad@fp,fputs@fp
  1629   00117E  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1630   001182  EC4F  F00A         	call	_fputs	;wreg free
  1631   001186                     l2063:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1634   001186  BE1A               	btfsc	(pad@p+1)^0,7,c
  1635   001188  EFC8  F008         	goto	u1541
  1636   00118C  EFCA  F008         	goto	u1540
  1637   001190                     u1541:
  1638   001190  EFD0  F008         	goto	l2067
  1639   001194                     u1540:
  1640   001194  C019  F01E         	movff	pad@p,pad@w
  1641   001198  C01A  F01F         	movff	pad@p+1,pad@w+1
  1642   00119C  EFD4  F008         	goto	l821
  1643   0011A0                     l2067:
  1644   0011A0  0E00               	movlw	0
  1645   0011A2  6E1F               	movwf	(pad@w+1)^0,c
  1646   0011A4  0E00               	movlw	0
  1647   0011A6  6E1E               	movwf	pad@w^0,c
  1648   0011A8                     l821:
  1649                           
  1650                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1651   0011A8  0E00               	movlw	0
  1652   0011AA  6E1D               	movwf	(pad@i+1)^0,c
  1653   0011AC  0E00               	movlw	0
  1654   0011AE  6E1C               	movwf	pad@i^0,c
  1655                           
  1656                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1657   0011B0  EFE6  F008         	goto	l2073
  1658   0011B4                     l2069:
  1659                           
  1660                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1661   0011B4  0E00               	movlw	0
  1662   0011B6  6E06               	movwf	(fputc@c+1)^0,c
  1663   0011B8  0E20               	movlw	32
  1664   0011BA  6E05               	movwf	fputc@c^0,c
  1665   0011BC  C015  F007         	movff	pad@fp,fputc@fp
  1666   0011C0  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1667   0011C4  EC4D  F008         	call	_fputc	;wreg free
  1668   0011C8                     
  1669                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1670   0011C8  4A1C               	infsnz	pad@i^0,f,c
  1671   0011CA  2A1D               	incf	(pad@i+1)^0,f,c
  1672   0011CC                     l2073:
  1673                           
  1674                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1675   0011CC  501E               	movf	pad@w^0,w,c
  1676   0011CE  5C1C               	subwf	pad@i^0,w,c
  1677   0011D0  501D               	movf	(pad@i+1)^0,w,c
  1678   0011D2  0A80               	xorlw	128
  1679   0011D4  6E1B               	movwf	??_pad^0,c
  1680   0011D6  501F               	movf	(pad@w+1)^0,w,c
  1681   0011D8  0A80               	xorlw	128
  1682   0011DA  581B               	subwfb	??_pad^0,w,c
  1683   0011DC  A0D8               	btfss	status,0,c
  1684   0011DE  EFF3  F008         	goto	u1551
  1685   0011E2  EFF5  F008         	goto	u1550
  1686   0011E6                     u1551:
  1687   0011E6  EFDA  F008         	goto	l2069
  1688   0011EA                     u1550:
  1689   0011EA                     
  1690                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1691   0011EA  B070               	btfsc	_flags^0,0,c
  1692   0011EC  EFFA  F008         	goto	u1561
  1693   0011F0  EFFC  F008         	goto	u1560
  1694   0011F4                     u1561:
  1695   0011F4  EF06  F009         	goto	l826
  1696   0011F8                     u1560:
  1697   0011F8                     
  1698                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1699   0011F8  C017  F00E         	movff	pad@buf,fputs@s
  1700   0011FC  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1701   001200  C015  F010         	movff	pad@fp,fputs@fp
  1702   001204  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1703   001208  EC4F  F00A         	call	_fputs	;wreg free
  1704   00120C                     l826:
  1705   00120C  0012               	return		;funcret
  1706   00120E                     __end_of_pad:
  1707                           	callstack 0
  1708                           
  1709 ;; *************** function _fputs *****************
  1710 ;; Defined at:
  1711 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1714 ;;		 -> dbuf(32), 
  1715 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1716 ;;		 -> sprintf@f(11), 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  i               2   18[COMRAM] int 
  1719 ;;  c               1   17[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  2   13[COMRAM] int 
  1722 ;; Registers used:
  1723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1729 ;;      Params:         4       0       0       0       0       0       0
  1730 ;;      Locals:         3       0       0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0
  1732 ;;      Totals:         7       0       0       0       0       0       0
  1733 ;;Total ram usage:        7 bytes
  1734 ;; Hardware stack levels used: 1
  1735 ;; Hardware stack levels required when called: 3
  1736 ;; This function calls:
  1737 ;;		_fputc
  1738 ;; This function is called by:
  1739 ;;		_pad
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text6
  1744   00149E                     __ptext6:
  1745                           	callstack 0
  1746   00149E                     _fputs:
  1747                           	callstack 22
  1748   00149E  0E00               	movlw	0
  1749   0014A0  6E14               	movwf	(fputs@i+1)^0,c
  1750   0014A2  0E00               	movlw	0
  1751   0014A4  6E13               	movwf	fputs@i^0,c
  1752   0014A6  EF60  F00A         	goto	l1971
  1753   0014AA                     l1967:
  1754   0014AA  C012  F005         	movff	fputs@c,fputc@c
  1755   0014AE  6A06               	clrf	(fputc@c+1)^0,c
  1756   0014B0  C010  F007         	movff	fputs@fp,fputc@fp
  1757   0014B4  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1758   0014B8  EC4D  F008         	call	_fputc	;wreg free
  1759   0014BC  4A13               	infsnz	fputs@i^0,f,c
  1760   0014BE  2A14               	incf	(fputs@i+1)^0,f,c
  1761   0014C0                     l1971:
  1762   0014C0  5013               	movf	fputs@i^0,w,c
  1763   0014C2  240E               	addwf	fputs@s^0,w,c
  1764   0014C4  6ED9               	movwf	fsr2l,c
  1765   0014C6  5014               	movf	(fputs@i+1)^0,w,c
  1766   0014C8  200F               	addwfc	(fputs@s+1)^0,w,c
  1767   0014CA  6EDA               	movwf	fsr2h,c
  1768   0014CC  50DF               	movf	indf2,w,c
  1769   0014CE  6E12               	movwf	fputs@c^0,c
  1770   0014D0  5012               	movf	fputs@c^0,w,c
  1771   0014D2  A4D8               	btfss	status,2,c
  1772   0014D4  EF6E  F00A         	goto	u1391
  1773   0014D8  EF70  F00A         	goto	u1390
  1774   0014DC                     u1391:
  1775   0014DC  EF55  F00A         	goto	l1967
  1776   0014E0                     u1390:
  1777   0014E0  0012               	return		;funcret
  1778   0014E2                     __end_of_fputs:
  1779                           	callstack 0
  1780                           
  1781 ;; *************** function _fputc *****************
  1782 ;; Defined at:
  1783 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  c               2    4[COMRAM] int 
  1786 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1787 ;;		 -> sprintf@f(11), 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  2    4[COMRAM] int 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1799 ;;      Params:         4       0       0       0       0       0       0
  1800 ;;      Locals:         0       0       0       0       0       0       0
  1801 ;;      Temps:          5       0       0       0       0       0       0
  1802 ;;      Totals:         9       0       0       0       0       0       0
  1803 ;;Total ram usage:        9 bytes
  1804 ;; Hardware stack levels used: 1
  1805 ;; Hardware stack levels required when called: 2
  1806 ;; This function calls:
  1807 ;;		_putch
  1808 ;; This function is called by:
  1809 ;;		_pad
  1810 ;;		_vfpfcnvrt
  1811 ;;		_fputs
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text7
  1816   00109A                     __ptext7:
  1817                           	callstack 0
  1818   00109A                     _fputc:
  1819                           	callstack 25
  1820   00109A  5007               	movf	fputc@fp^0,w,c
  1821   00109C  1008               	iorwf	(fputc@fp+1)^0,w,c
  1822   00109E  B4D8               	btfsc	status,2,c
  1823   0010A0  EF54  F008         	goto	u1351
  1824   0010A4  EF56  F008         	goto	u1350
  1825   0010A8                     u1351:
  1826   0010A8  EF5F  F008         	goto	l1955
  1827   0010AC                     u1350:
  1828   0010AC  5007               	movf	fputc@fp^0,w,c
  1829   0010AE  1008               	iorwf	(fputc@fp+1)^0,w,c
  1830   0010B0  A4D8               	btfss	status,2,c
  1831   0010B2  EF5D  F008         	goto	u1361
  1832   0010B6  EF5F  F008         	goto	u1360
  1833   0010BA                     u1361:
  1834   0010BA  EF64  F008         	goto	l1957
  1835   0010BE                     u1360:
  1836   0010BE                     l1955:
  1837   0010BE  5005               	movf	fputc@c^0,w,c
  1838   0010C0  EC02  F00B         	call	_putch
  1839   0010C4  EFB1  F008         	goto	l934
  1840   0010C8                     l1957:
  1841   0010C8  EE20 F009          	lfsr	2,9
  1842   0010CC  5007               	movf	fputc@fp^0,w,c
  1843   0010CE  26D9               	addwf	fsr2l,f,c
  1844   0010D0  5008               	movf	(fputc@fp+1)^0,w,c
  1845   0010D2  22DA               	addwfc	fsr2h,f,c
  1846   0010D4  50DE               	movf	postinc2,w,c
  1847   0010D6  10DE               	iorwf	postinc2,w,c
  1848   0010D8  B4D8               	btfsc	status,2,c
  1849   0010DA  EF71  F008         	goto	u1371
  1850   0010DE  EF73  F008         	goto	u1370
  1851   0010E2                     u1371:
  1852   0010E2  EF8E  F008         	goto	l1961
  1853   0010E6                     u1370:
  1854   0010E6  EE20 F009          	lfsr	2,9
  1855   0010EA  5007               	movf	fputc@fp^0,w,c
  1856   0010EC  26D9               	addwf	fsr2l,f,c
  1857   0010EE  5008               	movf	(fputc@fp+1)^0,w,c
  1858   0010F0  22DA               	addwfc	fsr2h,f,c
  1859   0010F2  EE10 F003          	lfsr	1,3
  1860   0010F6  5007               	movf	fputc@fp^0,w,c
  1861   0010F8  26E1               	addwf	fsr1l,f,c
  1862   0010FA  5008               	movf	(fputc@fp+1)^0,w,c
  1863   0010FC  22E2               	addwfc	fsr1h,f,c
  1864   0010FE  50DE               	movf	postinc2,w,c
  1865   001100  5CE6               	subwf	postinc1,w,c
  1866   001102  50E6               	movf	postinc1,w,c
  1867   001104  0A80               	xorlw	128
  1868   001106  6E0D               	movwf	(??_fputc+4)^0,c
  1869   001108  50DE               	movf	postinc2,w,c
  1870   00110A  0A80               	xorlw	128
  1871   00110C  580D               	subwfb	(??_fputc+4)^0,w,c
  1872   00110E  B0D8               	btfsc	status,0,c
  1873   001110  EF8C  F008         	goto	u1381
  1874   001114  EF8E  F008         	goto	u1380
  1875   001118                     u1381:
  1876   001118  EFB1  F008         	goto	l934
  1877   00111C                     u1380:
  1878   00111C                     l1961:
  1879   00111C  EE20 F003          	lfsr	2,3
  1880   001120  5007               	movf	fputc@fp^0,w,c
  1881   001122  26D9               	addwf	fsr2l,f,c
  1882   001124  5008               	movf	(fputc@fp+1)^0,w,c
  1883   001126  22DA               	addwfc	fsr2h,f,c
  1884   001128  CFDE F009          	movff	postinc2,??_fputc
  1885   00112C  CFDD F00A          	movff	postdec2,??_fputc+1
  1886   001130  C007  FFD9         	movff	fputc@fp,fsr2l
  1887   001134  C008  FFDA         	movff	fputc@fp+1,fsr2h
  1888   001138  CFDE F00B          	movff	postinc2,??_fputc+2
  1889   00113C  CFDD F00C          	movff	postdec2,??_fputc+3
  1890   001140  5009               	movf	??_fputc^0,w,c
  1891   001142  240B               	addwf	(??_fputc+2)^0,w,c
  1892   001144  6ED9               	movwf	fsr2l,c
  1893   001146  500A               	movf	(??_fputc+1)^0,w,c
  1894   001148  200C               	addwfc	(??_fputc+3)^0,w,c
  1895   00114A  6EDA               	movwf	fsr2h,c
  1896   00114C  C005  FFDF         	movff	fputc@c,indf2
  1897   001150  EE20 F003          	lfsr	2,3
  1898   001154  5007               	movf	fputc@fp^0,w,c
  1899   001156  26D9               	addwf	fsr2l,f,c
  1900   001158  5008               	movf	(fputc@fp+1)^0,w,c
  1901   00115A  22DA               	addwfc	fsr2h,f,c
  1902   00115C  2ADE               	incf	postinc2,f,c
  1903   00115E  0E00               	movlw	0
  1904   001160  22DD               	addwfc	postdec2,f,c
  1905   001162                     l934:
  1906   001162  0012               	return		;funcret
  1907   001164                     __end_of_fputc:
  1908                           	callstack 0
  1909                           
  1910 ;; *************** function _putch *****************
  1911 ;; Defined at:
  1912 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  c               1    wreg     unsigned char 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  c               1    0[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1926 ;;      Params:         0       0       0       0       0       0       0
  1927 ;;      Locals:         0       0       0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0
  1929 ;;      Totals:         0       0       0       0       0       0       0
  1930 ;;Total ram usage:        0 bytes
  1931 ;; Hardware stack levels used: 1
  1932 ;; Hardware stack levels required when called: 1
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_fputc
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text8
  1941   001604                     __ptext8:
  1942                           	callstack 0
  1943   001604                     _putch:
  1944                           	callstack 25
  1945   001604  0012               	return		;funcret
  1946   001606                     __end_of_putch:
  1947                           	callstack 0
  1948                           
  1949 ;; *************** function _abs *****************
  1950 ;; Defined at:
  1951 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  a               2   22[COMRAM] int 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  2   22[COMRAM] int 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1965 ;;      Params:         2       0       0       0       0       0       0
  1966 ;;      Locals:         0       0       0       0       0       0       0
  1967 ;;      Temps:          2       0       0       0       0       0       0
  1968 ;;      Totals:         4       0       0       0       0       0       0
  1969 ;;Total ram usage:        4 bytes
  1970 ;; Hardware stack levels used: 1
  1971 ;; Hardware stack levels required when called: 1
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_dtoa
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text9
  1980   0014E2                     __ptext9:
  1981                           	callstack 0
  1982   0014E2                     _abs:
  1983                           	callstack 25
  1984   0014E2  BE18               	btfsc	(abs@a+1)^0,7,c
  1985   0014E4  EF7E  F00A         	goto	u1570
  1986   0014E8  5018               	movf	(abs@a+1)^0,w,c
  1987   0014EA  E106               	bnz	u1571
  1988   0014EC  0417               	decf	abs@a^0,w,c
  1989   0014EE  B0D8               	btfsc	status,0,c
  1990   0014F0  EF7C  F00A         	goto	u1571
  1991   0014F4  EF7E  F00A         	goto	u1570
  1992   0014F8                     u1571:
  1993   0014F8  EF8C  F00A         	goto	l880
  1994   0014FC                     u1570:
  1995   0014FC  C017  F019         	movff	abs@a,??_abs
  1996   001500  C018  F01A         	movff	abs@a+1,??_abs+1
  1997   001504  1E19               	comf	??_abs^0,f,c
  1998   001506  1E1A               	comf	(??_abs+1)^0,f,c
  1999   001508  4A19               	infsnz	??_abs^0,f,c
  2000   00150A  2A1A               	incf	(??_abs+1)^0,f,c
  2001   00150C  C019  F017         	movff	??_abs,?_abs
  2002   001510  C01A  F018         	movff	??_abs+1,?_abs+1
  2003   001514  EF90  F00A         	goto	l883
  2004   001518                     l880:
  2005   001518  C017  F017         	movff	abs@a,?_abs
  2006   00151C  C018  F018         	movff	abs@a+1,?_abs+1
  2007   001520                     l883:
  2008   001520  0012               	return		;funcret
  2009   001522                     __end_of_abs:
  2010                           	callstack 0
  2011                           
  2012 ;; *************** function ___aomod *****************
  2013 ;; Defined at:
  2014 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  dividend        8    4[COMRAM] long long 
  2017 ;;  divisor         8   12[COMRAM] long long 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  sign            1   21[COMRAM] unsigned char 
  2020 ;;  counter         1   20[COMRAM] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  8    4[COMRAM] long long 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2030 ;;      Params:        16       0       0       0       0       0       0
  2031 ;;      Locals:         2       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0
  2033 ;;      Totals:        18       0       0       0       0       0       0
  2034 ;;Total ram usage:       18 bytes
  2035 ;; Hardware stack levels used: 1
  2036 ;; Hardware stack levels required when called: 1
  2037 ;; This function calls:
  2038 ;;		Nothing
  2039 ;; This function is called by:
  2040 ;;		_dtoa
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text10
  2045   000D08                     __ptext10:
  2046                           	callstack 0
  2047   000D08                     ___aomod:
  2048                           	callstack 25
  2049   000D08  0E00               	movlw	0
  2050   000D0A  6E16               	movwf	___aomod@sign^0,c
  2051   000D0C  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  2052   000D0E  EF8D  F006         	goto	u1470
  2053   000D12  EF8B  F006         	goto	u1471
  2054   000D16                     u1471:
  2055   000D16  EF9F  F006         	goto	l2031
  2056   000D1A                     u1470:
  2057   000D1A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2058   000D1C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2059   000D1E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2060   000D20  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2061   000D22  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2062   000D24  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2063   000D26  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2064   000D28  6C05               	negf	___aomod@dividend^0,c
  2065   000D2A  0E00               	movlw	0
  2066   000D2C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2067   000D2E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2068   000D30  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2069   000D32  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2070   000D34  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2071   000D36  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2072   000D38  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2073   000D3A  0E01               	movlw	1
  2074   000D3C  6E16               	movwf	___aomod@sign^0,c
  2075   000D3E                     l2031:
  2076   000D3E  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  2077   000D40  EFA6  F006         	goto	u1480
  2078   000D44  EFA4  F006         	goto	u1481
  2079   000D48                     u1481:
  2080   000D48  EFB6  F006         	goto	l2035
  2081   000D4C                     u1480:
  2082   000D4C  1E14               	comf	(___aomod@divisor+7)^0,f,c
  2083   000D4E  1E13               	comf	(___aomod@divisor+6)^0,f,c
  2084   000D50  1E12               	comf	(___aomod@divisor+5)^0,f,c
  2085   000D52  1E11               	comf	(___aomod@divisor+4)^0,f,c
  2086   000D54  1E10               	comf	(___aomod@divisor+3)^0,f,c
  2087   000D56  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  2088   000D58  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  2089   000D5A  6C0D               	negf	___aomod@divisor^0,c
  2090   000D5C  0E00               	movlw	0
  2091   000D5E  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  2092   000D60  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  2093   000D62  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  2094   000D64  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  2095   000D66  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  2096   000D68  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  2097   000D6A  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  2098   000D6C                     l2035:
  2099   000D6C  500D               	movf	___aomod@divisor^0,w,c
  2100   000D6E  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  2101   000D70  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  2102   000D72  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  2103   000D74  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  2104   000D76  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  2105   000D78  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  2106   000D7A  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  2107   000D7C  B4D8               	btfsc	status,2,c
  2108   000D7E  EFC3  F006         	goto	u1491
  2109   000D82  EFC5  F006         	goto	u1490
  2110   000D86                     u1491:
  2111   000D86  EF0D  F007         	goto	l2051
  2112   000D8A                     u1490:
  2113   000D8A  0E01               	movlw	1
  2114   000D8C  6E15               	movwf	___aomod@counter^0,c
  2115   000D8E  EFD3  F006         	goto	l2041
  2116   000D92                     l2039:
  2117   000D92  90D8               	bcf	status,0,c
  2118   000D94  360D               	rlcf	___aomod@divisor^0,f,c
  2119   000D96  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  2120   000D98  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  2121   000D9A  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  2122   000D9C  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  2123   000D9E  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  2124   000DA0  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  2125   000DA2  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  2126   000DA4  2A15               	incf	___aomod@counter^0,f,c
  2127   000DA6                     l2041:
  2128   000DA6  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  2129   000DA8  EFD8  F006         	goto	u1501
  2130   000DAC  EFDA  F006         	goto	u1500
  2131   000DB0                     u1501:
  2132   000DB0  EFC9  F006         	goto	l2039
  2133   000DB4                     u1500:
  2134   000DB4                     l2043:
  2135   000DB4  500D               	movf	___aomod@divisor^0,w,c
  2136   000DB6  5C05               	subwf	___aomod@dividend^0,w,c
  2137   000DB8  500E               	movf	(___aomod@divisor+1)^0,w,c
  2138   000DBA  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  2139   000DBC  500F               	movf	(___aomod@divisor+2)^0,w,c
  2140   000DBE  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  2141   000DC0  5010               	movf	(___aomod@divisor+3)^0,w,c
  2142   000DC2  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  2143   000DC4  5011               	movf	(___aomod@divisor+4)^0,w,c
  2144   000DC6  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  2145   000DC8  5012               	movf	(___aomod@divisor+5)^0,w,c
  2146   000DCA  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  2147   000DCC  5013               	movf	(___aomod@divisor+6)^0,w,c
  2148   000DCE  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  2149   000DD0  5014               	movf	(___aomod@divisor+7)^0,w,c
  2150   000DD2  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  2151   000DD4  A0D8               	btfss	status,0,c
  2152   000DD6  EFEF  F006         	goto	u1511
  2153   000DDA  EFF1  F006         	goto	u1510
  2154   000DDE                     u1511:
  2155   000DDE  EF01  F007         	goto	l2047
  2156   000DE2                     u1510:
  2157   000DE2  500D               	movf	___aomod@divisor^0,w,c
  2158   000DE4  5E05               	subwf	___aomod@dividend^0,f,c
  2159   000DE6  500E               	movf	(___aomod@divisor+1)^0,w,c
  2160   000DE8  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  2161   000DEA  500F               	movf	(___aomod@divisor+2)^0,w,c
  2162   000DEC  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  2163   000DEE  5010               	movf	(___aomod@divisor+3)^0,w,c
  2164   000DF0  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  2165   000DF2  5011               	movf	(___aomod@divisor+4)^0,w,c
  2166   000DF4  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  2167   000DF6  5012               	movf	(___aomod@divisor+5)^0,w,c
  2168   000DF8  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  2169   000DFA  5013               	movf	(___aomod@divisor+6)^0,w,c
  2170   000DFC  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  2171   000DFE  5014               	movf	(___aomod@divisor+7)^0,w,c
  2172   000E00  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  2173   000E02                     l2047:
  2174   000E02  90D8               	bcf	status,0,c
  2175   000E04  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  2176   000E06  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  2177   000E08  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  2178   000E0A  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  2179   000E0C  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  2180   000E0E  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  2181   000E10  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  2182   000E12  320D               	rrcf	___aomod@divisor^0,f,c
  2183   000E14  2E15               	decfsz	___aomod@counter^0,f,c
  2184   000E16  EFDA  F006         	goto	l2043
  2185   000E1A                     l2051:
  2186   000E1A  5016               	movf	___aomod@sign^0,w,c
  2187   000E1C  B4D8               	btfsc	status,2,c
  2188   000E1E  EF13  F007         	goto	u1521
  2189   000E22  EF15  F007         	goto	u1520
  2190   000E26                     u1521:
  2191   000E26  EF25  F007         	goto	l2055
  2192   000E2A                     u1520:
  2193   000E2A  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2194   000E2C  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2195   000E2E  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2196   000E30  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2197   000E32  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2198   000E34  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2199   000E36  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2200   000E38  6C05               	negf	___aomod@dividend^0,c
  2201   000E3A  0E00               	movlw	0
  2202   000E3C  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2203   000E3E  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2204   000E40  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2205   000E42  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2206   000E44  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2207   000E46  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2208   000E48  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2209   000E4A                     l2055:
  2210   000E4A  C005  F005         	movff	___aomod@dividend,?___aomod
  2211   000E4E  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  2212   000E52  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  2213   000E56  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  2214   000E5A  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  2215   000E5E  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  2216   000E62  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  2217   000E66  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  2218   000E6A  0012               	return		;funcret
  2219   000E6C                     __end_of___aomod:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function ___aodiv *****************
  2223 ;; Defined at:
  2224 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  dividend        8    4[COMRAM] long long 
  2227 ;;  divisor         8   12[COMRAM] long long 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  quotient        8   22[COMRAM] long long 
  2230 ;;  sign            1   21[COMRAM] unsigned char 
  2231 ;;  counter         1   20[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  8    4[COMRAM] long long 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:        16       0       0       0       0       0       0
  2242 ;;      Locals:        10       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0
  2244 ;;      Totals:        26       0       0       0       0       0       0
  2245 ;;Total ram usage:       26 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; Hardware stack levels required when called: 1
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_dtoa
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text11
  2256   000B80                     __ptext11:
  2257                           	callstack 0
  2258   000B80                     ___aodiv:
  2259                           	callstack 25
  2260   000B80  0E00               	movlw	0
  2261   000B82  6E16               	movwf	___aodiv@sign^0,c
  2262   000B84  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  2263   000B86  EFC9  F005         	goto	u1400
  2264   000B8A  EFC7  F005         	goto	u1401
  2265   000B8E                     u1401:
  2266   000B8E  EFDB  F005         	goto	l1987
  2267   000B92                     u1400:
  2268   000B92  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  2269   000B94  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  2270   000B96  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  2271   000B98  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  2272   000B9A  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  2273   000B9C  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  2274   000B9E  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  2275   000BA0  6C0D               	negf	___aodiv@divisor^0,c
  2276   000BA2  0E00               	movlw	0
  2277   000BA4  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  2278   000BA6  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  2279   000BA8  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  2280   000BAA  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  2281   000BAC  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  2282   000BAE  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  2283   000BB0  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  2284   000BB2  0E01               	movlw	1
  2285   000BB4  6E16               	movwf	___aodiv@sign^0,c
  2286   000BB6                     l1987:
  2287   000BB6  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  2288   000BB8  EFE2  F005         	goto	u1410
  2289   000BBC  EFE0  F005         	goto	u1411
  2290   000BC0                     u1411:
  2291   000BC0  EFF4  F005         	goto	l1993
  2292   000BC4                     u1410:
  2293   000BC4  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  2294   000BC6  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  2295   000BC8  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  2296   000BCA  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  2297   000BCC  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  2298   000BCE  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  2299   000BD0  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  2300   000BD2  6C05               	negf	___aodiv@dividend^0,c
  2301   000BD4  0E00               	movlw	0
  2302   000BD6  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  2303   000BD8  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  2304   000BDA  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  2305   000BDC  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  2306   000BDE  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  2307   000BE0  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  2308   000BE2  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  2309   000BE4  0E01               	movlw	1
  2310   000BE6  1A16               	xorwf	___aodiv@sign^0,f,c
  2311   000BE8                     l1993:
  2312   000BE8  EE20  F017         	lfsr	2,___aodiv@quotient
  2313   000BEC  0E07               	movlw	7
  2314   000BEE                     u1421:
  2315   000BEE  6ADE               	clrf	postinc2,c
  2316   000BF0  06E8               	decf	wreg,f,c
  2317   000BF2  E2FD               	bc	u1421
  2318   000BF4  500D               	movf	___aodiv@divisor^0,w,c
  2319   000BF6  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  2320   000BF8  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  2321   000BFA  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  2322   000BFC  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  2323   000BFE  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  2324   000C00  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  2325   000C02  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  2326   000C04  B4D8               	btfsc	status,2,c
  2327   000C06  EF07  F006         	goto	u1431
  2328   000C0A  EF09  F006         	goto	u1430
  2329   000C0E                     u1431:
  2330   000C0E  EF5B  F006         	goto	l2015
  2331   000C12                     u1430:
  2332   000C12  0E01               	movlw	1
  2333   000C14  6E15               	movwf	___aodiv@counter^0,c
  2334   000C16  EF17  F006         	goto	l2001
  2335   000C1A                     l1999:
  2336   000C1A  90D8               	bcf	status,0,c
  2337   000C1C  360D               	rlcf	___aodiv@divisor^0,f,c
  2338   000C1E  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  2339   000C20  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  2340   000C22  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  2341   000C24  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  2342   000C26  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  2343   000C28  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  2344   000C2A  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  2345   000C2C  2A15               	incf	___aodiv@counter^0,f,c
  2346   000C2E                     l2001:
  2347   000C2E  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  2348   000C30  EF1C  F006         	goto	u1441
  2349   000C34  EF1E  F006         	goto	u1440
  2350   000C38                     u1441:
  2351   000C38  EF0D  F006         	goto	l1999
  2352   000C3C                     u1440:
  2353   000C3C                     l2003:
  2354   000C3C  90D8               	bcf	status,0,c
  2355   000C3E  3617               	rlcf	___aodiv@quotient^0,f,c
  2356   000C40  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  2357   000C42  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  2358   000C44  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  2359   000C46  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  2360   000C48  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  2361   000C4A  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  2362   000C4C  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  2363   000C4E  500D               	movf	___aodiv@divisor^0,w,c
  2364   000C50  5C05               	subwf	___aodiv@dividend^0,w,c
  2365   000C52  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2366   000C54  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  2367   000C56  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2368   000C58  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  2369   000C5A  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2370   000C5C  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  2371   000C5E  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2372   000C60  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  2373   000C62  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2374   000C64  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  2375   000C66  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2376   000C68  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  2377   000C6A  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2378   000C6C  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  2379   000C6E  A0D8               	btfss	status,0,c
  2380   000C70  EF3C  F006         	goto	u1451
  2381   000C74  EF3E  F006         	goto	u1450
  2382   000C78                     u1451:
  2383   000C78  EF4F  F006         	goto	l2011
  2384   000C7C                     u1450:
  2385   000C7C  500D               	movf	___aodiv@divisor^0,w,c
  2386   000C7E  5E05               	subwf	___aodiv@dividend^0,f,c
  2387   000C80  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2388   000C82  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  2389   000C84  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2390   000C86  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  2391   000C88  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2392   000C8A  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  2393   000C8C  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2394   000C8E  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  2395   000C90  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2396   000C92  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  2397   000C94  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2398   000C96  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  2399   000C98  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2400   000C9A  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  2401   000C9C  8017               	bsf	___aodiv@quotient^0,0,c
  2402   000C9E                     l2011:
  2403   000C9E  90D8               	bcf	status,0,c
  2404   000CA0  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  2405   000CA2  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  2406   000CA4  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  2407   000CA6  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  2408   000CA8  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  2409   000CAA  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  2410   000CAC  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  2411   000CAE  320D               	rrcf	___aodiv@divisor^0,f,c
  2412   000CB0  2E15               	decfsz	___aodiv@counter^0,f,c
  2413   000CB2  EF1E  F006         	goto	l2003
  2414   000CB6                     l2015:
  2415   000CB6  5016               	movf	___aodiv@sign^0,w,c
  2416   000CB8  B4D8               	btfsc	status,2,c
  2417   000CBA  EF61  F006         	goto	u1461
  2418   000CBE  EF63  F006         	goto	u1460
  2419   000CC2                     u1461:
  2420   000CC2  EF73  F006         	goto	l2019
  2421   000CC6                     u1460:
  2422   000CC6  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  2423   000CC8  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  2424   000CCA  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  2425   000CCC  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  2426   000CCE  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  2427   000CD0  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  2428   000CD2  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  2429   000CD4  6C17               	negf	___aodiv@quotient^0,c
  2430   000CD6  0E00               	movlw	0
  2431   000CD8  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  2432   000CDA  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  2433   000CDC  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  2434   000CDE  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  2435   000CE0  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  2436   000CE2  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  2437   000CE4  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  2438   000CE6                     l2019:
  2439   000CE6  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2440   000CEA  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2441   000CEE  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2442   000CF2  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2443   000CF6  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2444   000CFA  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2445   000CFE  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2446   000D02  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2447   000D06  0012               	return		;funcret
  2448   000D08                     __end_of___aodiv:
  2449                           	callstack 0
  2450                           
  2451 ;; *************** function _atoi *****************
  2452 ;; Defined at:
  2453 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2456 ;;		 -> STR_2(15), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  n               2   17[COMRAM] int 
  2459 ;;  neg             2   15[COMRAM] int 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  2   10[COMRAM] int 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2469 ;;      Params:         2       0       0       0       0       0       0
  2470 ;;      Locals:         4       0       0       0       0       0       0
  2471 ;;      Temps:          3       0       0       0       0       0       0
  2472 ;;      Totals:         9       0       0       0       0       0       0
  2473 ;;Total ram usage:        9 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 2
  2476 ;; This function calls:
  2477 ;;		___wmul
  2478 ;;		_isdigit
  2479 ;;		_isspace
  2480 ;; This function is called by:
  2481 ;;		_vfpfcnvrt
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text12
  2486   000E6C                     __ptext12:
  2487                           	callstack 0
  2488   000E6C                     _atoi:
  2489                           	callstack 25
  2490   000E6C  0E00               	movlw	0
  2491   000E6E  6E13               	movwf	(atoi@n+1)^0,c
  2492   000E70  0E00               	movlw	0
  2493   000E72  6E12               	movwf	atoi@n^0,c
  2494   000E74  0E00               	movlw	0
  2495   000E76  6E11               	movwf	(atoi@neg+1)^0,c
  2496   000E78  0E00               	movlw	0
  2497   000E7A  6E10               	movwf	atoi@neg^0,c
  2498   000E7C  EF42  F007         	goto	l2163
  2499   000E80                     l2159:
  2500   000E80  4A0B               	infsnz	atoi@s^0,f,c
  2501   000E82  2A0C               	incf	(atoi@s+1)^0,f,c
  2502   000E84                     l2163:
  2503   000E84  C00B  FFF6         	movff	atoi@s,tblptrl
  2504   000E88  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2505   000E8C                     	if	0	;tblptru may be non-zero
  2506   000E8C                     	endif
  2507   000E8C                     	if	0	;tblptru may be non-zero
  2508   000E8C                     	endif
  2509   000E8C  0008               	tblrd		*
  2510   000E8E  50F5               	movf	tablat,w,c
  2511   000E90  0A20               	xorlw	32
  2512   000E92  B4D8               	btfsc	status,2,c
  2513   000E94  EF4E  F007         	goto	u1751
  2514   000E98  EF50  F007         	goto	u1750
  2515   000E9C                     u1751:
  2516   000E9C  EF40  F007         	goto	l2159
  2517   000EA0                     u1750:
  2518   000EA0  C00B  FFF6         	movff	atoi@s,tblptrl
  2519   000EA4  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2520   000EA8                     	if	0	;tblptru may be non-zero
  2521   000EA8                     	endif
  2522   000EA8                     	if	0	;tblptru may be non-zero
  2523   000EA8                     	endif
  2524   000EA8  0008               	tblrd		*
  2525   000EAA  CFF5 F00D          	movff	tablat,??_atoi
  2526   000EAE  0EF7               	movlw	247
  2527   000EB0  240D               	addwf	??_atoi^0,w,c
  2528   000EB2  6E0E               	movwf	(??_atoi+1)^0,c
  2529   000EB4  6A0F               	clrf	(??_atoi+2)^0,c
  2530   000EB6  0EFF               	movlw	255
  2531   000EB8  220F               	addwfc	(??_atoi+2)^0,f,c
  2532   000EBA  500F               	movf	(??_atoi+2)^0,w,c
  2533   000EBC  E109               	bnz	u1760
  2534   000EBE  0E05               	movlw	5
  2535   000EC0  5C0E               	subwf	(??_atoi+1)^0,w,c
  2536   000EC2  A0D8               	btfss	status,0,c
  2537   000EC4  EF66  F007         	goto	u1761
  2538   000EC8  EF68  F007         	goto	u1760
  2539   000ECC                     u1761:
  2540   000ECC  EF40  F007         	goto	l2159
  2541   000ED0                     u1760:
  2542   000ED0  EF72  F007         	goto	l2171
  2543   000ED4                     l2167:
  2544   000ED4  0E00               	movlw	0
  2545   000ED6  6E11               	movwf	(atoi@neg+1)^0,c
  2546   000ED8  0E01               	movlw	1
  2547   000EDA  6E10               	movwf	atoi@neg^0,c
  2548   000EDC                     l2169:
  2549   000EDC  4A0B               	infsnz	atoi@s^0,f,c
  2550   000EDE  2A0C               	incf	(atoi@s+1)^0,f,c
  2551   000EE0  EFA7  F007         	goto	l2179
  2552   000EE4                     l2171:
  2553   000EE4  C00B  FFF6         	movff	atoi@s,tblptrl
  2554   000EE8  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2555   000EEC                     	if	0	;tblptru may be non-zero
  2556   000EEC                     	endif
  2557   000EEC                     	if	0	;tblptru may be non-zero
  2558   000EEC                     	endif
  2559   000EEC  0008               	tblrd		*
  2560   000EEE  50F5               	movf	tablat,w,c
  2561   000EF0  6E0D               	movwf	??_atoi^0,c
  2562   000EF2  6A0E               	clrf	(??_atoi+1)^0,c
  2563                           
  2564                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2565                           ; Switch size 1, requested type "simple"
  2566                           ; Number of cases is 1, Range of values is 0 to 0
  2567                           ; switch strategies available:
  2568                           ; Name         Instructions Cycles
  2569                           ; simple_byte            4     3 (average)
  2570                           ;	Chosen strategy is simple_byte
  2571   000EF4  500E               	movf	(??_atoi+1)^0,w,c
  2572   000EF6  0A00               	xorlw	0	; case 0
  2573   000EF8  B4D8               	btfsc	status,2,c
  2574   000EFA  EF81  F007         	goto	l2327
  2575   000EFE  EFA7  F007         	goto	l2179
  2576   000F02                     l2327:
  2577                           
  2578                           ; Switch size 1, requested type "simple"
  2579                           ; Number of cases is 2, Range of values is 43 to 45
  2580                           ; switch strategies available:
  2581                           ; Name         Instructions Cycles
  2582                           ; simple_byte            7     4 (average)
  2583                           ;	Chosen strategy is simple_byte
  2584   000F02  500D               	movf	??_atoi^0,w,c
  2585   000F04  0A2B               	xorlw	43	; case 43
  2586   000F06  B4D8               	btfsc	status,2,c
  2587   000F08  EF6E  F007         	goto	l2169
  2588   000F0C  0A06               	xorlw	6	; case 45
  2589   000F0E  B4D8               	btfsc	status,2,c
  2590   000F10  EF6A  F007         	goto	l2167
  2591   000F14  EFA7  F007         	goto	l2179
  2592   000F18                     l2173:
  2593   000F18  C012  F005         	movff	atoi@n,___wmul@multiplier
  2594   000F1C  C013  F006         	movff	atoi@n+1,___wmul@multiplier+1
  2595   000F20  0E00               	movlw	0
  2596   000F22  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  2597   000F24  0E0A               	movlw	10
  2598   000F26  6E07               	movwf	___wmul@multiplicand^0,c
  2599   000F28  ECBA  F00A         	call	___wmul	;wreg free
  2600   000F2C  C00B  FFF6         	movff	atoi@s,tblptrl
  2601   000F30  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2602   000F34                     	if	0	;tblptru may be non-zero
  2603   000F34                     	endif
  2604   000F34                     	if	0	;tblptru may be non-zero
  2605   000F34                     	endif
  2606   000F34  0008               	tblrd		*
  2607   000F36  50F5               	movf	tablat,w,c
  2608   000F38  5E05               	subwf	?___wmul^0,f,c
  2609   000F3A  0E00               	movlw	0
  2610   000F3C  5A06               	subwfb	(?___wmul+1)^0,f,c
  2611   000F3E  0E30               	movlw	48
  2612   000F40  2405               	addwf	?___wmul^0,w,c
  2613   000F42  6E12               	movwf	atoi@n^0,c
  2614   000F44  0E00               	movlw	0
  2615   000F46  2006               	addwfc	(?___wmul+1)^0,w,c
  2616   000F48  6E13               	movwf	(atoi@n+1)^0,c
  2617   000F4A  EF6E  F007         	goto	l2169
  2618   000F4E                     l2179:
  2619   000F4E  C00B  FFF6         	movff	atoi@s,tblptrl
  2620   000F52  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2621   000F56                     	if	0	;tblptru may be non-zero
  2622   000F56                     	endif
  2623   000F56                     	if	0	;tblptru may be non-zero
  2624   000F56                     	endif
  2625   000F56  0008               	tblrd		*
  2626   000F58  CFF5 F00D          	movff	tablat,??_atoi
  2627   000F5C  0ED0               	movlw	208
  2628   000F5E  240D               	addwf	??_atoi^0,w,c
  2629   000F60  6E0E               	movwf	(??_atoi+1)^0,c
  2630   000F62  6A0F               	clrf	(??_atoi+2)^0,c
  2631   000F64  0EFF               	movlw	255
  2632   000F66  220F               	addwfc	(??_atoi+2)^0,f,c
  2633   000F68  500F               	movf	(??_atoi+2)^0,w,c
  2634   000F6A  E109               	bnz	u1770
  2635   000F6C  0E0A               	movlw	10
  2636   000F6E  5C0E               	subwf	(??_atoi+1)^0,w,c
  2637   000F70  A0D8               	btfss	status,0,c
  2638   000F72  EFBD  F007         	goto	u1771
  2639   000F76  EFBF  F007         	goto	u1770
  2640   000F7A                     u1771:
  2641   000F7A  EF8C  F007         	goto	l2173
  2642   000F7E                     u1770:
  2643   000F7E  5010               	movf	atoi@neg^0,w,c
  2644   000F80  1011               	iorwf	(atoi@neg+1)^0,w,c
  2645   000F82  A4D8               	btfss	status,2,c
  2646   000F84  EFC6  F007         	goto	u1781
  2647   000F88  EFC8  F007         	goto	u1780
  2648   000F8C                     u1781:
  2649   000F8C  EFD6  F007         	goto	l905
  2650   000F90                     u1780:
  2651   000F90  C012  F00D         	movff	atoi@n,??_atoi
  2652   000F94  C013  F00E         	movff	atoi@n+1,??_atoi+1
  2653   000F98  1E0D               	comf	??_atoi^0,f,c
  2654   000F9A  1E0E               	comf	(??_atoi+1)^0,f,c
  2655   000F9C  4A0D               	infsnz	??_atoi^0,f,c
  2656   000F9E  2A0E               	incf	(??_atoi+1)^0,f,c
  2657   000FA0  C00D  F00B         	movff	??_atoi,?_atoi
  2658   000FA4  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2659   000FA8  EFDA  F007         	goto	l908
  2660   000FAC                     l905:
  2661   000FAC  C012  F00B         	movff	atoi@n,?_atoi
  2662   000FB0  C013  F00C         	movff	atoi@n+1,?_atoi+1
  2663   000FB4                     l908:
  2664   000FB4  0012               	return		;funcret
  2665   000FB6                     __end_of_atoi:
  2666                           	callstack 0
  2667                           
  2668 ;; *************** function _isspace *****************
  2669 ;; Defined at:
  2670 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  c               2    4[COMRAM] int 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  2    4[COMRAM] int 
  2677 ;; Registers used:
  2678 ;;		wreg, status,2, status,0
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2684 ;;      Params:         2       0       0       0       0       0       0
  2685 ;;      Locals:         1       0       0       0       0       0       0
  2686 ;;      Temps:          2       0       0       0       0       0       0
  2687 ;;      Totals:         5       0       0       0       0       0       0
  2688 ;;Total ram usage:        5 bytes
  2689 ;; Hardware stack levels used: 1
  2690 ;; Hardware stack levels required when called: 1
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_atoi
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text13
  2699   001458                     __ptext13:
  2700                           	callstack 0
  2701   001458                     _isspace:
  2702                           	callstack 25
  2703   001458  0E01               	movlw	1
  2704   00145A  6E09               	movwf	_isspace$1026^0,c
  2705   00145C  0E20               	movlw	32
  2706   00145E  1805               	xorwf	isspace@c^0,w,c
  2707   001460  1006               	iorwf	(isspace@c+1)^0,w,c
  2708   001462  B4D8               	btfsc	status,2,c
  2709   001464  EF36  F00A         	goto	u1601
  2710   001468  EF38  F00A         	goto	u1600
  2711   00146C                     u1601:
  2712   00146C  EF4B  F00A         	goto	l2093
  2713   001470                     u1600:
  2714   001470  0EF7               	movlw	247
  2715   001472  2405               	addwf	isspace@c^0,w,c
  2716   001474  6E07               	movwf	??_isspace^0,c
  2717   001476  0EFF               	movlw	255
  2718   001478  2006               	addwfc	(isspace@c+1)^0,w,c
  2719   00147A  6E08               	movwf	(??_isspace+1)^0,c
  2720   00147C  5008               	movf	(??_isspace+1)^0,w,c
  2721   00147E  E109               	bnz	u1610
  2722   001480  0E05               	movlw	5
  2723   001482  5C07               	subwf	??_isspace^0,w,c
  2724   001484  A0D8               	btfss	status,0,c
  2725   001486  EF47  F00A         	goto	u1611
  2726   00148A  EF49  F00A         	goto	u1610
  2727   00148E                     u1611:
  2728   00148E  EF4B  F00A         	goto	l2093
  2729   001492                     u1610:
  2730   001492  0E00               	movlw	0
  2731   001494  6E09               	movwf	_isspace$1026^0,c
  2732   001496                     l2093:
  2733   001496  C009  F005         	movff	_isspace$1026,?_isspace
  2734   00149A  6A06               	clrf	(?_isspace+1)^0,c
  2735   00149C  0012               	return		;funcret
  2736   00149E                     __end_of_isspace:
  2737                           	callstack 0
  2738                           
  2739 ;; *************** function _isdigit *****************
  2740 ;; Defined at:
  2741 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  c               2    4[COMRAM] int 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  2    4[COMRAM] int 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2755 ;;      Params:         2       0       0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0
  2757 ;;      Temps:          2       0       0       0       0       0       0
  2758 ;;      Totals:         4       0       0       0       0       0       0
  2759 ;;Total ram usage:        4 bytes
  2760 ;; Hardware stack levels used: 1
  2761 ;; Hardware stack levels required when called: 1
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_vfpfcnvrt
  2766 ;;		_atoi
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text14
  2771   001522                     __ptext14:
  2772                           	callstack 0
  2773   001522                     _isdigit:
  2774                           	callstack 26
  2775   001522  0ED0               	movlw	208
  2776   001524  2405               	addwf	isdigit@c^0,w,c
  2777   001526  6E07               	movwf	??_isdigit^0,c
  2778   001528  0EFF               	movlw	255
  2779   00152A  2006               	addwfc	(isdigit@c+1)^0,w,c
  2780   00152C  6E08               	movwf	(??_isdigit+1)^0,c
  2781   00152E  5008               	movf	(??_isdigit+1)^0,w,c
  2782   001530  E10A               	bnz	u1580
  2783   001532  0E0A               	movlw	10
  2784   001534  5C07               	subwf	??_isdigit^0,w,c
  2785   001536  A0D8               	btfss	status,0,c
  2786   001538  EFA0  F00A         	goto	u1581
  2787   00153C  EFA3  F00A         	goto	u1580
  2788   001540                     u1581:
  2789   001540  0E01               	movlw	1
  2790   001542  EFA4  F00A         	goto	u1590
  2791   001546                     u1580:
  2792   001546  0E00               	movlw	0
  2793   001548                     u1590:
  2794   001548  6E05               	movwf	?_isdigit^0,c
  2795   00154A  6A06               	clrf	(?_isdigit+1)^0,c
  2796   00154C  0012               	return		;funcret
  2797   00154E                     __end_of_isdigit:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function ___wmul *****************
  2801 ;; Defined at:
  2802 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  multiplier      2    4[COMRAM] unsigned int 
  2805 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  product         2    8[COMRAM] unsigned int 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  2    4[COMRAM] unsigned int 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, status,0, prodl, prodh
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2817 ;;      Params:         4       0       0       0       0       0       0
  2818 ;;      Locals:         2       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0
  2820 ;;      Totals:         6       0       0       0       0       0       0
  2821 ;;Total ram usage:        6 bytes
  2822 ;; Hardware stack levels used: 1
  2823 ;; Hardware stack levels required when called: 1
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_atoi
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text15
  2832   001574                     __ptext15:
  2833                           	callstack 0
  2834   001574                     ___wmul:
  2835                           	callstack 25
  2836   001574  5005               	movf	___wmul@multiplier^0,w,c
  2837   001576  0207               	mulwf	___wmul@multiplicand^0,c
  2838   001578  CFF3 F009          	movff	prodl,___wmul@product
  2839   00157C  CFF4 F00A          	movff	prodh,___wmul@product+1
  2840   001580  5005               	movf	___wmul@multiplier^0,w,c
  2841   001582  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  2842   001584  50F3               	movf	243,w,c
  2843   001586  260A               	addwf	(___wmul@product+1)^0,f,c
  2844   001588  5006               	movf	(___wmul@multiplier+1)^0,w,c
  2845   00158A  0207               	mulwf	___wmul@multiplicand^0,c
  2846   00158C  50F3               	movf	243,w,c
  2847   00158E  260A               	addwf	(___wmul@product+1)^0,f,c
  2848   001590  C009  F005         	movff	___wmul@product,?___wmul
  2849   001594  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  2850   001598  0012               	return		;funcret
  2851   00159A                     __end_of___wmul:
  2852                           	callstack 0
  2853                           
  2854 ;; *************** function _lcd_write *****************
  2855 ;; Defined at:
  2856 ;;		line 77 in file "LCD4b_EXSTO.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  lin             1    wreg     unsigned char 
  2859 ;;  col             1   10[COMRAM] unsigned char 
  2860 ;;  str             2   11[COMRAM] PTR unsigned char 
  2861 ;;		 -> STR_4(16), STR_3(16), bufferLCD(16), STR_1(17), 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  lin             1   14[COMRAM] unsigned char 
  2864 ;;  end             1   13[COMRAM] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      void 
  2867 ;; Registers used:
  2868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2874 ;;      Params:         3       0       0       0       0       0       0
  2875 ;;      Locals:         2       0       0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0
  2877 ;;      Totals:         5       0       0       0       0       0       0
  2878 ;;Total ram usage:        5 bytes
  2879 ;; Hardware stack levels used: 1
  2880 ;; Hardware stack levels required when called: 4
  2881 ;; This function calls:
  2882 ;;		_lcd_send_byte
  2883 ;; This function is called by:
  2884 ;;		_main
  2885 ;;		_lcd_clear
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text16
  2890   00120E                     __ptext16:
  2891                           	callstack 0
  2892   00120E                     _lcd_write:
  2893                           	callstack 26
  2894                           
  2895                           ;incstack = 0
  2896                           ;lcd_write@lin stored from wreg
  2897   00120E  6E0F               	movwf	lcd_write@lin^0,c
  2898   001210                     
  2899                           ;LCD4b_EXSTO.c: 77: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 78: {;L
      +                          CD4b_EXSTO.c: 79:     char end;;LCD4b_EXSTO.c: 81:     if(lin == 1)
  2900   001210  040F               	decf	lcd_write@lin^0,w,c
  2901   001212  A4D8               	btfss	status,2,c
  2902   001214  EF0E  F009         	goto	u1231
  2903   001218  EF10  F009         	goto	u1230
  2904   00121C                     u1231:
  2905   00121C  EF15  F009         	goto	l1841
  2906   001220                     u1230:
  2907   001220                     
  2908                           ;LCD4b_EXSTO.c: 82:     {;LCD4b_EXSTO.c: 83:         end = col + 0X80 - 1;
  2909   001220  500B               	movf	lcd_write@col^0,w,c
  2910   001222  0F7F               	addlw	127
  2911   001224  6E0E               	movwf	lcd_write@end^0,c
  2912                           
  2913                           ;LCD4b_EXSTO.c: 84:     }
  2914   001226  EF21  F009         	goto	l1845
  2915   00122A                     l1841:
  2916   00122A  0E02               	movlw	2
  2917   00122C  180F               	xorwf	lcd_write@lin^0,w,c
  2918   00122E  A4D8               	btfss	status,2,c
  2919   001230  EF1C  F009         	goto	u1241
  2920   001234  EF1E  F009         	goto	u1240
  2921   001238                     u1241:
  2922   001238  EF21  F009         	goto	l1845
  2923   00123C                     u1240:
  2924   00123C                     
  2925                           ;LCD4b_EXSTO.c: 86:     {;LCD4b_EXSTO.c: 87:         end = col + 0xC0 - 1;
  2926   00123C  500B               	movf	lcd_write@col^0,w,c
  2927   00123E  0FBF               	addlw	191
  2928   001240  6E0E               	movwf	lcd_write@end^0,c
  2929   001242                     l1845:
  2930                           
  2931                           ;LCD4b_EXSTO.c: 89:     lcd_send_byte(0,end);
  2932   001242  C00E  F009         	movff	lcd_write@end,lcd_send_byte@data
  2933   001246  0E00               	movlw	0
  2934   001248  ECDD  F00A         	call	_lcd_send_byte
  2935                           
  2936                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2937   00124C  EF3E  F009         	goto	l1851
  2938   001250                     l1847:
  2939                           
  2940                           ;LCD4b_EXSTO.c: 92:     {;LCD4b_EXSTO.c: 93:         lcd_send_byte(1,*str);
  2941   001250  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2942   001254  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2943   001258  6AF8               	clrf	tblptru,c
  2944   00125A  0E05               	movlw	(high __ramtop+-1)
  2945   00125C  64F7               	cpfsgt	tblptrh,c
  2946   00125E  D003               	bra	u1257
  2947   001260  0008               	tblrd		*
  2948   001262  50F5               	movf	tablat,w,c
  2949   001264  D005               	bra	u1250
  2950   001266                     u1257:
  2951   001266  CFF6 FFE1          	movff	tblptrl,fsr1l
  2952   00126A  CFF7 FFE2          	movff	tblptrh,fsr1h
  2953   00126E  50E7               	movf	indf1,w,c
  2954   001270                     u1250:
  2955   001270  6E09               	movwf	lcd_send_byte@data^0,c
  2956   001272  0E01               	movlw	1
  2957   001274  ECDD  F00A         	call	_lcd_send_byte
  2958   001278                     
  2959                           ;LCD4b_EXSTO.c: 94:         str++;
  2960   001278  4A0C               	infsnz	lcd_write@str^0,f,c
  2961   00127A  2A0D               	incf	(lcd_write@str+1)^0,f,c
  2962   00127C                     l1851:
  2963                           
  2964                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2965   00127C  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2966   001280  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2967   001284  6AF8               	clrf	tblptru,c
  2968   001286  0E05               	movlw	(high __ramtop+-1)
  2969   001288  64F7               	cpfsgt	tblptrh,c
  2970   00128A  D003               	bra	u1267
  2971   00128C  0008               	tblrd		*
  2972   00128E  50F5               	movf	tablat,w,c
  2973   001290  D005               	bra	u1260
  2974   001292                     u1267:
  2975   001292  CFF6 FFE1          	movff	tblptrl,fsr1l
  2976   001296  CFF7 FFE2          	movff	tblptrh,fsr1h
  2977   00129A  50E7               	movf	indf1,w,c
  2978   00129C                     u1260:
  2979   00129C  0900               	iorlw	0
  2980   00129E  A4D8               	btfss	status,2,c
  2981   0012A0  EF54  F009         	goto	u1271
  2982   0012A4  EF56  F009         	goto	u1270
  2983   0012A8                     u1271:
  2984   0012A8  EF28  F009         	goto	l1847
  2985   0012AC                     u1270:
  2986   0012AC  0012               	return		;funcret
  2987   0012AE                     __end_of_lcd_write:
  2988                           	callstack 0
  2989                           
  2990 ;; *************** function _lcd_send_byte *****************
  2991 ;; Defined at:
  2992 ;;		line 63 in file "LCD4b_EXSTO.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  level           1    wreg     unsigned char 
  2995 ;;  data            1    8[COMRAM] unsigned char 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  level           1    9[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         1       0       0       0       0       0       0
  3008 ;;      Locals:         1       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0
  3010 ;;      Totals:         2       0       0       0       0       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used: 1
  3013 ;; Hardware stack levels required when called: 3
  3014 ;; This function calls:
  3015 ;;		_lcd_cmd
  3016 ;; This function is called by:
  3017 ;;		_lcd_write
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text17
  3022   0015BA                     __ptext17:
  3023                           	callstack 0
  3024   0015BA                     _lcd_send_byte:
  3025                           	callstack 26
  3026                           
  3027                           ;incstack = 0
  3028                           ;lcd_send_byte@level stored from wreg
  3029   0015BA  6E0A               	movwf	lcd_send_byte@level^0,c
  3030   0015BC                     
  3031                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3032   0015BC  B00A               	btfsc	lcd_send_byte@level^0,0,c
  3033   0015BE  D002               	bra	u1205
  3034   0015C0  9084               	bcf	132,0,c	;volatile
  3035   0015C2  D001               	bra	u1206
  3036   0015C4                     u1205:
  3037   0015C4  8084               	bsf	132,0,c	;volatile
  3038   0015C6                     u1206:
  3039   0015C6                     
  3040                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3041   0015C6  0E42               	movlw	66
  3042   0015C8                     u1877:
  3043   0015C8  2EE8               	decfsz	wreg,f,c
  3044   0015CA  D7FE               	bra	u1877
  3045   0015CC  D000               	nop2	
  3046   0015CE                     
  3047                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3048   0015CE  9484               	bcf	132,2,c	;volatile
  3049   0015D0                     
  3050                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3051   0015D0  5009               	movf	lcd_send_byte@data^0,w,c
  3052   0015D2  ECDB  F007         	call	_lcd_cmd
  3053   0015D6  0012               	return		;funcret
  3054   0015D8                     __end_of_lcd_send_byte:
  3055                           	callstack 0
  3056                           
  3057 ;; *************** function _lcd_init *****************
  3058 ;; Defined at:
  3059 ;;		line 3 in file "LCD4b_EXSTO.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  i               1    9[COMRAM] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         0       0       0       0       0       0       0
  3074 ;;      Locals:         1       0       0       0       0       0       0
  3075 ;;      Temps:          1       0       0       0       0       0       0
  3076 ;;      Totals:         2       0       0       0       0       0       0
  3077 ;;Total ram usage:        2 bytes
  3078 ;; Hardware stack levels used: 1
  3079 ;; Hardware stack levels required when called: 3
  3080 ;; This function calls:
  3081 ;;		_lcd_cmd
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text18
  3088   0012AE                     __ptext18:
  3089                           	callstack 0
  3090   0012AE                     _lcd_init:
  3091                           	callstack 27
  3092   0012AE                     
  3093                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3094   0012AE  0E00               	movlw	0
  3095   0012B0  6E95               	movwf	149,c	;volatile
  3096   0012B2                     
  3097                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3098   0012B2  9496               	bcf	150,2,c	;volatile
  3099   0012B4                     
  3100                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3101   0012B4  9296               	bcf	150,1,c	;volatile
  3102   0012B6                     
  3103                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3104   0012B6  9096               	bcf	150,0,c	;volatile
  3105                           
  3106                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3107   0012B8  0E00               	movlw	0
  3108   0012BA  6E83               	movwf	131,c	;volatile
  3109   0012BC                     
  3110                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3111   0012BC  9084               	bcf	132,0,c	;volatile
  3112   0012BE                     
  3113                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3114   0012BE  9284               	bcf	132,1,c	;volatile
  3115   0012C0                     
  3116                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3117   0012C0  9484               	bcf	132,2,c	;volatile
  3118   0012C2                     
  3119                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3120   0012C2  0E27               	movlw	39
  3121   0012C4  6E09               	movwf	??_lcd_init^0,c
  3122   0012C6  0EF5               	movlw	245
  3123   0012C8                     u1887:
  3124   0012C8  2EE8               	decfsz	wreg,f,c
  3125   0012CA  D7FE               	bra	u1887
  3126   0012CC  2E09               	decfsz	??_lcd_init^0,f,c
  3127   0012CE  D7FC               	bra	u1887
  3128   0012D0  F000               	nop	
  3129   0012D2                     
  3130                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3131   0012D2  0E00               	movlw	0
  3132   0012D4  6E0A               	movwf	lcd_init@i^0,c
  3133   0012D6                     l1815:
  3134                           
  3135                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3136   0012D6  0E30               	movlw	48
  3137   0012D8  ECDB  F007         	call	_lcd_cmd
  3138   0012DC                     
  3139                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3140   0012DC  0E0D               	movlw	13
  3141   0012DE  6E09               	movwf	??_lcd_init^0,c
  3142   0012E0  0EFC               	movlw	252
  3143   0012E2                     u1897:
  3144   0012E2  2EE8               	decfsz	wreg,f,c
  3145   0012E4  D7FE               	bra	u1897
  3146   0012E6  2E09               	decfsz	??_lcd_init^0,f,c
  3147   0012E8  D7FC               	bra	u1897
  3148   0012EA                     
  3149                           ;LCD4b_EXSTO.c: 22:     }
  3150   0012EA  2A0A               	incf	lcd_init@i^0,f,c
  3151   0012EC  0E02               	movlw	2
  3152   0012EE  640A               	cpfsgt	lcd_init@i^0,c
  3153   0012F0  EF7C  F009         	goto	u1221
  3154   0012F4  EF7E  F009         	goto	u1220
  3155   0012F8                     u1221:
  3156   0012F8  EF6B  F009         	goto	l1815
  3157   0012FC                     u1220:
  3158   0012FC                     
  3159                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3160   0012FC  0E02               	movlw	2
  3161   0012FE  ECDB  F007         	call	_lcd_cmd
  3162   001302                     
  3163                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3164   001302  0E1A               	movlw	26
  3165   001304                     u1907:
  3166   001304  2EE8               	decfsz	wreg,f,c
  3167   001306  D7FE               	bra	u1907
  3168   001308  D000               	nop2	
  3169   00130A                     
  3170                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3171   00130A  0E28               	movlw	40
  3172   00130C  ECDB  F007         	call	_lcd_cmd
  3173                           
  3174                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3175   001310  0E1A               	movlw	26
  3176   001312                     u1917:
  3177   001312  2EE8               	decfsz	wreg,f,c
  3178   001314  D7FE               	bra	u1917
  3179   001316  D000               	nop2	
  3180   001318                     
  3181                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3182   001318  0E01               	movlw	1
  3183   00131A  ECDB  F007         	call	_lcd_cmd
  3184   00131E                     
  3185                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3186   00131E  0E06               	movlw	6
  3187   001320  6E09               	movwf	??_lcd_init^0,c
  3188   001322  0E30               	movlw	48
  3189   001324                     u1927:
  3190   001324  2EE8               	decfsz	wreg,f,c
  3191   001326  D7FE               	bra	u1927
  3192   001328  2E09               	decfsz	??_lcd_init^0,f,c
  3193   00132A  D7FC               	bra	u1927
  3194   00132C  D000               	nop2	
  3195                           
  3196                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3197   00132E  0E0C               	movlw	12
  3198   001330  ECDB  F007         	call	_lcd_cmd
  3199   001334                     
  3200                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3201   001334  0E1A               	movlw	26
  3202   001336                     u1937:
  3203   001336  2EE8               	decfsz	wreg,f,c
  3204   001338  D7FE               	bra	u1937
  3205   00133A  D000               	nop2	
  3206   00133C                     
  3207                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3208   00133C  0E06               	movlw	6
  3209   00133E  ECDB  F007         	call	_lcd_cmd
  3210                           
  3211                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3212   001342  0E1A               	movlw	26
  3213   001344                     u1947:
  3214   001344  2EE8               	decfsz	wreg,f,c
  3215   001346  D7FE               	bra	u1947
  3216   001348  D000               	nop2	
  3217   00134A  0012               	return		;funcret
  3218   00134C                     __end_of_lcd_init:
  3219                           	callstack 0
  3220                           
  3221 ;; *************** function _lcd_cmd *****************
  3222 ;; Defined at:
  3223 ;;		line 42 in file "LCD4b_EXSTO.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  cmd             1    wreg     unsigned char 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  cmd             1    7[COMRAM] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3237 ;;      Params:         0       0       0       0       0       0       0
  3238 ;;      Locals:         1       0       0       0       0       0       0
  3239 ;;      Temps:          1       0       0       0       0       0       0
  3240 ;;      Totals:         2       0       0       0       0       0       0
  3241 ;;Total ram usage:        2 bytes
  3242 ;; Hardware stack levels used: 1
  3243 ;; Hardware stack levels required when called: 2
  3244 ;; This function calls:
  3245 ;;		_set_bit
  3246 ;; This function is called by:
  3247 ;;		_lcd_init
  3248 ;;		_lcd_send_byte
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text19
  3253   000FB6                     __ptext19:
  3254                           	callstack 0
  3255   000FB6                     _lcd_cmd:
  3256                           	callstack 26
  3257                           
  3258                           ;incstack = 0
  3259                           ;lcd_cmd@cmd stored from wreg
  3260   000FB6  6E08               	movwf	lcd_cmd@cmd^0,c
  3261   000FB8                     
  3262                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3263   000FB8  0E10               	movlw	16
  3264   000FBA  6E05               	movwf	set_bit@comp^0,c
  3265   000FBC  5008               	movf	lcd_cmd@cmd^0,w,c
  3266   000FBE  ECCD  F00A         	call	_set_bit
  3267   000FC2  6E07               	movwf	??_lcd_cmd^0,c
  3268   000FC4  3A07               	swapf	??_lcd_cmd^0,f,c
  3269   000FC6  5083               	movf	131,w,c	;volatile
  3270   000FC8  1807               	xorwf	??_lcd_cmd^0,w,c
  3271   000FCA  0BEF               	andlw	-17
  3272   000FCC  1807               	xorwf	??_lcd_cmd^0,w,c
  3273   000FCE  6E83               	movwf	131,c	;volatile
  3274                           
  3275                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3276   000FD0  0E20               	movlw	32
  3277   000FD2  6E05               	movwf	set_bit@comp^0,c
  3278   000FD4  5008               	movf	lcd_cmd@cmd^0,w,c
  3279   000FD6  ECCD  F00A         	call	_set_bit
  3280   000FDA  6E07               	movwf	??_lcd_cmd^0,c
  3281   000FDC  3A07               	swapf	??_lcd_cmd^0,f,c
  3282   000FDE  4607               	rlncf	??_lcd_cmd^0,f,c
  3283   000FE0  5083               	movf	131,w,c	;volatile
  3284   000FE2  1807               	xorwf	??_lcd_cmd^0,w,c
  3285   000FE4  0BDF               	andlw	-33
  3286   000FE6  1807               	xorwf	??_lcd_cmd^0,w,c
  3287   000FE8  6E83               	movwf	131,c	;volatile
  3288                           
  3289                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3290   000FEA  0E40               	movlw	64
  3291   000FEC  6E05               	movwf	set_bit@comp^0,c
  3292   000FEE  5008               	movf	lcd_cmd@cmd^0,w,c
  3293   000FF0  ECCD  F00A         	call	_set_bit
  3294   000FF4  6E07               	movwf	??_lcd_cmd^0,c
  3295   000FF6  3A07               	swapf	??_lcd_cmd^0,f,c
  3296   000FF8  4607               	rlncf	??_lcd_cmd^0,f,c
  3297   000FFA  4607               	rlncf	??_lcd_cmd^0,f,c
  3298   000FFC  5083               	movf	131,w,c	;volatile
  3299   000FFE  1807               	xorwf	??_lcd_cmd^0,w,c
  3300   001000  0BBF               	andlw	-65
  3301   001002  1807               	xorwf	??_lcd_cmd^0,w,c
  3302   001004  6E83               	movwf	131,c	;volatile
  3303                           
  3304                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3305   001006  0E80               	movlw	128
  3306   001008  6E05               	movwf	set_bit@comp^0,c
  3307   00100A  5008               	movf	lcd_cmd@cmd^0,w,c
  3308   00100C  ECCD  F00A         	call	_set_bit
  3309   001010  6E07               	movwf	??_lcd_cmd^0,c
  3310   001012  3207               	rrcf	??_lcd_cmd^0,f,c
  3311   001014  3207               	rrcf	??_lcd_cmd^0,f,c
  3312   001016  5083               	movf	131,w,c	;volatile
  3313   001018  1807               	xorwf	??_lcd_cmd^0,w,c
  3314   00101A  0B7F               	andlw	-129
  3315   00101C  1807               	xorwf	??_lcd_cmd^0,w,c
  3316   00101E  6E83               	movwf	131,c	;volatile
  3317   001020                     
  3318                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3319   001020  8484               	bsf	132,2,c	;volatile
  3320   001022                     
  3321                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3322   001022  9484               	bcf	132,2,c	;volatile
  3323   001024                     
  3324                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3325   001024  0E42               	movlw	66
  3326   001026                     u1957:
  3327   001026  2EE8               	decfsz	wreg,f,c
  3328   001028  D7FE               	bra	u1957
  3329   00102A  D000               	nop2	
  3330   00102C                     
  3331                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3332   00102C  0E01               	movlw	1
  3333   00102E  6E05               	movwf	set_bit@comp^0,c
  3334   001030  5008               	movf	lcd_cmd@cmd^0,w,c
  3335   001032  ECCD  F00A         	call	_set_bit
  3336   001036  6E07               	movwf	??_lcd_cmd^0,c
  3337   001038  3A07               	swapf	??_lcd_cmd^0,f,c
  3338   00103A  5083               	movf	131,w,c	;volatile
  3339   00103C  1807               	xorwf	??_lcd_cmd^0,w,c
  3340   00103E  0BEF               	andlw	-17
  3341   001040  1807               	xorwf	??_lcd_cmd^0,w,c
  3342   001042  6E83               	movwf	131,c	;volatile
  3343   001044                     
  3344                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3345   001044  0E02               	movlw	2
  3346   001046  6E05               	movwf	set_bit@comp^0,c
  3347   001048  5008               	movf	lcd_cmd@cmd^0,w,c
  3348   00104A  ECCD  F00A         	call	_set_bit
  3349   00104E  6E07               	movwf	??_lcd_cmd^0,c
  3350   001050  3A07               	swapf	??_lcd_cmd^0,f,c
  3351   001052  4607               	rlncf	??_lcd_cmd^0,f,c
  3352   001054  5083               	movf	131,w,c	;volatile
  3353   001056  1807               	xorwf	??_lcd_cmd^0,w,c
  3354   001058  0BDF               	andlw	-33
  3355   00105A  1807               	xorwf	??_lcd_cmd^0,w,c
  3356   00105C  6E83               	movwf	131,c	;volatile
  3357   00105E                     
  3358                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3359   00105E  0E04               	movlw	4
  3360   001060  6E05               	movwf	set_bit@comp^0,c
  3361   001062  5008               	movf	lcd_cmd@cmd^0,w,c
  3362   001064  ECCD  F00A         	call	_set_bit
  3363   001068  6E07               	movwf	??_lcd_cmd^0,c
  3364   00106A  3A07               	swapf	??_lcd_cmd^0,f,c
  3365   00106C  4607               	rlncf	??_lcd_cmd^0,f,c
  3366   00106E  4607               	rlncf	??_lcd_cmd^0,f,c
  3367   001070  5083               	movf	131,w,c	;volatile
  3368   001072  1807               	xorwf	??_lcd_cmd^0,w,c
  3369   001074  0BBF               	andlw	-65
  3370   001076  1807               	xorwf	??_lcd_cmd^0,w,c
  3371   001078  6E83               	movwf	131,c	;volatile
  3372   00107A                     
  3373                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3374   00107A  0E08               	movlw	8
  3375   00107C  6E05               	movwf	set_bit@comp^0,c
  3376   00107E  5008               	movf	lcd_cmd@cmd^0,w,c
  3377   001080  ECCD  F00A         	call	_set_bit
  3378   001084  6E07               	movwf	??_lcd_cmd^0,c
  3379   001086  3207               	rrcf	??_lcd_cmd^0,f,c
  3380   001088  3207               	rrcf	??_lcd_cmd^0,f,c
  3381   00108A  5083               	movf	131,w,c	;volatile
  3382   00108C  1807               	xorwf	??_lcd_cmd^0,w,c
  3383   00108E  0B7F               	andlw	-129
  3384   001090  1807               	xorwf	??_lcd_cmd^0,w,c
  3385   001092  6E83               	movwf	131,c	;volatile
  3386   001094                     
  3387                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3388   001094  8484               	bsf	132,2,c	;volatile
  3389   001096                     
  3390                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3391   001096  9484               	bcf	132,2,c	;volatile
  3392   001098  0012               	return		;funcret
  3393   00109A                     __end_of_lcd_cmd:
  3394                           	callstack 0
  3395                           
  3396 ;; *************** function _set_bit *****************
  3397 ;; Defined at:
  3398 ;;		line 36 in file "LCD4b_EXSTO.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  cmd             1    wreg     unsigned char 
  3401 ;;  comp            1    4[COMRAM] unsigned char 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  cmd             1    5[COMRAM] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      unsigned char 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3413 ;;      Params:         1       0       0       0       0       0       0
  3414 ;;      Locals:         1       0       0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0
  3416 ;;      Totals:         2       0       0       0       0       0       0
  3417 ;;Total ram usage:        2 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_lcd_cmd
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text20
  3428   00159A                     __ptext20:
  3429                           	callstack 0
  3430   00159A                     _set_bit:
  3431                           	callstack 26
  3432                           
  3433                           ;incstack = 0
  3434                           ;set_bit@cmd stored from wreg
  3435   00159A  6E06               	movwf	set_bit@cmd^0,c
  3436   00159C                     
  3437                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3438   00159C  5006               	movf	set_bit@cmd^0,w,c
  3439   00159E  1405               	andwf	set_bit@comp^0,w,c
  3440   0015A0  0900               	iorlw	0
  3441   0015A2  B4D8               	btfsc	status,2,c
  3442   0015A4  EFD6  F00A         	goto	u951
  3443   0015A8  EFD8  F00A         	goto	u950
  3444   0015AC                     u951:
  3445   0015AC  EFDB  F00A         	goto	l1587
  3446   0015B0                     u950:
  3447   0015B0  0E01               	movlw	1
  3448   0015B2  EFDC  F00A         	goto	l94
  3449   0015B6                     l1587:
  3450   0015B6  0E00               	movlw	0
  3451   0015B8                     l94:
  3452   0015B8  0012               	return		;funcret
  3453   0015BA                     __end_of_set_bit:
  3454                           	callstack 0
  3455                           
  3456 ;; *************** function _config_TIMER0 *****************
  3457 ;; Defined at:
  3458 ;;		line 104 in file "Program.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      void 
  3465 ;; Registers used:
  3466 ;;		wreg, status,2
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3472 ;;      Params:         0       0       0       0       0       0       0
  3473 ;;      Locals:         0       0       0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0
  3475 ;;      Totals:         0       0       0       0       0       0       0
  3476 ;;Total ram usage:        0 bytes
  3477 ;; Hardware stack levels used: 1
  3478 ;; Hardware stack levels required when called: 1
  3479 ;; This function calls:
  3480 ;;		Nothing
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text21
  3487   0015D8                     __ptext21:
  3488                           	callstack 0
  3489   0015D8                     _config_TIMER0:
  3490                           	callstack 29
  3491   0015D8                     
  3492                           ;Program.c: 107:     T0CON = 0XC7;
  3493   0015D8  0EC7               	movlw	199
  3494   0015DA  6ED5               	movwf	213,c	;volatile
  3495                           
  3496                           ;Program.c: 115:     TMR0 = 61;
  3497   0015DC  0E00               	movlw	0
  3498   0015DE  6ED7               	movwf	215,c	;volatile
  3499   0015E0  0E3D               	movlw	61
  3500   0015E2  6ED6               	movwf	214,c	;volatile
  3501   0015E4  0012               	return		;funcret
  3502   0015E6                     __end_of_config_TIMER0:
  3503                           	callstack 0
  3504                           
  3505 ;; *************** function _config_IO *****************
  3506 ;; Defined at:
  3507 ;;		line 79 in file "Program.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;		None
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3521 ;;      Params:         0       0       0       0       0       0       0
  3522 ;;      Locals:         0       0       0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0
  3524 ;;      Totals:         0       0       0       0       0       0       0
  3525 ;;Total ram usage:        0 bytes
  3526 ;; Hardware stack levels used: 1
  3527 ;; Hardware stack levels required when called: 1
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_main
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text22
  3536   0015E6                     __ptext22:
  3537                           	callstack 0
  3538   0015E6                     _config_IO:
  3539                           	callstack 29
  3540   0015E6                     
  3541                           ;Program.c: 81:     TRISB = 0X00;
  3542   0015E6  0E00               	movlw	0
  3543   0015E8  6E93               	movwf	147,c	;volatile
  3544                           
  3545                           ;Program.c: 82:     PORTB = 0X01;
  3546   0015EA  0E01               	movlw	1
  3547   0015EC  6E81               	movwf	129,c	;volatile
  3548                           
  3549                           ;Program.c: 83:     ADCON1 = 0X0F;
  3550   0015EE  0E0F               	movlw	15
  3551   0015F0  6EC1               	movwf	193,c	;volatile
  3552   0015F2  0012               	return		;funcret
  3553   0015F4                     __end_of_config_IO:
  3554                           	callstack 0
  3555                           
  3556 ;; *************** function _config_INTERRUPT *****************
  3557 ;; Defined at:
  3558 ;;		line 92 in file "Program.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         0       0       0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0
  3575 ;;      Totals:         0       0       0       0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used: 1
  3578 ;; Hardware stack levels required when called: 1
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text23
  3587   0015FE                     __ptext23:
  3588                           	callstack 0
  3589   0015FE                     _config_INTERRUPT:
  3590                           	callstack 29
  3591   0015FE                     
  3592                           ;Program.c: 94:     INTCON = 0xA0;
  3593   0015FE  0EA0               	movlw	160
  3594   001600  6EF2               	movwf	242,c	;volatile
  3595   001602  0012               	return		;funcret
  3596   001604                     __end_of_config_INTERRUPT:
  3597                           	callstack 0
  3598                           
  3599 ;; *************** function _config_FOSC *****************
  3600 ;; Defined at:
  3601 ;;		line 86 in file "Program.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;		None
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3615 ;;      Params:         0       0       0       0       0       0       0
  3616 ;;      Locals:         0       0       0       0       0       0       0
  3617 ;;      Temps:          0       0       0       0       0       0       0
  3618 ;;      Totals:         0       0       0       0       0       0       0
  3619 ;;Total ram usage:        0 bytes
  3620 ;; Hardware stack levels used: 1
  3621 ;; Hardware stack levels required when called: 1
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text24
  3630   0015F4                     __ptext24:
  3631                           	callstack 0
  3632   0015F4                     _config_FOSC:
  3633                           	callstack 29
  3634   0015F4                     
  3635                           ;Program.c: 88:     OSCCON = 0X72;
  3636   0015F4  0E72               	movlw	114
  3637   0015F6  6ED3               	movwf	211,c	;volatile
  3638                           
  3639                           ;Program.c: 89:     OSCTUNE = 0X00;
  3640   0015F8  0E00               	movlw	0
  3641   0015FA  6E9B               	movwf	155,c	;volatile
  3642   0015FC  0012               	return		;funcret
  3643   0015FE                     __end_of_config_FOSC:
  3644                           	callstack 0
  3645                           
  3646 ;; *************** function _intern_TMR0 *****************
  3647 ;; Defined at:
  3648 ;;		line 129 in file "Program.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  1    wreg      void 
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3662 ;;      Params:         0       0       0       0       0       0       0
  3663 ;;      Locals:         0       0       0       0       0       0       0
  3664 ;;      Temps:          4       0       0       0       0       0       0
  3665 ;;      Totals:         4       0       0       0       0       0       0
  3666 ;;Total ram usage:        4 bytes
  3667 ;; Hardware stack levels used: 1
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		Interrupt level 1
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	intcodelo
  3676   000018                     __pintcodelo:
  3677                           	callstack 0
  3678   000018                     _intern_TMR0:
  3679                           	callstack 22
  3680                           
  3681                           ;incstack = 0
  3682   000018  8071               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3683   00001A  CFD8 F002          	movff	status,??_intern_TMR0+1
  3684   00001E  CFE8 F003          	movff	wreg,??_intern_TMR0+2
  3685   000022  CFE0 F004          	movff	bsr,??_intern_TMR0+3
  3686   000026                     
  3687                           ;Program.c: 131:     if (INTCONbits.TMR0IF == 1)
  3688   000026  A4F2               	btfss	242,2,c	;volatile
  3689   000028  EF18  F000         	goto	i1u128_21
  3690   00002C  EF1A  F000         	goto	i1u128_20
  3691   000030                     i1u128_21:
  3692   000030  EF94  F000         	goto	i1l61
  3693   000034                     i1u128_20:
  3694   000034                     
  3695                           ;Program.c: 132:     {;Program.c: 133:         timer_500ms++;
  3696   000034  0100               	movlb	0	; () banked
  3697   000036  4B86               	infsnz	_timer_500ms& (0+255),f,b
  3698   000038  2B87               	incf	(_timer_500ms+1)& (0+255),f,b
  3699   00003A                     
  3700                           ; BSR set to: 0
  3701                           ;Program.c: 134:         if (timer_500ms >= 20)
  3702   00003A  BF87               	btfsc	(_timer_500ms+1)& (0+255),7,b
  3703   00003C  EF29  F000         	goto	i1u129_21
  3704   000040  5187               	movf	(_timer_500ms+1)& (0+255),w,b
  3705   000042  E109               	bnz	i1u129_20
  3706   000044  0E14               	movlw	20
  3707   000046  5D86               	subwf	_timer_500ms& (0+255),w,b
  3708   000048  A0D8               	btfss	status,0,c
  3709   00004A  EF29  F000         	goto	i1u129_21
  3710   00004E  EF2B  F000         	goto	i1u129_20
  3711   000052                     i1u129_21:
  3712   000052  EF8F  F000         	goto	i1l56
  3713   000056                     i1u129_20:
  3714   000056                     
  3715                           ; BSR set to: 0
  3716                           ;Program.c: 135:         {;Program.c: 136:             timer_500ms = 0;
  3717   000056  0E00               	movlw	0
  3718   000058  6F87               	movwf	(_timer_500ms+1)& (0+255),b
  3719   00005A  0E00               	movlw	0
  3720   00005C  6F86               	movwf	_timer_500ms& (0+255),b
  3721   00005E                     
  3722                           ; BSR set to: 0
  3723                           ;Program.c: 137:             PORTBbits.RB0 = ~PORTBbits.RB0;
  3724   00005E  B081               	btfsc	129,0,c	;volatile
  3725   000060  EF34  F000         	goto	i1u130_21
  3726   000064  EF37  F000         	goto	i1u130_20
  3727   000068                     i1u130_21:
  3728   000068  0E01               	movlw	1
  3729   00006A  EF38  F000         	goto	i1u130_26
  3730   00006E                     i1u130_20:
  3731   00006E  0E00               	movlw	0
  3732   000070                     i1u130_26:
  3733   000070  0AFF               	xorlw	255
  3734   000072  6E01               	movwf	??_intern_TMR0^0,c
  3735   000074  5081               	movf	129,w,c	;volatile
  3736   000076  1801               	xorwf	??_intern_TMR0^0,w,c
  3737   000078  0BFE               	andlw	-2
  3738   00007A  1801               	xorwf	??_intern_TMR0^0,w,c
  3739   00007C  6E81               	movwf	129,c	;volatile
  3740   00007E                     
  3741                           ; BSR set to: 0
  3742                           ;Program.c: 138:             timer_1000ms++;
  3743   00007E  4B84               	infsnz	_timer_1000ms& (0+255),f,b
  3744   000080  2B85               	incf	(_timer_1000ms+1)& (0+255),f,b
  3745   000082                     
  3746                           ; BSR set to: 0
  3747                           ;Program.c: 139:             if (timer_1000ms >= 2)
  3748   000082  BF85               	btfsc	(_timer_1000ms+1)& (0+255),7,b
  3749   000084  EF4D  F000         	goto	i1u131_21
  3750   000088  5185               	movf	(_timer_1000ms+1)& (0+255),w,b
  3751   00008A  E109               	bnz	i1u131_20
  3752   00008C  0E02               	movlw	2
  3753   00008E  5D84               	subwf	_timer_1000ms& (0+255),w,b
  3754   000090  A0D8               	btfss	status,0,c
  3755   000092  EF4D  F000         	goto	i1u131_21
  3756   000096  EF4F  F000         	goto	i1u131_20
  3757   00009A                     i1u131_21:
  3758   00009A  EF8F  F000         	goto	i1l56
  3759   00009E                     i1u131_20:
  3760   00009E                     
  3761                           ; BSR set to: 0
  3762                           ;Program.c: 140:             {;Program.c: 141:                 counterSeg++;
  3763   00009E  4A6E               	infsnz	_counterSeg^0,f,c
  3764   0000A0  2A6F               	incf	(_counterSeg+1)^0,f,c
  3765   0000A2                     
  3766                           ; BSR set to: 0
  3767                           ;Program.c: 142:                 if (counterSeg >= 60)
  3768   0000A2  BE6F               	btfsc	(_counterSeg+1)^0,7,c
  3769   0000A4  EF5D  F000         	goto	i1u132_21
  3770   0000A8  506F               	movf	(_counterSeg+1)^0,w,c
  3771   0000AA  E109               	bnz	i1u132_20
  3772   0000AC  0E3C               	movlw	60
  3773   0000AE  5C6E               	subwf	_counterSeg^0,w,c
  3774   0000B0  A0D8               	btfss	status,0,c
  3775   0000B2  EF5D  F000         	goto	i1u132_21
  3776   0000B6  EF5F  F000         	goto	i1u132_20
  3777   0000BA                     i1u132_21:
  3778   0000BA  EF8B  F000         	goto	i1l58
  3779   0000BE                     i1u132_20:
  3780   0000BE                     
  3781                           ; BSR set to: 0
  3782                           ;Program.c: 143:                 {;Program.c: 144:                     counterSeg = 0;
  3783   0000BE  0E00               	movlw	0
  3784   0000C0  6E6F               	movwf	(_counterSeg+1)^0,c
  3785   0000C2  0E00               	movlw	0
  3786   0000C4  6E6E               	movwf	_counterSeg^0,c
  3787   0000C6                     
  3788                           ; BSR set to: 0
  3789                           ;Program.c: 145:                     counterMin++;
  3790   0000C6  4B82               	infsnz	_counterMin& (0+255),f,b
  3791   0000C8  2B83               	incf	(_counterMin+1)& (0+255),f,b
  3792   0000CA                     
  3793                           ; BSR set to: 0
  3794                           ;Program.c: 146:                     if (counterMin >= 60)
  3795   0000CA  BF83               	btfsc	(_counterMin+1)& (0+255),7,b
  3796   0000CC  EF71  F000         	goto	i1u133_21
  3797   0000D0  5183               	movf	(_counterMin+1)& (0+255),w,b
  3798   0000D2  E109               	bnz	i1u133_20
  3799   0000D4  0E3C               	movlw	60
  3800   0000D6  5D82               	subwf	_counterMin& (0+255),w,b
  3801   0000D8  A0D8               	btfss	status,0,c
  3802   0000DA  EF71  F000         	goto	i1u133_21
  3803   0000DE  EF73  F000         	goto	i1u133_20
  3804   0000E2                     i1u133_21:
  3805   0000E2  EF8B  F000         	goto	i1l58
  3806   0000E6                     i1u133_20:
  3807   0000E6                     
  3808                           ; BSR set to: 0
  3809                           ;Program.c: 147:                     {;Program.c: 148:                         counterMi
      +                          n = 0;
  3810   0000E6  0E00               	movlw	0
  3811   0000E8  6F83               	movwf	(_counterMin+1)& (0+255),b
  3812   0000EA  0E00               	movlw	0
  3813   0000EC  6F82               	movwf	_counterMin& (0+255),b
  3814   0000EE                     
  3815                           ; BSR set to: 0
  3816                           ;Program.c: 149:                         counterHor++;
  3817   0000EE  4B80               	infsnz	_counterHor& (0+255),f,b
  3818   0000F0  2B81               	incf	(_counterHor+1)& (0+255),f,b
  3819   0000F2                     
  3820                           ; BSR set to: 0
  3821                           ;Program.c: 150:                         if (counterHor >= 24)
  3822   0000F2  BF81               	btfsc	(_counterHor+1)& (0+255),7,b
  3823   0000F4  EF85  F000         	goto	i1u134_21
  3824   0000F8  5181               	movf	(_counterHor+1)& (0+255),w,b
  3825   0000FA  E109               	bnz	i1u134_20
  3826   0000FC  0E18               	movlw	24
  3827   0000FE  5D80               	subwf	_counterHor& (0+255),w,b
  3828   000100  A0D8               	btfss	status,0,c
  3829   000102  EF85  F000         	goto	i1u134_21
  3830   000106  EF87  F000         	goto	i1u134_20
  3831   00010A                     i1u134_21:
  3832   00010A  EF8B  F000         	goto	i1l58
  3833   00010E                     i1u134_20:
  3834   00010E                     
  3835                           ; BSR set to: 0
  3836                           ;Program.c: 151:                         {;Program.c: 152:                             c
      +                          ounterHor = 0;
  3837   00010E  0E00               	movlw	0
  3838   000110  6F81               	movwf	(_counterHor+1)& (0+255),b
  3839   000112  0E00               	movlw	0
  3840   000114  6F80               	movwf	_counterHor& (0+255),b
  3841   000116                     i1l58:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;Program.c: 156:                 timer_1000ms = 0;
  3845   000116  0E00               	movlw	0
  3846   000118  6F85               	movwf	(_timer_1000ms+1)& (0+255),b
  3847   00011A  0E00               	movlw	0
  3848   00011C  6F84               	movwf	_timer_1000ms& (0+255),b
  3849   00011E                     i1l56:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Program.c: 159:         TMR0 = 61;
  3853   00011E  0E00               	movlw	0
  3854   000120  6ED7               	movwf	215,c	;volatile
  3855   000122  0E3D               	movlw	61
  3856   000124  6ED6               	movwf	214,c	;volatile
  3857   000126                     
  3858                           ; BSR set to: 0
  3859                           ;Program.c: 160:         INTCONbits.TMR0IF = 0;
  3860   000126  94F2               	bcf	242,2,c	;volatile
  3861   000128                     i1l61:
  3862   000128  C004  FFE0         	movff	??_intern_TMR0+3,bsr
  3863   00012C  C003  FFE8         	movff	??_intern_TMR0+2,wreg
  3864   000130  C002  FFD8         	movff	??_intern_TMR0+1,status
  3865   000134  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3866   000136  0010               	retfie	
  3867   000138                     __end_of_intern_TMR0:
  3868                           	callstack 0
  3869                           
  3870                           	psect	rparam
  3871   000000                     
  3872                           	psect	temp
  3873   000071                     btemp:
  3874                           	callstack 0
  3875   000071                     	ds	1
  3876   000000                     int$flags	set	btemp
  3877   000000                     wtemp8	set	btemp+1
  3878   000000                     ttemp5	set	btemp+1
  3879   000000                     ttemp6	set	btemp+4
  3880   000000                     ttemp7	set	btemp+8
  3881                           
  3882                           	psect	idloc
  3883                           
  3884                           ;Config register IDLOC0 @ 0x200000
  3885                           ;	unspecified, using default values
  3886   200000                     	org	2097152
  3887   200000  FF                 	db	255
  3888                           
  3889                           ;Config register IDLOC1 @ 0x200001
  3890                           ;	unspecified, using default values
  3891   200001                     	org	2097153
  3892   200001  FF                 	db	255
  3893                           
  3894                           ;Config register IDLOC2 @ 0x200002
  3895                           ;	unspecified, using default values
  3896   200002                     	org	2097154
  3897   200002  FF                 	db	255
  3898                           
  3899                           ;Config register IDLOC3 @ 0x200003
  3900                           ;	unspecified, using default values
  3901   200003                     	org	2097155
  3902   200003  FF                 	db	255
  3903                           
  3904                           ;Config register IDLOC4 @ 0x200004
  3905                           ;	unspecified, using default values
  3906   200004                     	org	2097156
  3907   200004  FF                 	db	255
  3908                           
  3909                           ;Config register IDLOC5 @ 0x200005
  3910                           ;	unspecified, using default values
  3911   200005                     	org	2097157
  3912   200005  FF                 	db	255
  3913                           
  3914                           ;Config register IDLOC6 @ 0x200006
  3915                           ;	unspecified, using default values
  3916   200006                     	org	2097158
  3917   200006  FF                 	db	255
  3918                           
  3919                           ;Config register IDLOC7 @ 0x200007
  3920                           ;	unspecified, using default values
  3921   200007                     	org	2097159
  3922   200007  FF                 	db	255
  3923                           
  3924                           	psect	config
  3925                           
  3926                           ; Padding undefined space
  3927   300000                     	org	3145728
  3928   300000  FF                 	db	255
  3929                           
  3930                           ;Config register CONFIG1H @ 0x300001
  3931                           ;	Oscillator Selection bits
  3932                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3933                           ;	Fail-Safe Clock Monitor Enable bit
  3934                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3935                           ;	Internal/External Oscillator Switchover bit
  3936                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3937   300001                     	org	3145729
  3938   300001  08                 	db	8
  3939                           
  3940                           ;Config register CONFIG2L @ 0x300002
  3941                           ;	Power-up Timer Enable bit
  3942                           ;	PWRT = OFF, PWRT disabled
  3943                           ;	Brown-out Reset Enable bits
  3944                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3945                           ;	Brown Out Reset Voltage bits
  3946                           ;	BORV = 3, Minimum setting
  3947   300002                     	org	3145730
  3948   300002  19                 	db	25
  3949                           
  3950                           ;Config register CONFIG2H @ 0x300003
  3951                           ;	Watchdog Timer Enable bit
  3952                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3953                           ;	Watchdog Timer Postscale Select bits
  3954                           ;	WDTPS = 32768, 1:32768
  3955   300003                     	org	3145731
  3956   300003  1E                 	db	30
  3957                           
  3958                           ; Padding undefined space
  3959   300004                     	org	3145732
  3960   300004  FF                 	db	255
  3961                           
  3962                           ;Config register CONFIG3H @ 0x300005
  3963                           ;	CCP2 MUX bit
  3964                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3965                           ;	PORTB A/D Enable bit
  3966                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3967                           ;	Low-Power Timer1 Oscillator Enable bit
  3968                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3969                           ;	MCLR Pin Enable bit
  3970                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3971   300005                     	org	3145733
  3972   300005  81                 	db	129
  3973                           
  3974                           ;Config register CONFIG4L @ 0x300006
  3975                           ;	Stack Full/Underflow Reset Enable bit
  3976                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3977                           ;	Single-Supply ICSP Enable bit
  3978                           ;	LVP = OFF, Single-Supply ICSP disabled
  3979                           ;	Extended Instruction Set Enable bit
  3980                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3981                           ;	Background Debugger Enable bit
  3982                           ;	DEBUG = 0x1, unprogrammed default
  3983   300006                     	org	3145734
  3984   300006  81                 	db	129
  3985                           
  3986                           ; Padding undefined space
  3987   300007                     	org	3145735
  3988   300007  FF                 	db	255
  3989                           
  3990                           ;Config register CONFIG5L @ 0x300008
  3991                           ;	Code Protection bit
  3992                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3993                           ;	Code Protection bit
  3994                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3995                           ;	Code Protection bit
  3996                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3997                           ;	Code Protection bit
  3998                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3999   300008                     	org	3145736
  4000   300008  0F                 	db	15
  4001                           
  4002                           ;Config register CONFIG5H @ 0x300009
  4003                           ;	Boot Block Code Protection bit
  4004                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4005                           ;	Data EEPROM Code Protection bit
  4006                           ;	CPD = OFF, Data EEPROM not code-protected
  4007   300009                     	org	3145737
  4008   300009  C0                 	db	192
  4009                           
  4010                           ;Config register CONFIG6L @ 0x30000A
  4011                           ;	Write Protection bit
  4012                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  4013                           ;	Write Protection bit
  4014                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  4015                           ;	Write Protection bit
  4016                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  4017                           ;	Write Protection bit
  4018                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  4019   30000A                     	org	3145738
  4020   30000A  0F                 	db	15
  4021                           
  4022                           ;Config register CONFIG6H @ 0x30000B
  4023                           ;	Configuration Register Write Protection bit
  4024                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4025                           ;	Boot Block Write Protection bit
  4026                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  4027                           ;	Data EEPROM Write Protection bit
  4028                           ;	WRTD = OFF, Data EEPROM not write-protected
  4029   30000B                     	org	3145739
  4030   30000B  E0                 	db	224
  4031                           
  4032                           ;Config register CONFIG7L @ 0x30000C
  4033                           ;	Table Read Protection bit
  4034                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4035                           ;	Table Read Protection bit
  4036                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4037                           ;	Table Read Protection bit
  4038                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4039                           ;	Table Read Protection bit
  4040                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4041   30000C                     	org	3145740
  4042   30000C  0F                 	db	15
  4043                           
  4044                           ;Config register CONFIG7H @ 0x30000D
  4045                           ;	Boot Block Table Read Protection bit
  4046                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4047   30000D                     	org	3145741
  4048   30000D  40                 	db	64
  4049                           tosu	equ	0xFFF
  4050                           tosh	equ	0xFFE
  4051                           tosl	equ	0xFFD
  4052                           stkptr	equ	0xFFC
  4053                           pclatu	equ	0xFFB
  4054                           pclath	equ	0xFFA
  4055                           pcl	equ	0xFF9
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           indf0	equ	0xFEF
  4063                           postinc0	equ	0xFEE
  4064                           postdec0	equ	0xFED
  4065                           preinc0	equ	0xFEC
  4066                           plusw0	equ	0xFEB
  4067                           fsr0h	equ	0xFEA
  4068                           fsr0l	equ	0xFE9
  4069                           wreg	equ	0xFE8
  4070                           indf1	equ	0xFE7
  4071                           postinc1	equ	0xFE6
  4072                           postdec1	equ	0xFE5
  4073                           preinc1	equ	0xFE4
  4074                           plusw1	equ	0xFE3
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           bsr	equ	0xFE0
  4078                           indf2	equ	0xFDF
  4079                           postinc2	equ	0xFDE
  4080                           postdec2	equ	0xFDD
  4081                           preinc2	equ	0xFDC
  4082                           plusw2	equ	0xFDB
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8

Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     112
    BANK0           128     13      69
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S939$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S886$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S886$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[16]), STR_3(CODE[16]), bufferLCD(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _intern_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _intern_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intern_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intern_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intern_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intern_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intern_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12292
                        _config_FOSC
                   _config_INTERRUPT
                          _config_IO
                      _config_TIMER0
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    15     10    9629
                                             95 COMRAM    10     0     10
                                              0 BANK0     13    13      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    9137
                                             87 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    8643
                                             66 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    5075
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2775
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1357
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1404
                                             10 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     259
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     281
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                             10 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              8 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              8 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              6 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_TIMER0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _intern_TMR0                                          4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_INTERRUPT
   _config_IO
   _config_TIMER0
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 _intern_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      45       5       53.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      70       1       88.9%
BITBIGSFRhlh        25      0       0      20        0.0%
BITBIGSFRhhhlh      1A      0       0      17        0.0%
BITBIGSFRhhl        11      0       0      19        0.0%
BITBIGSFRlhh         E      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      16        0.0%
BITBIGSFRhllh        4      0       0      21        0.0%
BITBIGSFRhhhll       1      0       0      18        0.0%
BITBIGSFRlhl         1      0       0      24        0.0%
BITBIGSFRhlll        1      0       0      22        0.0%
BITBIGSFRll          1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B5      26        0.0%
DATA                 0      0      B5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 10 15:57:46 2023

                      l41 15F2                        l50 15E4                        l44 15FC  
                      l47 1602                        l90 134A                        l94 15B8  
                      l98 1098            ?_lcd_send_byte 0009                        bsr 000FE0  
     ___wmul@multiplicand 0007                       l101 15D6                       l113 12AC  
                     l116 1598                       l230 0D06                       l243 0E6A  
                     l821 11A8                       l911 154C                       l824 11EA  
                     l832 06CC                       l905 0FAC                       l826 120C  
                     l834 06D4                       l835 071A                       l908 0FB4  
                     l934 1162                       l942 14E0                       l870 0B7E  
                     l919 149C                       l880 1518                       l848 08E4  
                     l945 1604                       l794 1408                       l883 1520  
                     l876 1456                       u950 15B0                       u951 15AC  
                     _abs 14E2                       _pad 1164                       wreg 000FE8  
                    l2001 0C2E                      l2011 0C9E                      l2003 0C3C  
                    ?_abs 0017                      l2013 0CB0                      l2005 0C4E  
                    l2101 0666                      l2007 0C7C                      l2015 0CB6  
                    l2031 0D3E                      l2023 0D08                      l2111 06C0  
                    l2103 0676                      l2017 0CC6                      l2009 0C9C  
                    l2041 0DA6                      l2033 0D4C                      l2025 0D0C  
                    l2121 070E                      l2113 06DC                      l2105 0696  
                    l2201 0936                      l2019 0CE6                      l2043 0DB4  
                    l2051 0E1A                      l2035 0D6C                      l2027 0D1A  
                    l2131 07B4                      l2123 0716                      l2115 06EC  
                    l2107 06A4                      l2211 099A                      l2203 0948  
                    l2053 0E2A                      l2045 0DE2                      l2037 0D8A  
                    l2029 0D3A                      l2061 1172                      l2141 085C  
                    l2133 07BA                      l2125 0722                      l2117 06F2  
                    l2109 06A6                      l2221 0A30                      l2213 09BE  
                    l2055 0E4A                      l2047 0E02                      l2039 0D92  
                    l2071 11C8                      l2063 1186                      l2151 08B4  
                    l2143 0876                      l2135 07C0                      l2127 072C  
                    l2119 0702                      l2231 0AA2                      l2215 09F4  
                    l2207 0954                      l2081 1522                      l2049 0E14  
                    l2073 11CC                      l2065 1194                      l2153 08C4  
                    l2145 0890                      l2129 0732                      l2137 0824  
                    l2233 0ABE                      l2225 0A3E                      l2217 0A02  
                    l2209 0988                      l2091 1492                      l2171 0EE4  
                    l2163 0E84                      l2075 11F8                      l2067 11A0  
                    l2059 1164                      l2139 083E                      l2147 089E  
                    l2235 0B14                      l2227 0A76                      l2219 0A10  
                    l2243 0B56                      l1701 1096                      l2093 1496  
                    l2085 1458                      l2181 0F7E                      l2173 0F18  
                    l2165 0EA0                      l2157 0E6C                      l2077 14E2  
                    l2069 11B4                      l2149 08AE                      l2229 0A86  
                    l2325 097A                      l2253 140A                      l2087 145C  
                    l2183 0F90                      l2327 0F02                      l2167 0ED4  
                    l2159 0E80                      l2079 14FC                      l2239 0B44  
                    l2191 090A                      l2255 1416                      l2271 13F6  
                    l2263 13B8                      l1801 12BC                      l2089 1470  
                    l2169 0EDC                      l2097 0632                      l2193 0918  
                    l2257 1432                      l2265 13CA                      l2281 1372  
                    l1803 12BE                      l2179 0F4E                      l2099 0652  
                    l2195 0924                      l2259 144E                      l2267 13D2  
                    l2283 139E                      l2275 134C                      l1581 15B0  
                    l1821 12EC                      l1805 12C0                      l2197 0928  
                    l2189 08E6                      l2269 13DA                      l2277 135C  
                    l1831 131E                      l1823 12FC                      l1815 12D6  
                    l1807 12C2                      l2199 0934                      l2279 1360  
                    l1833 1334                      l1825 1302                      l1817 12DC  
                    l1809 12D2                      l1841 122A                      l1587 15B6  
                    l1579 159C                      l1691 102C                      l1683 0FB8  
                    l1835 133C                      l1827 130A                      l1819 12EA  
                    l1771 15CE                      l1851 127C                      l1843 123C  
                    l1693 1044                      l1685 1020                      l1829 1318  
                    l1773 15D0                      l1845 1242                      l1837 1210  
                    l1791 15D8                      l1695 105E                      l1687 1022  
                    l1767 15BC                      l1847 1250                      l1839 1220  
                    l1951 109A                      l1785 15E6                      l1697 107A  
                    l1689 1024                      l1793 12AE                      l1769 15C6  
                    l1849 1278                      l1961 111C                      l1953 10AC  
                    l1787 15F4                      l1699 1094                      l1795 12B2  
                    l1955 10BE                      l1971 14C0                      l1789 15FE  
                    l1797 12B4                      l1973 1574                      l1981 0B84  
                    l1957 10C8                      l1965 149E                      ?_pad 0015  
                    l1799 12B6                      l1975 1590                      l1991 0BE4  
                    l1983 0B92                      l1959 10E6                      l1967 14AA  
                    l1993 0BE8                      l1985 0BB2                      l1969 14BC  
                    l1995 0BF4                      l1987 0BB6                      l1979 0B80  
                    l1997 0C12                      l1989 0BC4                      l1999 0C1A  
                    STR_1 0601                      STR_2 0622                      STR_3 0612  
                    u1220 12FC                      u1221 12F8                      u1205 15C4  
                    u1206 15C6                      u1230 1220                      u1231 121C  
                    u1240 123C                      u1400 0B92                      u1241 1238  
                    u1401 0B8E                      u1250 1270                      u1410 0BC4  
                    u1411 0BC0                      u1260 129C                      u1500 0DB4  
                    u1421 0BEE                      u1501 0DB0                      u1270 12AC  
                    u1430 0C12                      u1510 0DE2                      u1350 10AC  
                    u1271 12A8                      u1431 0C0E                      u1511 0DDE  
                    u1351 10A8                      u1600 1470                      u1440 0C3C  
                    u1520 0E2A                      u1360 10BE                      u1257 1266  
                    u1601 146C                      u1441 0C38                      u1521 0E26  
                    u1361 10BA                      u1610 1492                      u1450 0C7C  
                    u1370 10E6                      u1530 1172                      u1267 1292  
                    u1611 148E                      u1451 0C78                      u1371 10E2  
                    u1531 116E                      u1460 0CC6                      u1380 111C  
                    u1540 1194                      u1700 085C                      u1620 0662  
                    u1461 0CC2                      u1381 1118                      u1541 1190  
                    u1701 0858                      u1621 065C                      u1470 0D1A  
                    u1390 14E0                      u1550 11EA                      u1710 0876  
                    u1630 0664                      u1471 0D16                      u1391 14DC  
                    u1551 11E6                      u1711 0872                      u1480 0D4C  
                    u1560 11F8                      u1720 0890                      u1640 0676  
                    u1800 099A                      u1481 0D48                      u1561 11F4  
                    u1721 088C                      u1641 0672                      u1801 0996  
                    u1490 0D8A                      u1570 14FC                      u1730 089E  
                    u1650 06A4                      u1810 09BE                      u1491 0D86  
                    u1571 14F8                      u1731 089A                      u1651 06A0  
                    u1811 09BA                      u1580 1546                      u1740 08AE  
                    u1660 06C0                      u1820 0A02                      u1581 1540  
                    u1741 08AA                      u1661 06BC                      u1821 09FE  
                    u1590 1548                      u1750 0EA0                      u1670 06EC  
                    u1830 0A76                      u1751 0E9C                      u1671 06E8  
                    u1831 0A72                      u1760 0ED0                      u1680 0702  
                    u1840 0AA2                      u1761 0ECC                      u1681 06FE  
                    u1841 0A9E                      u1770 0F7E                      u1690 083E  
                    u1850 0ABE                      u1907 1304                      u1771 0F7A  
                    u1691 083A                      u1851 0ABA                      u1780 0F90  
                    u1860 144E                      u1917 1312                      u1781 0F8C  
                    u1861 144A                      u1790 090A                      u1927 1324  
                    u1791 0906                      u1937 1336                      u1947 1344  
                    u1957 1026                      u1877 15C8                      u1887 12C8  
                    u1897 12E2                      i1l61 0128                      i1l56 011E  
                    i1l58 0116                      _TMR0 000FD6                      abs@a 0017  
                    _dbuf 0088                      _atoi 0E6C                      _main 134C  
                    _dtoa 0632                      _prec 006C                      pad@i 001C  
                    pad@p 0019                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf1 000FE7                      indf2 000FDF                      fsr1l 000FE1  
                    pad@w 001E                      fsr2l 000FD9                      btemp 0071  
                    prodh 000FF4                      prodl 000FF3                      start 0138  
            ___param_bank 000000                     ??_abs 0019                     ??_pad 001B  
         __end_of___aodiv 0D08                     ?_atoi 000B                     ?_main 0001  
                   ?_dtoa 0020           __end_of___aomod 0E6C           ??_config_TIMER0 0005  
                   _T0CON 000FD5              vfpfcnvrt@fmt 0045                     _PORTB 000F81  
                   _PORTD 000F83                     _TRISB 000F93                     _TRISD 000F95  
         __end_of_lcd_cmd 109A                     _flags 0070                     _fputc 109A  
                   _fputs 149E           __end_of_isdigit 154E                     atoi@n 0012  
                   pad@fp 0015                     atoi@s 000B                     _width 006A  
                   _putch 1604                     dtoa@d 0022                     dtoa@i 0041  
                   dtoa@n 0038                     dtoa@p 0034                     dtoa@s 0040  
                   dtoa@w 0036           __end_of_isspace 149E           __end_of_set_bit 15BA  
                   tablat 000FF5                     ttemp5 0072                     ttemp6 0075  
                   ttemp7 0079                     status 000FD8              ?_intern_TMR0 0001  
                   wtemp8 0072           __end_of_sprintf 140A              lcd_write@end 000E  
            lcd_write@col 000B              lcd_write@lin 000F              lcd_write@str 000C  
         __initialization 154E              __end_of_atoi 0FB6              __end_of_main 13B8  
            __end_of_dtoa 08E6           ??_lcd_send_byte 000A                    ??_atoi 000D  
                  ??_main 006A                    ??_dtoa 002A             __activetblptr 000002  
        _config_INTERRUPT 15FE                    _ADCON1 000FC1                    ?_fputc 0005  
                  ?_fputs 000E                    ?_putch 0001                    i1l1871 0056  
                  i1l1881 00A2                    i1l1873 005E                    i1l1865 0026  
                  i1l1891 00EE                    i1l1883 00BE                    i1l1875 007E  
                  i1l1867 0034                    i1l1893 00F2                    i1l1885 00C6  
                  i1l1877 0082                    i1l1869 003A                    i1l1895 010E  
                  i1l1887 00CA                    i1l1879 009E                    i1l1897 0126  
                  i1l1889 00E6                    _INTCON 000FF2                    _OSCCON 000FD3  
           vfpfcnvrt@done 0054              vfprintf@cfmt 005E          __end_of_lcd_init 134C  
               ??___aodiv 0015                 ??___aomod 0015                    ___wmul 1574  
                  clear_0 1554                    clear_1 1560                    isa$std 000001  
                  pad@buf 0017                 ??_lcd_cmd 0007                    dtoa@fp 0020  
                  fputc@c 0005                    fputs@c 0012                    fputs@i 0013  
                  fputs@s 000E                 ??_isdigit 0007              __mediumconst 0000  
               ??_isspace 0007                 ??_set_bit 0006                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                    putch@c 0001  
        __end_of_vfprintf 1458                 ??_sprintf 006A                __accesstop 0080  
 __end_of__initialization 1566             ___rparam_used 000001            __pcstackCOMRAM 0001  
           __end_of_fputc 1164             __end_of_fputs 14E2             __end_of_putch 1606  
                 ??_fputc 0009                   ??_fputs 0012                   ??_putch 0005  
              __pbssBANK0 0080                   ?___wmul 0005        lcd_send_byte@level 000A  
                 _OSCTUNE 000F9B                 ?_lcd_init 0001  __end_of_config_INTERRUPT 1604  
              _counterHor 0080                _counterMin 0082                _counterSeg 006E  
                 __Hparam 0000                   __Lparam 0000         __end_of_config_IO 15F4  
                 ___aodiv 0B80                   ___aomod 0D08         __end_of_lcd_write 12AE  
               ?_vfprintf 0058               set_bit@comp 0005              __psmallconst 0600  
                 __pcinit 154E                   __ramtop 0600                   __ptext0 134C  
                 __ptext1 13B8                   __ptext2 140A                   __ptext3 08E6  
                 __ptext4 0632                   __ptext5 1164                   __ptext6 149E  
                 __ptext7 109A                   __ptext8 1604                   __ptext9 14E2  
                 _lcd_cmd 0FB6                   _isdigit 1522     __end_of_config_TIMER0 15E6  
                 _isspace 1458                   _set_bit 159A                   atoi@neg 0010  
                 _sprintf 13B8                ??_lcd_init 0009      end_of_initialization 1566  
                 fputc@fp 0007             __Lmediumconst 0000                   fputs@fp 0010  
       __end_of_vfpfcnvrt 0B80                   postdec2 000FDD                   postinc0 000FEE  
                 postinc1 000FE6                   postinc2 000FDE          vfpfcnvrt@convarg 004C  
              ??_vfprintf 005E     __end_of_lcd_send_byte 15D8                 _PORTBbits 000F81  
               _PORTDbits 000F83                 _PORTEbits 000F84                 _TRISEbits 000F96  
              lcd_cmd@cmd 0008             ??_config_FOSC 0005               vfpfcnvrt@ap 0047  
             vfpfcnvrt@cp 0056               vfpfcnvrt@fp 0043            __end_of___wmul 159A  
     start_initialization 154E               __end_of_abs 1522               __end_of_pad 120E  
             vfprintf@fmt 005A       __end_of_config_FOSC 15FE                  ??___wmul 0009  
             __pbssCOMRAM 006A             __pcstackBANK0 00B8          ___aodiv@dividend 0005  
           ??_intern_TMR0 0001         ?_config_INTERRUPT 0001        ??_config_INTERRUPT 0005  
                ?___aodiv 0005                  ?___aomod 0005          ___aodiv@quotient 0017  
               _bufferLCD 00A8               __pintcodelo 0018                 _config_IO 15E6  
       lcd_send_byte@data 0009                  ?_lcd_cmd 0001                 _lcd_write 120E  
             __smallconst 0600                  ?_isdigit 0005                  ?_isspace 0005  
                ?_set_bit 0005                set_bit@cmd 0006                  ?_sprintf 0060  
          ___wmul@product 0009               _config_FOSC 15F4                  i1u130_20 006E  
                i1u130_21 0068                  i1u130_26 0070                  i1u131_20 009E  
                i1u131_21 009A                  i1u132_20 00BE                  i1u132_21 00BA  
                i1u133_20 00E6                  i1u133_21 00E2                  i1u134_20 010E  
                i1u134_21 010A                  i1u128_20 0034                  i1u128_21 0030  
                i1u129_20 0056                  i1u129_21 0052       __end_of_intern_TMR0 0138  
               _vfpfcnvrt 08E6                ?_config_IO 0001                ?_lcd_write 000B  
       ___wmul@multiplier 0005                 lcd_init@i 000A              _isspace$1026 0009  
                __Hrparam 0000                vfprintf@ap 005C                  __Lrparam 0000  
              vfprintf@fp 0058                ?_vfpfcnvrt 0043           ___aodiv@divisor 000D  
         ___aodiv@counter 0015                sprintf@fmt 0062                  _dtoa$977 0032  
                __ptext10 0D08                  __ptext11 0B80                  __ptext20 159A  
                __ptext12 0E6C                  __ptext21 15D8                  __ptext13 1458  
                __ptext22 15E6                  __ptext14 1522                  __ptext23 15FE  
                __ptext15 1574                  __ptext24 15F4                  __ptext16 120E  
                __ptext17 15BA                  __ptext18 12AE                  __ptext19 0FB6  
                _lcd_init 12AE               _intern_TMR0 0018                  isa$xinst 000000  
                int$flags 0071                  _vfprintf 140A               ??_config_IO 0005  
            _timer_1000ms 0084               ??_lcd_write 000E          ___aomod@dividend 0005  
              _INTCONbits 000FF2             _config_TIMER0 15D8                  isdigit@c 0005  
                intlevel1 0000                 sprintf@ap 00B8                  isspace@c 0005  
         ___aomod@divisor 000D               _timer_500ms 0086               ??_vfpfcnvrt 0049  
         ___aomod@counter 0015             _lcd_send_byte 15BA                  sprintf@f 00BA  
                sprintf@s 0060            ?_config_TIMER0 0001              ___aodiv@sign 0016  
            ?_config_FOSC 0001              ___aomod@sign 0016  
