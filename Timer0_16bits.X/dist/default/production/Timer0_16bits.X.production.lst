

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 10 15:56:14 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Generated 23/03/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72   000000                     _TMR0L	set	4054
    73   000000                     _TMR0H	set	4055
    74   000000                     _PORTBbits	set	3969
    75   000000                     _INTCONbits	set	4082
    76   000000                     _PORTDbits	set	3971
    77   000000                     _PORTB	set	3969
    78   000000                     _PORTD	set	3971
    79   000000                     _TRISD	set	3989
    80   000000                     _OSCTUNE	set	3995
    81   000000                     _ADCON1	set	4033
    82   000000                     _TRISEbits	set	3990
    83   000000                     _TRISB	set	3987
    84   000000                     _PORTEbits	set	3972
    85   000000                     _OSCCON	set	4051
    86   000000                     _T0CON	set	4053
    87   000000                     _INTCON	set	4082
    88                           
    89                           	psect	smallconst
    90   000600                     __psmallconst:
    91                           	callstack 0
    92   000600  00                 	db	0
    93   000601                     STR_1:
    94   000601  20                 	db	32
    95   000602  20                 	db	32
    96   000603  20                 	db	32
    97   000604  20                 	db	32
    98   000605  20                 	db	32
    99   000606  20                 	db	32
   100   000607  20                 	db	32
   101   000608  20                 	db	32
   102   000609  20                 	db	32
   103   00060A  20                 	db	32
   104   00060B  20                 	db	32
   105   00060C  20                 	db	32
   106   00060D  20                 	db	32
   107   00060E  20                 	db	32
   108   00060F  20                 	db	32
   109   000610  00                 	db	0
   110   000611                     STR_4:
   111   000611  43                 	db	67	;'C'
   112   000612  4F                 	db	79	;'O'
   113   000613  4E                 	db	78	;'N'
   114   000614  54                 	db	84	;'T'
   115   000615  41                 	db	65	;'A'
   116   000616  47                 	db	71	;'G'
   117   000617  45                 	db	69	;'E'
   118   000618  4D                 	db	77	;'M'
   119   000619  3A                 	db	58	;':'
   120   00061A  20                 	db	32
   121   00061B  30                 	db	48	;'0'
   122   00061C  30                 	db	48	;'0'
   123   00061D  00                 	db	0
   124   00061E                     STR_5:
   125   00061E  25                 	db	37
   126   00061F  64                 	db	100	;'d'
   127   000620  53                 	db	83	;'S'
   128   000621  45                 	db	69	;'E'
   129   000622  47                 	db	71	;'G'
   130   000623  20                 	db	32
   131   000624  00                 	db	0
   132   000625                     STR_3:
   133   000625  54                 	db	84	;'T'
   134   000626  49                 	db	73	;'I'
   135   000627  4D                 	db	77	;'M'
   136   000628  45                 	db	69	;'E'
   137   000629  52                 	db	82	;'R'
   138   00062A  30                 	db	48	;'0'
   139   00062B  00                 	db	0
   140   00062C  00                 	db	0	; dummy byte at the end
   141   000000                     
   142                           ; #config settings
   143                           
   144                           	psect	cinit
   145   0011D6                     __pcinit:
   146                           	callstack 0
   147   0011D6                     start_initialization:
   148                           	callstack 0
   149   0011D6                     __initialization:
   150                           	callstack 0
   151                           
   152                           ; Clear objects allocated to BANK0 (48 bytes)
   153   0011D6  EE00  F080         	lfsr	0,__pbssBANK0
   154   0011DA  0E30               	movlw	48
   155   0011DC                     clear_0:
   156   0011DC  6AEE               	clrf	postinc0,c
   157   0011DE  06E8               	decf	wreg,f,c
   158   0011E0  E1FD               	bnz	clear_0
   159                           
   160                           ; Clear objects allocated to COMRAM (9 bytes)
   161   0011E2  EE00  F070         	lfsr	0,__pbssCOMRAM
   162   0011E6  0E09               	movlw	9
   163   0011E8                     clear_1:
   164   0011E8  6AEE               	clrf	postinc0,c
   165   0011EA  06E8               	decf	wreg,f,c
   166   0011EC  E1FD               	bnz	clear_1
   167   0011EE                     end_of_initialization:
   168                           	callstack 0
   169   0011EE                     __end_of__initialization:
   170                           	callstack 0
   171   0011EE  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   172   0011F0  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   173   0011F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   174   0011F4  6EF8               	movwf	tblptru,c
   175   0011F6  0100               	movlb	0
   176   0011F8  EF24  F008         	goto	_main	;jump to C main() function
   177                           
   178                           	psect	bssCOMRAM
   179   000070                     __pbssCOMRAM:
   180                           	callstack 0
   181   000070                     _width:
   182                           	callstack 0
   183   000070                     	ds	2
   184   000072                     _prec:
   185                           	callstack 0
   186   000072                     	ds	2
   187   000074                     _counter:
   188                           	callstack 0
   189   000074                     	ds	2
   190   000076                     _timer_1seg:
   191                           	callstack 0
   192   000076                     	ds	2
   193   000078                     _flags:
   194                           	callstack 0
   195   000078                     	ds	1
   196                           
   197                           	psect	bssBANK0
   198   000080                     __pbssBANK0:
   199                           	callstack 0
   200   000080                     _dbuf:
   201                           	callstack 0
   202   000080                     	ds	32
   203   0000A0                     _bufferLCD:
   204                           	callstack 0
   205   0000A0                     	ds	16
   206                           
   207                           	psect	cstackCOMRAM
   208   000001                     __pcstackCOMRAM:
   209                           	callstack 0
   210   000001                     ??_intern_TMR0:
   211   000001                     
   212                           ; 1 bytes @ 0x0
   213   000001                     	ds	4
   214   000005                     ?___aodiv:
   215                           	callstack 0
   216   000005                     ?___aomod:
   217                           	callstack 0
   218   000005                     set_bit@comp:
   219                           	callstack 0
   220   000005                     fputc@c:
   221                           	callstack 0
   222   000005                     ___aodiv@dividend:
   223                           	callstack 0
   224   000005                     ___aomod@dividend:
   225                           	callstack 0
   226                           
   227                           ; 8 bytes @ 0x4
   228   000005                     	ds	1
   229   000006                     set_bit@cmd:
   230                           	callstack 0
   231                           
   232                           ; 1 bytes @ 0x5
   233   000006                     	ds	1
   234   000007                     ??_lcd_cmd:
   235   000007                     fputc@fp:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0x6
   239   000007                     	ds	1
   240   000008                     lcd_cmd@cmd:
   241                           	callstack 0
   242                           
   243                           ; 1 bytes @ 0x7
   244   000008                     	ds	1
   245   000009                     ??_fputc:
   246   000009                     ??_lcd_init:
   247   000009                     lcd_send_byte@data:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0x8
   251   000009                     	ds	1
   252   00000A                     lcd_init@i:
   253                           	callstack 0
   254   00000A                     lcd_send_byte@level:
   255                           	callstack 0
   256                           
   257                           ; 1 bytes @ 0x9
   258   00000A                     	ds	1
   259   00000B                     lcd_write@col:
   260                           	callstack 0
   261                           
   262                           ; 1 bytes @ 0xA
   263   00000B                     	ds	1
   264   00000C                     lcd_write@str:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0xB
   268   00000C                     	ds	1
   269   00000D                     ___aodiv@divisor:
   270                           	callstack 0
   271   00000D                     ___aomod@divisor:
   272                           	callstack 0
   273                           
   274                           ; 8 bytes @ 0xC
   275   00000D                     	ds	1
   276   00000E                     lcd_write@end:
   277                           	callstack 0
   278   00000E                     fputs@s:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0xD
   282   00000E                     	ds	1
   283   00000F                     lcd_write@lin:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0xE
   287   00000F                     	ds	1
   288   000010                     fputs@fp:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0xF
   292   000010                     	ds	2
   293   000012                     fputs@c:
   294                           	callstack 0
   295                           
   296                           ; 1 bytes @ 0x11
   297   000012                     	ds	1
   298   000013                     fputs@i:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x12
   302   000013                     	ds	2
   303   000015                     ___aodiv@counter:
   304                           	callstack 0
   305   000015                     ___aomod@counter:
   306                           	callstack 0
   307   000015                     pad@fp:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x14
   311   000015                     	ds	1
   312   000016                     ___aodiv@sign:
   313                           	callstack 0
   314   000016                     ___aomod@sign:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x15
   318   000016                     	ds	1
   319   000017                     ?_abs:
   320                           	callstack 0
   321   000017                     pad@buf:
   322                           	callstack 0
   323   000017                     abs@a:
   324                           	callstack 0
   325   000017                     ___aodiv@quotient:
   326                           	callstack 0
   327                           
   328                           ; 8 bytes @ 0x16
   329   000017                     	ds	2
   330   000019                     ??_abs:
   331   000019                     pad@p:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x18
   335   000019                     	ds	2
   336   00001B                     ??_pad:
   337                           
   338                           ; 1 bytes @ 0x1A
   339   00001B                     	ds	1
   340   00001C                     pad@i:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x1B
   344   00001C                     	ds	2
   345   00001E                     pad@w:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x1D
   349   00001E                     	ds	2
   350   000020                     dtoa@fp:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x1F
   354   000020                     	ds	2
   355   000022                     dtoa@d:
   356                           	callstack 0
   357                           
   358                           ; 8 bytes @ 0x21
   359   000022                     	ds	8
   360   00002A                     ??_dtoa:
   361                           
   362                           ; 1 bytes @ 0x29
   363   00002A                     	ds	8
   364   000032                     _dtoa$964:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x31
   368   000032                     	ds	2
   369   000034                     dtoa@p:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x33
   373   000034                     	ds	2
   374   000036                     dtoa@w:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x35
   378   000036                     	ds	2
   379   000038                     dtoa@n:
   380                           	callstack 0
   381                           
   382                           ; 8 bytes @ 0x37
   383   000038                     	ds	8
   384   000040                     dtoa@i:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x3F
   388   000040                     	ds	2
   389   000042                     dtoa@s:
   390                           	callstack 0
   391                           
   392                           ; 1 bytes @ 0x41
   393   000042                     	ds	1
   394   000043                     vfpfcnvrt@fp:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x42
   398   000043                     	ds	2
   399   000045                     vfpfcnvrt@fmt:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x44
   403   000045                     	ds	2
   404   000047                     vfpfcnvrt@ap:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x46
   408   000047                     	ds	2
   409   000049                     ??_vfpfcnvrt:
   410                           
   411                           ; 1 bytes @ 0x48
   412   000049                     	ds	2
   413   00004B                     vfpfcnvrt@convarg:
   414                           	callstack 0
   415                           
   416                           ; 8 bytes @ 0x4A
   417   00004B                     	ds	8
   418   000053                     vfpfcnvrt@cp:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x52
   422   000053                     	ds	2
   423   000055                     ?_vfprintf:
   424                           	callstack 0
   425   000055                     vfprintf@fp:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x54
   429   000055                     	ds	2
   430   000057                     vfprintf@fmt:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x56
   434   000057                     	ds	2
   435   000059                     vfprintf@ap:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x58
   439   000059                     	ds	2
   440   00005B                     vfprintf@cfmt:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x5A
   444   00005B                     	ds	2
   445   00005D                     ?_sprintf:
   446                           	callstack 0
   447   00005D                     sprintf@s:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x5C
   451   00005D                     	ds	2
   452   00005F                     sprintf@fmt:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x5E
   456   00005F                     	ds	4
   457   000063                     sprintf@ap:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x62
   461   000063                     	ds	2
   462   000065                     sprintf@f:
   463                           	callstack 0
   464                           
   465                           ; 11 bytes @ 0x64
   466   000065                     	ds	11
   467   000070                     
   468                           ; 1 bytes @ 0x6F
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 146 in file "Program_main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   488 ;;      Params:         0       0       0       0       0       0       0
   489 ;;      Locals:         0       0       0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0
   491 ;;      Totals:         0       0       0       0       0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels required when called: 9
   494 ;; This function calls:
   495 ;;		_config_FOSC
   496 ;;		_config_INTERRUPT
   497 ;;		_config_IO
   498 ;;		_config_TIMER0
   499 ;;		_lcd_init
   500 ;;		_lcd_write
   501 ;;		_sprintf
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text0
   508   001048                     __ptext0:
   509                           	callstack 0
   510   001048                     _main:
   511                           	callstack 22
   512   001048                     
   513                           ;Program_main.c: 148:     config_FOSC();
   514   001048  EC2B  F009         	call	_config_FOSC	;wreg free
   515                           
   516                           ;Program_main.c: 149:     config_IO();
   517   00104C  EC24  F009         	call	_config_IO	;wreg free
   518                           
   519                           ;Program_main.c: 150:     config_INTERRUPT();
   520   001050  EC30  F009         	call	_config_INTERRUPT	;wreg free
   521                           
   522                           ;Program_main.c: 151:     config_TIMER0();
   523   001054  EC1D  F009         	call	_config_TIMER0	;wreg free
   524   001058                     
   525                           ;Program_main.c: 152:     lcd_init();
   526   001058  EC98  F007         	call	_lcd_init	;wreg free
   527   00105C                     
   528                           ;Program_main.c: 154:     lcd_write(1,6, "TIMER0");
   529   00105C  0E06               	movlw	6
   530   00105E  6E0B               	movwf	lcd_write@col^0,c
   531   001060  0E25               	movlw	low STR_3
   532   001062  6E0C               	movwf	lcd_write@str^0,c
   533   001064  0E06               	movlw	high STR_3
   534   001066  6E0D               	movwf	(lcd_write@str+1)^0,c
   535   001068  0E01               	movlw	1
   536   00106A  EC48  F007         	call	_lcd_write
   537   00106E                     
   538                           ;Program_main.c: 155:     lcd_write(2,2, "CONTAGEM: 00");
   539   00106E  0E02               	movlw	2
   540   001070  6E0B               	movwf	lcd_write@col^0,c
   541   001072  0E11               	movlw	low STR_4
   542   001074  6E0C               	movwf	lcd_write@str^0,c
   543   001076  0E06               	movlw	high STR_4
   544   001078  6E0D               	movwf	(lcd_write@str+1)^0,c
   545   00107A  0E02               	movlw	2
   546   00107C  EC48  F007         	call	_lcd_write
   547   001080                     l1583:
   548                           
   549                           ;Program_main.c: 158:     {;Program_main.c: 159:         sprintf(bufferLCD, "%dSEG ", co
      +                          unter);
   550   001080  0EA0               	movlw	low _bufferLCD
   551   001082  6E5D               	movwf	sprintf@s^0,c
   552   001084  0E00               	movlw	high _bufferLCD
   553   001086  6E5E               	movwf	(sprintf@s+1)^0,c
   554   001088  0E1E               	movlw	low STR_5
   555   00108A  6E5F               	movwf	sprintf@fmt^0,c
   556   00108C  0E06               	movlw	high STR_5
   557   00108E  6E60               	movwf	(sprintf@fmt+1)^0,c
   558   001090  C074  F061         	movff	_counter,?_sprintf+4
   559   001094  C075  F062         	movff	_counter+1,?_sprintf+5
   560   001098  EC5B  F008         	call	_sprintf	;wreg free
   561   00109C                     
   562                           ;Program_main.c: 160:         lcd_write(2, 12, bufferLCD);
   563   00109C  0E0C               	movlw	12
   564   00109E  6E0B               	movwf	lcd_write@col^0,c
   565   0010A0  0EA0               	movlw	low _bufferLCD
   566   0010A2  6E0C               	movwf	lcd_write@str^0,c
   567   0010A4  0E00               	movlw	high _bufferLCD
   568   0010A6  6E0D               	movwf	(lcd_write@str+1)^0,c
   569   0010A8  0E02               	movlw	2
   570   0010AA  EC48  F007         	call	_lcd_write
   571   0010AE  EF40  F008         	goto	l1583
   572   0010B2  EF62  F000         	goto	start
   573   0010B6                     __end_of_main:
   574                           	callstack 0
   575                           
   576 ;; *************** function _sprintf *****************
   577 ;; Defined at:
   578 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  s               2   92[COMRAM] PTR unsigned char 
   581 ;;		 -> bufferLCD(16), 
   582 ;;  fmt             2   94[COMRAM] PTR const unsigned char 
   583 ;;		 -> STR_5(7), 
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  f              11  100[COMRAM] struct _IO_FILE
   586 ;;  ap              2   98[COMRAM] PTR void [1]
   587 ;;		 -> ?_sprintf(2), 
   588 ;;  ret             2    0        int 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  2   92[COMRAM] int 
   591 ;; Registers used:
   592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   598 ;;      Params:         6       0       0       0       0       0       0
   599 ;;      Locals:        13       0       0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0       0       0
   601 ;;      Totals:        19       0       0       0       0       0       0
   602 ;;Total ram usage:       19 bytes
   603 ;; Hardware stack levels used: 1
   604 ;; Hardware stack levels required when called: 8
   605 ;; This function calls:
   606 ;;		_vfprintf
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text1
   613   0010B6                     __ptext1:
   614                           	callstack 0
   615   0010B6                     _sprintf:
   616                           	callstack 22
   617   0010B6  0E61               	movlw	low (?_sprintf+4)
   618   0010B8  6E63               	movwf	sprintf@ap^0,c
   619   0010BA  0E00               	movlw	high (?_sprintf+4)
   620   0010BC  6E64               	movwf	(sprintf@ap+1)^0,c
   621   0010BE  C05D  F065         	movff	sprintf@s,sprintf@f
   622   0010C2  C05E  F066         	movff	sprintf@s+1,sprintf@f+1
   623   0010C6  0E00               	movlw	0
   624   0010C8  6E69               	movwf	(sprintf@f+4)^0,c
   625   0010CA  0E00               	movlw	0
   626   0010CC  6E68               	movwf	(sprintf@f+3)^0,c
   627   0010CE  0E00               	movlw	0
   628   0010D0  6E6F               	movwf	(sprintf@f+10)^0,c
   629   0010D2  0E00               	movlw	0
   630   0010D4  6E6E               	movwf	(sprintf@f+9)^0,c
   631   0010D6  0E65               	movlw	low sprintf@f
   632   0010D8  6E55               	movwf	vfprintf@fp^0,c
   633   0010DA  0E00               	movlw	high sprintf@f
   634   0010DC  6E56               	movwf	(vfprintf@fp+1)^0,c
   635   0010DE  C05F  F057         	movff	sprintf@fmt,vfprintf@fmt
   636   0010E2  C060  F058         	movff	sprintf@fmt+1,vfprintf@fmt+1
   637   0010E6  0E63               	movlw	low sprintf@ap
   638   0010E8  6E59               	movwf	vfprintf@ap^0,c
   639   0010EA  0E00               	movlw	high sprintf@ap
   640   0010EC  6E5A               	movwf	(vfprintf@ap+1)^0,c
   641   0010EE  EC82  F008         	call	_vfprintf	;wreg free
   642   0010F2  5068               	movf	(sprintf@f+3)^0,w,c
   643   0010F4  245D               	addwf	sprintf@s^0,w,c
   644   0010F6  6ED9               	movwf	fsr2l,c
   645   0010F8  5069               	movf	(sprintf@f+4)^0,w,c
   646   0010FA  205E               	addwfc	(sprintf@s+1)^0,w,c
   647   0010FC  6EDA               	movwf	fsr2h,c
   648   0010FE  0E00               	movlw	0
   649   001100  6EDF               	movwf	indf2,c
   650   001102  0012               	return		;funcret
   651   001104                     __end_of_sprintf:
   652                           	callstack 0
   653                           
   654 ;; *************** function _vfprintf *****************
   655 ;; Defined at:
   656 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  fp              2   84[COMRAM] PTR struct _IO_FILE
   659 ;;		 -> sprintf@f(11), 
   660 ;;  fmt             2   86[COMRAM] PTR const unsigned char 
   661 ;;		 -> STR_5(7), 
   662 ;;  ap              2   88[COMRAM] PTR PTR void 
   663 ;;		 -> sprintf@ap(2), 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  cfmt            2   90[COMRAM] PTR unsigned char 
   666 ;;		 -> STR_5(7), 
   667 ;; Return value:  Size  Location     Type
   668 ;;                  2   84[COMRAM] int 
   669 ;; Registers used:
   670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   676 ;;      Params:         6       0       0       0       0       0       0
   677 ;;      Locals:         2       0       0       0       0       0       0
   678 ;;      Temps:          0       0       0       0       0       0       0
   679 ;;      Totals:         8       0       0       0       0       0       0
   680 ;;Total ram usage:        8 bytes
   681 ;; Hardware stack levels used: 1
   682 ;; Hardware stack levels required when called: 7
   683 ;; This function calls:
   684 ;;		_vfpfcnvrt
   685 ;; This function is called by:
   686 ;;		_sprintf
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text2
   691   001104                     __ptext2:
   692                           	callstack 0
   693   001104                     _vfprintf:
   694                           	callstack 22
   695   001104                     
   696                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   697   001104  C057  F05B         	movff	vfprintf@fmt,vfprintf@cfmt
   698   001108  C058  F05C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   699                           
   700                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   701   00110C  EF96  F008         	goto	l1487
   702   001110                     l1485:
   703                           
   704                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   705   001110  C055  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   706   001114  C056  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   707   001118  0E5B               	movlw	low vfprintf@cfmt
   708   00111A  6E45               	movwf	vfpfcnvrt@fmt^0,c
   709   00111C  0E00               	movlw	high vfprintf@cfmt
   710   00111E  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
   711   001120  C059  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   712   001124  C05A  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   713   001128  ECCB  F005         	call	_vfpfcnvrt	;wreg free
   714   00112C                     l1487:
   715                           
   716                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   717   00112C  C05B  FFF6         	movff	vfprintf@cfmt,tblptrl
   718   001130  C05C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   719   001134                     	if	0	;tblptru may be non-zero
   720   001134                     	endif
   721   001134                     	if	0	;tblptru may be non-zero
   722   001134                     	endif
   723   001134  0008               	tblrd		*
   724   001136  50F5               	movf	tablat,w,c
   725   001138  0900               	iorlw	0
   726   00113A  A4D8               	btfss	status,2,c
   727   00113C  EFA2  F008         	goto	u841
   728   001140  EFA4  F008         	goto	u840
   729   001144                     u841:
   730   001144  EF88  F008         	goto	l1485
   731   001148                     u840:
   732   001148                     
   733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   734   001148  0E00               	movlw	0
   735   00114A  6E56               	movwf	(?_vfprintf+1)^0,c
   736   00114C  0E00               	movlw	0
   737   00114E  6E55               	movwf	?_vfprintf^0,c
   738   001150  0012               	return		;funcret
   739   001152                     __end_of_vfprintf:
   740                           	callstack 0
   741                           
   742 ;; *************** function _vfpfcnvrt *****************
   743 ;; Defined at:
   744 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   747 ;;		 -> sprintf@f(11), 
   748 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   749 ;;		 -> vfprintf@cfmt(2), 
   750 ;;  ap              2   70[COMRAM] PTR PTR void 
   751 ;;		 -> sprintf@ap(2), 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  convarg         8   74[COMRAM] struct .
   754 ;;  cp              2   82[COMRAM] PTR unsigned char 
   755 ;;		 -> STR_5(7), 
   756 ;;  i               2    0        int 
   757 ;;  done            2    0        int 
   758 ;;  c               1    0        unsigned char 
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   768 ;;      Params:         6       0       0       0       0       0       0
   769 ;;      Locals:        10       0       0       0       0       0       0
   770 ;;      Temps:          2       0       0       0       0       0       0
   771 ;;      Totals:        18       0       0       0       0       0       0
   772 ;;Total ram usage:       18 bytes
   773 ;; Hardware stack levels used: 1
   774 ;; Hardware stack levels required when called: 6
   775 ;; This function calls:
   776 ;;		_dtoa
   777 ;;		_fputc
   778 ;; This function is called by:
   779 ;;		_vfprintf
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text3
   784   000B96                     __ptext3:
   785                           	callstack 0
   786   000B96                     _vfpfcnvrt:
   787                           	callstack 22
   788   000B96                     
   789                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   790   000B96  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   791   000B9A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   792   000B9E  CFDE FFF6          	movff	postinc2,tblptrl
   793   000BA2  CFDD FFF7          	movff	postdec2,tblptrh
   794   000BA6                     	if	0	;tblptru may be non-zero
   795   000BA6                     	endif
   796   000BA6                     	if	0	;tblptru may be non-zero
   797   000BA6                     	endif
   798   000BA6  0008               	tblrd		*
   799   000BA8  50F5               	movf	tablat,w,c
   800   000BAA  0A25               	xorlw	37
   801   000BAC  A4D8               	btfss	status,2,c
   802   000BAE  EFDB  F005         	goto	u801
   803   000BB2  EFDD  F005         	goto	u800
   804   000BB6                     u801:
   805   000BB6  EF5C  F006         	goto	l1469
   806   000BBA                     u800:
   807   000BBA                     
   808                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   809   000BBA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   810   000BBE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   811   000BC2  2ADE               	incf	postinc2,f,c
   812   000BC4  0E00               	movlw	0
   813   000BC6  22DD               	addwfc	postdec2,f,c
   814   000BC8                     
   815                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   816   000BC8  0E00               	movlw	0
   817   000BCA  6E71               	movwf	(_width+1)^0,c
   818   000BCC  0E00               	movlw	0
   819   000BCE  6E70               	movwf	_width^0,c
   820   000BD0  C070  F078         	movff	_width,_flags
   821   000BD4                     
   822                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   823   000BD4  6872               	setf	_prec^0,c
   824   000BD6  6873               	setf	(_prec+1)^0,c
   825   000BD8                     
   826                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
   827   000BD8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   828   000BDC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   829   000BE0  CFDE F053          	movff	postinc2,vfpfcnvrt@cp
   830   000BE4  CFDD F054          	movff	postdec2,vfpfcnvrt@cp+1
   831   000BE8                     
   832                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
   833   000BE8  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   834   000BEC  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   835   000BF0                     	if	0	;tblptru may be non-zero
   836   000BF0                     	endif
   837   000BF0                     	if	0	;tblptru may be non-zero
   838   000BF0                     	endif
   839   000BF0  0008               	tblrd		*
   840   000BF2  50F5               	movf	tablat,w,c
   841   000BF4  0A64               	xorlw	100
   842   000BF6  B4D8               	btfsc	status,2,c
   843   000BF8  EF00  F006         	goto	u811
   844   000BFC  EF02  F006         	goto	u810
   845   000C00                     u811:
   846   000C00  EF10  F006         	goto	l1459
   847   000C04                     u810:
   848   000C04  C053  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   849   000C08  C054  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   850   000C0C                     	if	0	;tblptru may be non-zero
   851   000C0C                     	endif
   852   000C0C                     	if	0	;tblptru may be non-zero
   853   000C0C                     	endif
   854   000C0C  0008               	tblrd		*
   855   000C0E  50F5               	movf	tablat,w,c
   856   000C10  0A69               	xorlw	105
   857   000C12  A4D8               	btfss	status,2,c
   858   000C14  EF0E  F006         	goto	u821
   859   000C18  EF10  F006         	goto	u820
   860   000C1C                     u821:
   861   000C1C  EF53  F006         	goto	l1465
   862   000C20                     u820:
   863   000C20                     l1459:
   864                           
   865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
   866   000C20  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   867   000C24  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   868   000C28  CFDF F049          	movff	indf2,??_vfpfcnvrt
   869   000C2C  0E02               	movlw	2
   870   000C2E  26DE               	addwf	postinc2,f,c
   871   000C30  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
   872   000C34  0E00               	movlw	0
   873   000C36  22DD               	addwfc	postdec2,f,c
   874   000C38  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
   875   000C3C  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   876   000C40  CFDE F04B          	movff	postinc2,vfpfcnvrt@convarg
   877   000C44  CFDD F04C          	movff	postdec2,vfpfcnvrt@convarg+1
   878   000C48  0E00               	movlw	0
   879   000C4A  BE4C               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
   880   000C4C  0EFF               	movlw	-1
   881   000C4E  6E4D               	movwf	(vfpfcnvrt@convarg+2)^0,c
   882   000C50  6E4E               	movwf	(vfpfcnvrt@convarg+3)^0,c
   883   000C52  6E4F               	movwf	(vfpfcnvrt@convarg+4)^0,c
   884   000C54  6E50               	movwf	(vfpfcnvrt@convarg+5)^0,c
   885   000C56  6E51               	movwf	(vfpfcnvrt@convarg+6)^0,c
   886   000C58  6E52               	movwf	(vfpfcnvrt@convarg+7)^0,c
   887                           
   888                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
   889   000C5A  0E01               	movlw	1
   890   000C5C  2453               	addwf	vfpfcnvrt@cp^0,w,c
   891   000C5E  6E49               	movwf	??_vfpfcnvrt^0,c
   892   000C60  0E00               	movlw	0
   893   000C62  2054               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
   894   000C64  6E4A               	movwf	(??_vfpfcnvrt+1)^0,c
   895   000C66  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   896   000C6A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   897   000C6E  C049  FFDE         	movff	??_vfpfcnvrt,postinc2
   898   000C72  C04A  FFDD         	movff	??_vfpfcnvrt+1,postdec2
   899   000C76                     
   900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
   901   000C76  C043  F020         	movff	vfpfcnvrt@fp,dtoa@fp
   902   000C7A  C044  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   903   000C7E  C04B  F022         	movff	vfpfcnvrt@convarg,dtoa@d
   904   000C82  C04C  F023         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
   905   000C86  C04D  F024         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
   906   000C8A  C04E  F025         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
   907   000C8E  C04F  F026         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
   908   000C92  C050  F027         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
   909   000C96  C051  F028         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
   910   000C9A  C052  F029         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
   911   000C9E  EC17  F003         	call	_dtoa	;wreg free
   912   000CA2  EF70  F006         	goto	l839
   913   000CA6                     l1465:
   914                           
   915                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
   916   000CA6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   917   000CAA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   918   000CAE  2ADE               	incf	postinc2,f,c
   919   000CB0  0E00               	movlw	0
   920   000CB2  22DD               	addwfc	postdec2,f,c
   921   000CB4  EF70  F006         	goto	l839
   922   000CB8                     l1469:
   923                           
   924                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
   925   000CB8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   926   000CBC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   927   000CC0  CFDE FFF6          	movff	postinc2,tblptrl
   928   000CC4  CFDD FFF7          	movff	postdec2,tblptrh
   929   000CC8                     	if	0	;tblptru may be non-zero
   930   000CC8                     	endif
   931   000CC8                     	if	0	;tblptru may be non-zero
   932   000CC8                     	endif
   933   000CC8  0008               	tblrd		*
   934   000CCA  50F5               	movf	tablat,w,c
   935   000CCC  6E05               	movwf	fputc@c^0,c
   936   000CCE  6A06               	clrf	(fputc@c+1)^0,c
   937   000CD0  C043  F007         	movff	vfpfcnvrt@fp,fputc@fp
   938   000CD4  C044  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   939   000CD8  ECE3  F006         	call	_fputc	;wreg free
   940   000CDC  EF53  F006         	goto	l1465
   941   000CE0                     l839:
   942   000CE0  0012               	return		;funcret
   943   000CE2                     __end_of_vfpfcnvrt:
   944                           	callstack 0
   945                           
   946 ;; *************** function _dtoa *****************
   947 ;; Defined at:
   948 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
   951 ;;		 -> sprintf@f(11), 
   952 ;;  d               8   33[COMRAM] long long 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  n               8   55[COMRAM] long long 
   955 ;;  i               2   63[COMRAM] int 
   956 ;;  w               2   53[COMRAM] int 
   957 ;;  p               2   51[COMRAM] int 
   958 ;;  s               1   65[COMRAM] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   968 ;;      Params:        10       0       0       0       0       0       0
   969 ;;      Locals:        17       0       0       0       0       0       0
   970 ;;      Temps:          8       0       0       0       0       0       0
   971 ;;      Totals:        35       0       0       0       0       0       0
   972 ;;Total ram usage:       35 bytes
   973 ;; Hardware stack levels used: 1
   974 ;; Hardware stack levels required when called: 5
   975 ;; This function calls:
   976 ;;		___aodiv
   977 ;;		___aomod
   978 ;;		_abs
   979 ;;		_pad
   980 ;; This function is called by:
   981 ;;		_vfpfcnvrt
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text4
   986   00062E                     __ptext4:
   987                           	callstack 0
   988   00062E                     _dtoa:
   989                           	callstack 22
   990   00062E                     
   991                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
   992   00062E  C022  F038         	movff	dtoa@d,dtoa@n
   993   000632  C023  F039         	movff	dtoa@d+1,dtoa@n+1
   994   000636  C024  F03A         	movff	dtoa@d+2,dtoa@n+2
   995   00063A  C025  F03B         	movff	dtoa@d+3,dtoa@n+3
   996   00063E  C026  F03C         	movff	dtoa@d+4,dtoa@n+4
   997   000642  C027  F03D         	movff	dtoa@d+5,dtoa@n+5
   998   000646  C028  F03E         	movff	dtoa@d+6,dtoa@n+6
   999   00064A  C029  F03F         	movff	dtoa@d+7,dtoa@n+7
  1000   00064E                     
  1001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1002   00064E  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1003   000650  EF2C  F003         	goto	u701
  1004   000654  EF2F  F003         	goto	u700
  1005   000658                     u701:
  1006   000658  0E01               	movlw	1
  1007   00065A  EF30  F003         	goto	u710
  1008   00065E                     u700:
  1009   00065E  0E00               	movlw	0
  1010   000660                     u710:
  1011   000660  6E42               	movwf	dtoa@s^0,c
  1012   000662                     
  1013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1014   000662  5042               	movf	dtoa@s^0,w,c
  1015   000664  B4D8               	btfsc	status,2,c
  1016   000666  EF37  F003         	goto	u721
  1017   00066A  EF39  F003         	goto	u720
  1018   00066E                     u721:
  1019   00066E  EF49  F003         	goto	l1381
  1020   000672                     u720:
  1021   000672                     
  1022                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1023   000672  1E3F               	comf	(dtoa@n+7)^0,f,c
  1024   000674  1E3E               	comf	(dtoa@n+6)^0,f,c
  1025   000676  1E3D               	comf	(dtoa@n+5)^0,f,c
  1026   000678  1E3C               	comf	(dtoa@n+4)^0,f,c
  1027   00067A  1E3B               	comf	(dtoa@n+3)^0,f,c
  1028   00067C  1E3A               	comf	(dtoa@n+2)^0,f,c
  1029   00067E  1E39               	comf	(dtoa@n+1)^0,f,c
  1030   000680  6C38               	negf	dtoa@n^0,c
  1031   000682  0E00               	movlw	0
  1032   000684  2239               	addwfc	(dtoa@n+1)^0,f,c
  1033   000686  223A               	addwfc	(dtoa@n+2)^0,f,c
  1034   000688  223B               	addwfc	(dtoa@n+3)^0,f,c
  1035   00068A  223C               	addwfc	(dtoa@n+4)^0,f,c
  1036   00068C  223D               	addwfc	(dtoa@n+5)^0,f,c
  1037   00068E  223E               	addwfc	(dtoa@n+6)^0,f,c
  1038   000690  223F               	addwfc	(dtoa@n+7)^0,f,c
  1039   000692                     l1381:
  1040                           
  1041                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1042   000692  BE73               	btfsc	(_prec+1)^0,7,c
  1043   000694  EF56  F003         	goto	u730
  1044   000698  5073               	movf	(_prec+1)^0,w,c
  1045   00069A  E106               	bnz	u731
  1046   00069C  0472               	decf	_prec^0,w,c
  1047   00069E  B0D8               	btfsc	status,0,c
  1048   0006A0  EF54  F003         	goto	u731
  1049   0006A4  EF56  F003         	goto	u730
  1050   0006A8                     u731:
  1051   0006A8  EF5C  F003         	goto	l818
  1052   0006AC                     u730:
  1053   0006AC  0E00               	movlw	0
  1054   0006AE  6E35               	movwf	(dtoa@p+1)^0,c
  1055   0006B0  0E01               	movlw	1
  1056   0006B2  6E34               	movwf	dtoa@p^0,c
  1057   0006B4  EF60  F003         	goto	l820
  1058   0006B8                     l818:
  1059   0006B8  C072  F034         	movff	_prec,dtoa@p
  1060   0006BC  C073  F035         	movff	_prec+1,dtoa@p+1
  1061   0006C0                     l820:
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1064   0006C0  C070  F036         	movff	_width,dtoa@w
  1065   0006C4  C071  F037         	movff	_width+1,dtoa@w+1
  1066   0006C8                     
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1068   0006C8  5042               	movf	dtoa@s^0,w,c
  1069   0006CA  B4D8               	btfsc	status,2,c
  1070   0006CC  EF6A  F003         	goto	u741
  1071   0006D0  EF6C  F003         	goto	u740
  1072   0006D4                     u741:
  1073   0006D4  EF83  F003         	goto	l821
  1074   0006D8                     u740:
  1075   0006D8                     
  1076                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1077   0006D8  0636               	decf	dtoa@w^0,f,c
  1078   0006DA  A0D8               	btfss	status,0,c
  1079   0006DC  0637               	decf	(dtoa@w+1)^0,f,c
  1080   0006DE                     
  1081                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1082   0006DE  5042               	movf	dtoa@s^0,w,c
  1083   0006E0  A4D8               	btfss	status,2,c
  1084   0006E2  EF75  F003         	goto	u751
  1085   0006E6  EF77  F003         	goto	u750
  1086   0006EA                     u751:
  1087   0006EA  EF7D  F003         	goto	l1393
  1088   0006EE                     u750:
  1089   0006EE  0E00               	movlw	0
  1090   0006F0  6E33               	movwf	(_dtoa$964+1)^0,c
  1091   0006F2  0E2B               	movlw	43
  1092   0006F4  6E32               	movwf	_dtoa$964^0,c
  1093   0006F6  EF81  F003         	goto	l1395
  1094   0006FA                     l1393:
  1095   0006FA  0E00               	movlw	0
  1096   0006FC  6E33               	movwf	(_dtoa$964+1)^0,c
  1097   0006FE  0E2D               	movlw	45
  1098   000700  6E32               	movwf	_dtoa$964^0,c
  1099   000702                     l1395:
  1100   000702  C032  F042         	movff	_dtoa$964,dtoa@s
  1101   000706                     l821:
  1102                           
  1103                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1104   000706  0E00               	movlw	0
  1105   000708  6E41               	movwf	(dtoa@i+1)^0,c
  1106   00070A  0E1F               	movlw	31
  1107   00070C  6E40               	movwf	dtoa@i^0,c
  1108   00070E                     
  1109                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1110   00070E  0E00               	movlw	0
  1111   000710  0100               	movlb	0	; () banked
  1112   000712  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1113                           
  1114                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1115   000714  EF08  F004         	goto	l1409
  1116   000718                     l1399:
  1117                           
  1118                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1119   000718  0640               	decf	dtoa@i^0,f,c
  1120   00071A  A0D8               	btfss	status,0,c
  1121   00071C  0641               	decf	(dtoa@i+1)^0,f,c
  1122   00071E                     
  1123                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1124   00071E  0E80               	movlw	low _dbuf
  1125   000720  2440               	addwf	dtoa@i^0,w,c
  1126   000722  6ED9               	movwf	fsr2l,c
  1127   000724  0E00               	movlw	high _dbuf
  1128   000726  2041               	addwfc	(dtoa@i+1)^0,w,c
  1129   000728  6EDA               	movwf	fsr2h,c
  1130   00072A  C038  F005         	movff	dtoa@n,___aomod@dividend
  1131   00072E  C039  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1132   000732  C03A  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1133   000736  C03B  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1134   00073A  C03C  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1135   00073E  C03D  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1136   000742  C03E  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1137   000746  C03F  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1138   00074A  0E0A               	movlw	10
  1139   00074C  6E0D               	movwf	___aomod@divisor^0,c
  1140   00074E  0E00               	movlw	0
  1141   000750  6E0E               	movwf	(___aomod@divisor+1)^0,c
  1142   000752  0E00               	movlw	0
  1143   000754  6E0F               	movwf	(___aomod@divisor+2)^0,c
  1144   000756  0E00               	movlw	0
  1145   000758  6E10               	movwf	(___aomod@divisor+3)^0,c
  1146   00075A  0E00               	movlw	0
  1147   00075C  6E11               	movwf	(___aomod@divisor+4)^0,c
  1148   00075E  0E00               	movlw	0
  1149   000760  6E12               	movwf	(___aomod@divisor+5)^0,c
  1150   000762  0E00               	movlw	0
  1151   000764  6E13               	movwf	(___aomod@divisor+6)^0,c
  1152   000766  0E00               	movlw	0
  1153   000768  6E14               	movwf	(___aomod@divisor+7)^0,c
  1154   00076A  EC19  F005         	call	___aomod	;wreg free
  1155   00076E  C005  F02A         	movff	?___aomod,??_dtoa
  1156   000772  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1157   000776  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1158   00077A  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1159   00077E  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1160   000782  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1161   000786  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1162   00078A  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1163   00078E  C02A  F017         	movff	??_dtoa,abs@a
  1164   000792  C02B  F018         	movff	??_dtoa+1,abs@a+1
  1165   000796  ECCB  F008         	call	_abs	;wreg free
  1166   00079A  5017               	movf	?_abs^0,w,c
  1167   00079C  0F30               	addlw	48
  1168   00079E  6EDF               	movwf	indf2,c
  1169   0007A0                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1171   0007A0  0634               	decf	dtoa@p^0,f,c
  1172   0007A2  A0D8               	btfss	status,0,c
  1173   0007A4  0635               	decf	(dtoa@p+1)^0,f,c
  1174   0007A6                     
  1175                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1176   0007A6  0636               	decf	dtoa@w^0,f,c
  1177   0007A8  A0D8               	btfss	status,0,c
  1178   0007AA  0637               	decf	(dtoa@w+1)^0,f,c
  1179   0007AC                     
  1180                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1181   0007AC  C038  F005         	movff	dtoa@n,___aodiv@dividend
  1182   0007B0  C039  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1183   0007B4  C03A  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1184   0007B8  C03B  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1185   0007BC  C03C  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1186   0007C0  C03D  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1187   0007C4  C03E  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1188   0007C8  C03F  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1189   0007CC  0E0A               	movlw	10
  1190   0007CE  6E0D               	movwf	___aodiv@divisor^0,c
  1191   0007D0  0E00               	movlw	0
  1192   0007D2  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  1193   0007D4  0E00               	movlw	0
  1194   0007D6  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  1195   0007D8  0E00               	movlw	0
  1196   0007DA  6E10               	movwf	(___aodiv@divisor+3)^0,c
  1197   0007DC  0E00               	movlw	0
  1198   0007DE  6E11               	movwf	(___aodiv@divisor+4)^0,c
  1199   0007E0  0E00               	movlw	0
  1200   0007E2  6E12               	movwf	(___aodiv@divisor+5)^0,c
  1201   0007E4  0E00               	movlw	0
  1202   0007E6  6E13               	movwf	(___aodiv@divisor+6)^0,c
  1203   0007E8  0E00               	movlw	0
  1204   0007EA  6E14               	movwf	(___aodiv@divisor+7)^0,c
  1205   0007EC  EC55  F004         	call	___aodiv	;wreg free
  1206   0007F0  C005  F038         	movff	?___aodiv,dtoa@n
  1207   0007F4  C006  F039         	movff	?___aodiv+1,dtoa@n+1
  1208   0007F8  C007  F03A         	movff	?___aodiv+2,dtoa@n+2
  1209   0007FC  C008  F03B         	movff	?___aodiv+3,dtoa@n+3
  1210   000800  C009  F03C         	movff	?___aodiv+4,dtoa@n+4
  1211   000804  C00A  F03D         	movff	?___aodiv+5,dtoa@n+5
  1212   000808  C00B  F03E         	movff	?___aodiv+6,dtoa@n+6
  1213   00080C  C00C  F03F         	movff	?___aodiv+7,dtoa@n+7
  1214   000810                     l1409:
  1215                           
  1216                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1217   000810  BE41               	btfsc	(dtoa@i+1)^0,7,c
  1218   000812  EF13  F004         	goto	u761
  1219   000816  5041               	movf	(dtoa@i+1)^0,w,c
  1220   000818  E108               	bnz	u760
  1221   00081A  0440               	decf	dtoa@i^0,w,c
  1222   00081C  A0D8               	btfss	status,0,c
  1223   00081E  EF13  F004         	goto	u761
  1224   000822  EF15  F004         	goto	u760
  1225   000826                     u761:
  1226   000826  EF31  F004         	goto	l1415
  1227   00082A                     u760:
  1228   00082A  5038               	movf	dtoa@n^0,w,c
  1229   00082C  1039               	iorwf	(dtoa@n+1)^0,w,c
  1230   00082E  103A               	iorwf	(dtoa@n+2)^0,w,c
  1231   000830  103B               	iorwf	(dtoa@n+3)^0,w,c
  1232   000832  103C               	iorwf	(dtoa@n+4)^0,w,c
  1233   000834  103D               	iorwf	(dtoa@n+5)^0,w,c
  1234   000836  103E               	iorwf	(dtoa@n+6)^0,w,c
  1235   000838  103F               	iorwf	(dtoa@n+7)^0,w,c
  1236   00083A  A4D8               	btfss	status,2,c
  1237   00083C  EF22  F004         	goto	u771
  1238   000840  EF24  F004         	goto	u770
  1239   000844                     u771:
  1240   000844  EF8C  F003         	goto	l1399
  1241   000848                     u770:
  1242   000848  BE35               	btfsc	(dtoa@p+1)^0,7,c
  1243   00084A  EF31  F004         	goto	u780
  1244   00084E  5035               	movf	(dtoa@p+1)^0,w,c
  1245   000850  E106               	bnz	u781
  1246   000852  0434               	decf	dtoa@p^0,w,c
  1247   000854  B0D8               	btfsc	status,0,c
  1248   000856  EF2F  F004         	goto	u781
  1249   00085A  EF31  F004         	goto	u780
  1250   00085E                     u781:
  1251   00085E  EF8C  F003         	goto	l1399
  1252   000862                     u780:
  1253   000862                     l1415:
  1254                           
  1255                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1256   000862  5042               	movf	dtoa@s^0,w,c
  1257   000864  B4D8               	btfsc	status,2,c
  1258   000866  EF37  F004         	goto	u791
  1259   00086A  EF39  F004         	goto	u790
  1260   00086E                     u791:
  1261   00086E  EF44  F004         	goto	l1421
  1262   000872                     u790:
  1263   000872                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1265   000872  0640               	decf	dtoa@i^0,f,c
  1266   000874  A0D8               	btfss	status,0,c
  1267   000876  0641               	decf	(dtoa@i+1)^0,f,c
  1268   000878                     
  1269                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1270   000878  0E80               	movlw	low _dbuf
  1271   00087A  2440               	addwf	dtoa@i^0,w,c
  1272   00087C  6ED9               	movwf	fsr2l,c
  1273   00087E  0E00               	movlw	high _dbuf
  1274   000880  2041               	addwfc	(dtoa@i+1)^0,w,c
  1275   000882  6EDA               	movwf	fsr2h,c
  1276   000884  C042  FFDF         	movff	dtoa@s,indf2
  1277   000888                     l1421:
  1278                           
  1279                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1280   000888  C020  F015         	movff	dtoa@fp,pad@fp
  1281   00088C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1282   000890  0E80               	movlw	low _dbuf
  1283   000892  2440               	addwf	dtoa@i^0,w,c
  1284   000894  6E17               	movwf	pad@buf^0,c
  1285   000896  0E00               	movlw	high _dbuf
  1286   000898  2041               	addwfc	(dtoa@i+1)^0,w,c
  1287   00089A  6E18               	movwf	(pad@buf+1)^0,c
  1288   00089C  C036  F019         	movff	dtoa@w,pad@p
  1289   0008A0  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1290   0008A4  ECE7  F007         	call	_pad	;wreg free
  1291   0008A8  0012               	return		;funcret
  1292   0008AA                     __end_of_dtoa:
  1293                           	callstack 0
  1294                           
  1295 ;; *************** function _pad *****************
  1296 ;; Defined at:
  1297 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1300 ;;		 -> sprintf@f(11), 
  1301 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1302 ;;		 -> dbuf(32), 
  1303 ;;  p               2   24[COMRAM] int 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  w               2   29[COMRAM] int 
  1306 ;;  i               2   27[COMRAM] int 
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1316 ;;      Params:         6       0       0       0       0       0       0
  1317 ;;      Locals:         4       0       0       0       0       0       0
  1318 ;;      Temps:          1       0       0       0       0       0       0
  1319 ;;      Totals:        11       0       0       0       0       0       0
  1320 ;;Total ram usage:       11 bytes
  1321 ;; Hardware stack levels used: 1
  1322 ;; Hardware stack levels required when called: 4
  1323 ;; This function calls:
  1324 ;;		_fputc
  1325 ;;		_fputs
  1326 ;; This function is called by:
  1327 ;;		_dtoa
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text5
  1332   000FCE                     __ptext5:
  1333                           	callstack 0
  1334   000FCE                     _pad:
  1335                           	callstack 22
  1336   000FCE                     
  1337                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 145:     w = (p < 0) ? 0 : p;
  1338   000FCE  BE1A               	btfsc	(pad@p+1)^0,7,c
  1339   000FD0  EFEC  F007         	goto	u661
  1340   000FD4  EFEE  F007         	goto	u660
  1341   000FD8                     u661:
  1342   000FD8  EFF4  F007         	goto	l1347
  1343   000FDC                     u660:
  1344   000FDC  C019  F01E         	movff	pad@p,pad@w
  1345   000FE0  C01A  F01F         	movff	pad@p+1,pad@w+1
  1346   000FE4  EFF8  F007         	goto	l809
  1347   000FE8                     l1347:
  1348   000FE8  0E00               	movlw	0
  1349   000FEA  6E1F               	movwf	(pad@w+1)^0,c
  1350   000FEC  0E00               	movlw	0
  1351   000FEE  6E1E               	movwf	pad@w^0,c
  1352   000FF0                     l809:
  1353                           
  1354                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1355   000FF0  0E00               	movlw	0
  1356   000FF2  6E1D               	movwf	(pad@i+1)^0,c
  1357   000FF4  0E00               	movlw	0
  1358   000FF6  6E1C               	movwf	pad@i^0,c
  1359                           
  1360                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1361   000FF8  EF0A  F008         	goto	l1353
  1362   000FFC                     l1349:
  1363                           
  1364                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1365   000FFC  0E00               	movlw	0
  1366   000FFE  6E06               	movwf	(fputc@c+1)^0,c
  1367   001000  0E20               	movlw	32
  1368   001002  6E05               	movwf	fputc@c^0,c
  1369   001004  C015  F007         	movff	pad@fp,fputc@fp
  1370   001008  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1371   00100C  ECE3  F006         	call	_fputc	;wreg free
  1372   001010                     
  1373                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1374   001010  4A1C               	infsnz	pad@i^0,f,c
  1375   001012  2A1D               	incf	(pad@i+1)^0,f,c
  1376   001014                     l1353:
  1377                           
  1378                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1379   001014  501E               	movf	pad@w^0,w,c
  1380   001016  5C1C               	subwf	pad@i^0,w,c
  1381   001018  501D               	movf	(pad@i+1)^0,w,c
  1382   00101A  0A80               	xorlw	128
  1383   00101C  6E1B               	movwf	??_pad^0,c
  1384   00101E  501F               	movf	(pad@w+1)^0,w,c
  1385   001020  0A80               	xorlw	128
  1386   001022  581B               	subwfb	??_pad^0,w,c
  1387   001024  A0D8               	btfss	status,0,c
  1388   001026  EF17  F008         	goto	u671
  1389   00102A  EF19  F008         	goto	u670
  1390   00102E                     u671:
  1391   00102E  EFFE  F007         	goto	l1349
  1392   001032                     u670:
  1393   001032                     
  1394                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1395   001032  C017  F00E         	movff	pad@buf,fputs@s
  1396   001036  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1397   00103A  C015  F010         	movff	pad@fp,fputs@fp
  1398   00103E  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1399   001042  ECA9  F008         	call	_fputs	;wreg free
  1400   001046  0012               	return		;funcret
  1401   001048                     __end_of_pad:
  1402                           	callstack 0
  1403                           
  1404 ;; *************** function _fputs *****************
  1405 ;; Defined at:
  1406 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1409 ;;		 -> dbuf(32), 
  1410 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1411 ;;		 -> sprintf@f(11), 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  i               2   18[COMRAM] int 
  1414 ;;  c               1   17[COMRAM] unsigned char 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  2   13[COMRAM] int 
  1417 ;; Registers used:
  1418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1424 ;;      Params:         4       0       0       0       0       0       0
  1425 ;;      Locals:         3       0       0       0       0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0
  1427 ;;      Totals:         7       0       0       0       0       0       0
  1428 ;;Total ram usage:        7 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 3
  1431 ;; This function calls:
  1432 ;;		_fputc
  1433 ;; This function is called by:
  1434 ;;		_pad
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text6
  1439   001152                     __ptext6:
  1440                           	callstack 0
  1441   001152                     _fputs:
  1442                           	callstack 22
  1443   001152  0E00               	movlw	0
  1444   001154  6E14               	movwf	(fputs@i+1)^0,c
  1445   001156  0E00               	movlw	0
  1446   001158  6E13               	movwf	fputs@i^0,c
  1447   00115A  EFBA  F008         	goto	l1261
  1448   00115E                     l1257:
  1449   00115E  C012  F005         	movff	fputs@c,fputc@c
  1450   001162  6A06               	clrf	(fputc@c+1)^0,c
  1451   001164  C010  F007         	movff	fputs@fp,fputc@fp
  1452   001168  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1453   00116C  ECE3  F006         	call	_fputc	;wreg free
  1454   001170  4A13               	infsnz	fputs@i^0,f,c
  1455   001172  2A14               	incf	(fputs@i+1)^0,f,c
  1456   001174                     l1261:
  1457   001174  5013               	movf	fputs@i^0,w,c
  1458   001176  240E               	addwf	fputs@s^0,w,c
  1459   001178  6ED9               	movwf	fsr2l,c
  1460   00117A  5014               	movf	(fputs@i+1)^0,w,c
  1461   00117C  200F               	addwfc	(fputs@s+1)^0,w,c
  1462   00117E  6EDA               	movwf	fsr2h,c
  1463   001180  50DF               	movf	indf2,w,c
  1464   001182  6E12               	movwf	fputs@c^0,c
  1465   001184  5012               	movf	fputs@c^0,w,c
  1466   001186  A4D8               	btfss	status,2,c
  1467   001188  EFC8  F008         	goto	u521
  1468   00118C  EFCA  F008         	goto	u520
  1469   001190                     u521:
  1470   001190  EFAF  F008         	goto	l1257
  1471   001194                     u520:
  1472   001194  0012               	return		;funcret
  1473   001196                     __end_of_fputs:
  1474                           	callstack 0
  1475                           
  1476 ;; *************** function _fputc *****************
  1477 ;; Defined at:
  1478 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  c               2    4[COMRAM] int 
  1481 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1482 ;;		 -> sprintf@f(11), 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  2    4[COMRAM] int 
  1487 ;; Registers used:
  1488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1494 ;;      Params:         4       0       0       0       0       0       0
  1495 ;;      Locals:         0       0       0       0       0       0       0
  1496 ;;      Temps:          5       0       0       0       0       0       0
  1497 ;;      Totals:         9       0       0       0       0       0       0
  1498 ;;Total ram usage:        9 bytes
  1499 ;; Hardware stack levels used: 1
  1500 ;; Hardware stack levels required when called: 2
  1501 ;; This function calls:
  1502 ;;		_putch
  1503 ;; This function is called by:
  1504 ;;		_pad
  1505 ;;		_vfpfcnvrt
  1506 ;;		_fputs
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text7
  1511   000DC6                     __ptext7:
  1512                           	callstack 0
  1513   000DC6                     _fputc:
  1514                           	callstack 25
  1515   000DC6  5007               	movf	fputc@fp^0,w,c
  1516   000DC8  1008               	iorwf	(fputc@fp+1)^0,w,c
  1517   000DCA  B4D8               	btfsc	status,2,c
  1518   000DCC  EFEA  F006         	goto	u481
  1519   000DD0  EFEC  F006         	goto	u480
  1520   000DD4                     u481:
  1521   000DD4  EFF5  F006         	goto	l1245
  1522   000DD8                     u480:
  1523   000DD8  5007               	movf	fputc@fp^0,w,c
  1524   000DDA  1008               	iorwf	(fputc@fp+1)^0,w,c
  1525   000DDC  A4D8               	btfss	status,2,c
  1526   000DDE  EFF3  F006         	goto	u491
  1527   000DE2  EFF5  F006         	goto	u490
  1528   000DE6                     u491:
  1529   000DE6  EFFA  F006         	goto	l1247
  1530   000DEA                     u490:
  1531   000DEA                     l1245:
  1532   000DEA  5005               	movf	fputc@c^0,w,c
  1533   000DEC  EC33  F009         	call	_putch
  1534   000DF0  EF47  F007         	goto	l864
  1535   000DF4                     l1247:
  1536   000DF4  EE20 F009          	lfsr	2,9
  1537   000DF8  5007               	movf	fputc@fp^0,w,c
  1538   000DFA  26D9               	addwf	fsr2l,f,c
  1539   000DFC  5008               	movf	(fputc@fp+1)^0,w,c
  1540   000DFE  22DA               	addwfc	fsr2h,f,c
  1541   000E00  50DE               	movf	postinc2,w,c
  1542   000E02  10DE               	iorwf	postinc2,w,c
  1543   000E04  B4D8               	btfsc	status,2,c
  1544   000E06  EF07  F007         	goto	u501
  1545   000E0A  EF09  F007         	goto	u500
  1546   000E0E                     u501:
  1547   000E0E  EF24  F007         	goto	l1251
  1548   000E12                     u500:
  1549   000E12  EE20 F009          	lfsr	2,9
  1550   000E16  5007               	movf	fputc@fp^0,w,c
  1551   000E18  26D9               	addwf	fsr2l,f,c
  1552   000E1A  5008               	movf	(fputc@fp+1)^0,w,c
  1553   000E1C  22DA               	addwfc	fsr2h,f,c
  1554   000E1E  EE10 F003          	lfsr	1,3
  1555   000E22  5007               	movf	fputc@fp^0,w,c
  1556   000E24  26E1               	addwf	fsr1l,f,c
  1557   000E26  5008               	movf	(fputc@fp+1)^0,w,c
  1558   000E28  22E2               	addwfc	fsr1h,f,c
  1559   000E2A  50DE               	movf	postinc2,w,c
  1560   000E2C  5CE6               	subwf	postinc1,w,c
  1561   000E2E  50E6               	movf	postinc1,w,c
  1562   000E30  0A80               	xorlw	128
  1563   000E32  6E0D               	movwf	(??_fputc+4)^0,c
  1564   000E34  50DE               	movf	postinc2,w,c
  1565   000E36  0A80               	xorlw	128
  1566   000E38  580D               	subwfb	(??_fputc+4)^0,w,c
  1567   000E3A  B0D8               	btfsc	status,0,c
  1568   000E3C  EF22  F007         	goto	u511
  1569   000E40  EF24  F007         	goto	u510
  1570   000E44                     u511:
  1571   000E44  EF47  F007         	goto	l864
  1572   000E48                     u510:
  1573   000E48                     l1251:
  1574   000E48  EE20 F003          	lfsr	2,3
  1575   000E4C  5007               	movf	fputc@fp^0,w,c
  1576   000E4E  26D9               	addwf	fsr2l,f,c
  1577   000E50  5008               	movf	(fputc@fp+1)^0,w,c
  1578   000E52  22DA               	addwfc	fsr2h,f,c
  1579   000E54  CFDE F009          	movff	postinc2,??_fputc
  1580   000E58  CFDD F00A          	movff	postdec2,??_fputc+1
  1581   000E5C  C007  FFD9         	movff	fputc@fp,fsr2l
  1582   000E60  C008  FFDA         	movff	fputc@fp+1,fsr2h
  1583   000E64  CFDE F00B          	movff	postinc2,??_fputc+2
  1584   000E68  CFDD F00C          	movff	postdec2,??_fputc+3
  1585   000E6C  5009               	movf	??_fputc^0,w,c
  1586   000E6E  240B               	addwf	(??_fputc+2)^0,w,c
  1587   000E70  6ED9               	movwf	fsr2l,c
  1588   000E72  500A               	movf	(??_fputc+1)^0,w,c
  1589   000E74  200C               	addwfc	(??_fputc+3)^0,w,c
  1590   000E76  6EDA               	movwf	fsr2h,c
  1591   000E78  C005  FFDF         	movff	fputc@c,indf2
  1592   000E7C  EE20 F003          	lfsr	2,3
  1593   000E80  5007               	movf	fputc@fp^0,w,c
  1594   000E82  26D9               	addwf	fsr2l,f,c
  1595   000E84  5008               	movf	(fputc@fp+1)^0,w,c
  1596   000E86  22DA               	addwfc	fsr2h,f,c
  1597   000E88  2ADE               	incf	postinc2,f,c
  1598   000E8A  0E00               	movlw	0
  1599   000E8C  22DD               	addwfc	postdec2,f,c
  1600   000E8E                     l864:
  1601   000E8E  0012               	return		;funcret
  1602   000E90                     __end_of_fputc:
  1603                           	callstack 0
  1604                           
  1605 ;; *************** function _putch *****************
  1606 ;; Defined at:
  1607 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  c               1    wreg     unsigned char 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  c               1    0[COMRAM] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1621 ;;      Params:         0       0       0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0
  1624 ;;      Totals:         0       0       0       0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used: 1
  1627 ;; Hardware stack levels required when called: 1
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_fputc
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text8
  1636   001266                     __ptext8:
  1637                           	callstack 0
  1638   001266                     _putch:
  1639                           	callstack 25
  1640   001266  0012               	return		;funcret
  1641   001268                     __end_of_putch:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _abs *****************
  1645 ;; Defined at:
  1646 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  a               2   22[COMRAM] int 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2   22[COMRAM] int 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1660 ;;      Params:         2       0       0       0       0       0       0
  1661 ;;      Locals:         0       0       0       0       0       0       0
  1662 ;;      Temps:          2       0       0       0       0       0       0
  1663 ;;      Totals:         4       0       0       0       0       0       0
  1664 ;;Total ram usage:        4 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_dtoa
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text9
  1675   001196                     __ptext9:
  1676                           	callstack 0
  1677   001196                     _abs:
  1678                           	callstack 25
  1679   001196  BE18               	btfsc	(abs@a+1)^0,7,c
  1680   001198  EFD8  F008         	goto	u680
  1681   00119C  5018               	movf	(abs@a+1)^0,w,c
  1682   00119E  E106               	bnz	u681
  1683   0011A0  0417               	decf	abs@a^0,w,c
  1684   0011A2  B0D8               	btfsc	status,0,c
  1685   0011A4  EFD6  F008         	goto	u681
  1686   0011A8  EFD8  F008         	goto	u680
  1687   0011AC                     u681:
  1688   0011AC  EFE6  F008         	goto	l849
  1689   0011B0                     u680:
  1690   0011B0  C017  F019         	movff	abs@a,??_abs
  1691   0011B4  C018  F01A         	movff	abs@a+1,??_abs+1
  1692   0011B8  1E19               	comf	??_abs^0,f,c
  1693   0011BA  1E1A               	comf	(??_abs+1)^0,f,c
  1694   0011BC  4A19               	infsnz	??_abs^0,f,c
  1695   0011BE  2A1A               	incf	(??_abs+1)^0,f,c
  1696   0011C0  C019  F017         	movff	??_abs,?_abs
  1697   0011C4  C01A  F018         	movff	??_abs+1,?_abs+1
  1698   0011C8  EFEA  F008         	goto	l852
  1699   0011CC                     l849:
  1700   0011CC  C017  F017         	movff	abs@a,?_abs
  1701   0011D0  C018  F018         	movff	abs@a+1,?_abs+1
  1702   0011D4                     l852:
  1703   0011D4  0012               	return		;funcret
  1704   0011D6                     __end_of_abs:
  1705                           	callstack 0
  1706                           
  1707 ;; *************** function ___aomod *****************
  1708 ;; Defined at:
  1709 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  dividend        8    4[COMRAM] long long 
  1712 ;;  divisor         8   12[COMRAM] long long 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  sign            1   21[COMRAM] unsigned char 
  1715 ;;  counter         1   20[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  8    4[COMRAM] long long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:        16       0       0       0       0       0       0
  1726 ;;      Locals:         2       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:        18       0       0       0       0       0       0
  1729 ;;Total ram usage:       18 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_dtoa
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text10
  1740   000A32                     __ptext10:
  1741                           	callstack 0
  1742   000A32                     ___aomod:
  1743                           	callstack 25
  1744   000A32  0E00               	movlw	0
  1745   000A34  6E16               	movwf	___aomod@sign^0,c
  1746   000A36  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  1747   000A38  EF22  F005         	goto	u600
  1748   000A3C  EF20  F005         	goto	u601
  1749   000A40                     u601:
  1750   000A40  EF34  F005         	goto	l1315
  1751   000A44                     u600:
  1752   000A44  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  1753   000A46  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  1754   000A48  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  1755   000A4A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  1756   000A4C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  1757   000A4E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  1758   000A50  1E06               	comf	(___aomod@dividend+1)^0,f,c
  1759   000A52  6C05               	negf	___aomod@dividend^0,c
  1760   000A54  0E00               	movlw	0
  1761   000A56  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  1762   000A58  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  1763   000A5A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  1764   000A5C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  1765   000A5E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  1766   000A60  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  1767   000A62  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  1768   000A64  0E01               	movlw	1
  1769   000A66  6E16               	movwf	___aomod@sign^0,c
  1770   000A68                     l1315:
  1771   000A68  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  1772   000A6A  EF3B  F005         	goto	u610
  1773   000A6E  EF39  F005         	goto	u611
  1774   000A72                     u611:
  1775   000A72  EF4B  F005         	goto	l1319
  1776   000A76                     u610:
  1777   000A76  1E14               	comf	(___aomod@divisor+7)^0,f,c
  1778   000A78  1E13               	comf	(___aomod@divisor+6)^0,f,c
  1779   000A7A  1E12               	comf	(___aomod@divisor+5)^0,f,c
  1780   000A7C  1E11               	comf	(___aomod@divisor+4)^0,f,c
  1781   000A7E  1E10               	comf	(___aomod@divisor+3)^0,f,c
  1782   000A80  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  1783   000A82  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  1784   000A84  6C0D               	negf	___aomod@divisor^0,c
  1785   000A86  0E00               	movlw	0
  1786   000A88  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  1787   000A8A  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  1788   000A8C  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  1789   000A8E  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  1790   000A90  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  1791   000A92  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  1792   000A94  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  1793   000A96                     l1319:
  1794   000A96  500D               	movf	___aomod@divisor^0,w,c
  1795   000A98  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  1796   000A9A  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  1797   000A9C  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  1798   000A9E  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  1799   000AA0  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  1800   000AA2  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  1801   000AA4  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  1802   000AA6  B4D8               	btfsc	status,2,c
  1803   000AA8  EF58  F005         	goto	u621
  1804   000AAC  EF5A  F005         	goto	u620
  1805   000AB0                     u621:
  1806   000AB0  EFA2  F005         	goto	l1335
  1807   000AB4                     u620:
  1808   000AB4  0E01               	movlw	1
  1809   000AB6  6E15               	movwf	___aomod@counter^0,c
  1810   000AB8  EF68  F005         	goto	l1325
  1811   000ABC                     l1323:
  1812   000ABC  90D8               	bcf	status,0,c
  1813   000ABE  360D               	rlcf	___aomod@divisor^0,f,c
  1814   000AC0  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  1815   000AC2  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  1816   000AC4  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  1817   000AC6  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  1818   000AC8  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  1819   000ACA  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  1820   000ACC  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  1821   000ACE  2A15               	incf	___aomod@counter^0,f,c
  1822   000AD0                     l1325:
  1823   000AD0  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  1824   000AD2  EF6D  F005         	goto	u631
  1825   000AD6  EF6F  F005         	goto	u630
  1826   000ADA                     u631:
  1827   000ADA  EF5E  F005         	goto	l1323
  1828   000ADE                     u630:
  1829   000ADE                     l1327:
  1830   000ADE  500D               	movf	___aomod@divisor^0,w,c
  1831   000AE0  5C05               	subwf	___aomod@dividend^0,w,c
  1832   000AE2  500E               	movf	(___aomod@divisor+1)^0,w,c
  1833   000AE4  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  1834   000AE6  500F               	movf	(___aomod@divisor+2)^0,w,c
  1835   000AE8  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  1836   000AEA  5010               	movf	(___aomod@divisor+3)^0,w,c
  1837   000AEC  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  1838   000AEE  5011               	movf	(___aomod@divisor+4)^0,w,c
  1839   000AF0  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  1840   000AF2  5012               	movf	(___aomod@divisor+5)^0,w,c
  1841   000AF4  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  1842   000AF6  5013               	movf	(___aomod@divisor+6)^0,w,c
  1843   000AF8  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  1844   000AFA  5014               	movf	(___aomod@divisor+7)^0,w,c
  1845   000AFC  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  1846   000AFE  A0D8               	btfss	status,0,c
  1847   000B00  EF84  F005         	goto	u641
  1848   000B04  EF86  F005         	goto	u640
  1849   000B08                     u641:
  1850   000B08  EF96  F005         	goto	l1331
  1851   000B0C                     u640:
  1852   000B0C  500D               	movf	___aomod@divisor^0,w,c
  1853   000B0E  5E05               	subwf	___aomod@dividend^0,f,c
  1854   000B10  500E               	movf	(___aomod@divisor+1)^0,w,c
  1855   000B12  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  1856   000B14  500F               	movf	(___aomod@divisor+2)^0,w,c
  1857   000B16  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  1858   000B18  5010               	movf	(___aomod@divisor+3)^0,w,c
  1859   000B1A  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  1860   000B1C  5011               	movf	(___aomod@divisor+4)^0,w,c
  1861   000B1E  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  1862   000B20  5012               	movf	(___aomod@divisor+5)^0,w,c
  1863   000B22  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  1864   000B24  5013               	movf	(___aomod@divisor+6)^0,w,c
  1865   000B26  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  1866   000B28  5014               	movf	(___aomod@divisor+7)^0,w,c
  1867   000B2A  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  1868   000B2C                     l1331:
  1869   000B2C  90D8               	bcf	status,0,c
  1870   000B2E  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  1871   000B30  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  1872   000B32  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  1873   000B34  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  1874   000B36  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  1875   000B38  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  1876   000B3A  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  1877   000B3C  320D               	rrcf	___aomod@divisor^0,f,c
  1878   000B3E  2E15               	decfsz	___aomod@counter^0,f,c
  1879   000B40  EF6F  F005         	goto	l1327
  1880   000B44                     l1335:
  1881   000B44  5016               	movf	___aomod@sign^0,w,c
  1882   000B46  B4D8               	btfsc	status,2,c
  1883   000B48  EFA8  F005         	goto	u651
  1884   000B4C  EFAA  F005         	goto	u650
  1885   000B50                     u651:
  1886   000B50  EFBA  F005         	goto	l1339
  1887   000B54                     u650:
  1888   000B54  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  1889   000B56  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  1890   000B58  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  1891   000B5A  1E09               	comf	(___aomod@dividend+4)^0,f,c
  1892   000B5C  1E08               	comf	(___aomod@dividend+3)^0,f,c
  1893   000B5E  1E07               	comf	(___aomod@dividend+2)^0,f,c
  1894   000B60  1E06               	comf	(___aomod@dividend+1)^0,f,c
  1895   000B62  6C05               	negf	___aomod@dividend^0,c
  1896   000B64  0E00               	movlw	0
  1897   000B66  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  1898   000B68  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  1899   000B6A  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  1900   000B6C  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  1901   000B6E  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  1902   000B70  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  1903   000B72  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  1904   000B74                     l1339:
  1905   000B74  C005  F005         	movff	___aomod@dividend,?___aomod
  1906   000B78  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  1907   000B7C  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  1908   000B80  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  1909   000B84  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  1910   000B88  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  1911   000B8C  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  1912   000B90  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  1913   000B94  0012               	return		;funcret
  1914   000B96                     __end_of___aomod:
  1915                           	callstack 0
  1916                           
  1917 ;; *************** function ___aodiv *****************
  1918 ;; Defined at:
  1919 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  dividend        8    4[COMRAM] long long 
  1922 ;;  divisor         8   12[COMRAM] long long 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  quotient        8   22[COMRAM] long long 
  1925 ;;  sign            1   21[COMRAM] unsigned char 
  1926 ;;  counter         1   20[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  8    4[COMRAM] long long 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:        16       0       0       0       0       0       0
  1937 ;;      Locals:        10       0       0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0       0       0
  1939 ;;      Totals:        26       0       0       0       0       0       0
  1940 ;;Total ram usage:       26 bytes
  1941 ;; Hardware stack levels used: 1
  1942 ;; Hardware stack levels required when called: 1
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_dtoa
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text11
  1951   0008AA                     __ptext11:
  1952                           	callstack 0
  1953   0008AA                     ___aodiv:
  1954                           	callstack 25
  1955   0008AA  0E00               	movlw	0
  1956   0008AC  6E16               	movwf	___aodiv@sign^0,c
  1957   0008AE  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  1958   0008B0  EF5E  F004         	goto	u530
  1959   0008B4  EF5C  F004         	goto	u531
  1960   0008B8                     u531:
  1961   0008B8  EF70  F004         	goto	l1271
  1962   0008BC                     u530:
  1963   0008BC  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  1964   0008BE  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  1965   0008C0  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  1966   0008C2  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  1967   0008C4  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  1968   0008C6  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  1969   0008C8  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  1970   0008CA  6C0D               	negf	___aodiv@divisor^0,c
  1971   0008CC  0E00               	movlw	0
  1972   0008CE  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  1973   0008D0  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  1974   0008D2  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  1975   0008D4  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  1976   0008D6  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  1977   0008D8  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  1978   0008DA  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  1979   0008DC  0E01               	movlw	1
  1980   0008DE  6E16               	movwf	___aodiv@sign^0,c
  1981   0008E0                     l1271:
  1982   0008E0  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  1983   0008E2  EF77  F004         	goto	u540
  1984   0008E6  EF75  F004         	goto	u541
  1985   0008EA                     u541:
  1986   0008EA  EF89  F004         	goto	l1277
  1987   0008EE                     u540:
  1988   0008EE  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  1989   0008F0  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  1990   0008F2  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  1991   0008F4  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  1992   0008F6  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  1993   0008F8  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  1994   0008FA  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  1995   0008FC  6C05               	negf	___aodiv@dividend^0,c
  1996   0008FE  0E00               	movlw	0
  1997   000900  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  1998   000902  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  1999   000904  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  2000   000906  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  2001   000908  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  2002   00090A  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  2003   00090C  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  2004   00090E  0E01               	movlw	1
  2005   000910  1A16               	xorwf	___aodiv@sign^0,f,c
  2006   000912                     l1277:
  2007   000912  EE20  F017         	lfsr	2,___aodiv@quotient
  2008   000916  0E07               	movlw	7
  2009   000918                     u551:
  2010   000918  6ADE               	clrf	postinc2,c
  2011   00091A  06E8               	decf	wreg,f,c
  2012   00091C  E2FD               	bc	u551
  2013   00091E  500D               	movf	___aodiv@divisor^0,w,c
  2014   000920  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  2015   000922  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  2016   000924  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  2017   000926  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  2018   000928  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  2019   00092A  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  2020   00092C  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  2021   00092E  B4D8               	btfsc	status,2,c
  2022   000930  EF9C  F004         	goto	u561
  2023   000934  EF9E  F004         	goto	u560
  2024   000938                     u561:
  2025   000938  EFF0  F004         	goto	l1299
  2026   00093C                     u560:
  2027   00093C  0E01               	movlw	1
  2028   00093E  6E15               	movwf	___aodiv@counter^0,c
  2029   000940  EFAC  F004         	goto	l1285
  2030   000944                     l1283:
  2031   000944  90D8               	bcf	status,0,c
  2032   000946  360D               	rlcf	___aodiv@divisor^0,f,c
  2033   000948  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  2034   00094A  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  2035   00094C  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  2036   00094E  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  2037   000950  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  2038   000952  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  2039   000954  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  2040   000956  2A15               	incf	___aodiv@counter^0,f,c
  2041   000958                     l1285:
  2042   000958  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  2043   00095A  EFB1  F004         	goto	u571
  2044   00095E  EFB3  F004         	goto	u570
  2045   000962                     u571:
  2046   000962  EFA2  F004         	goto	l1283
  2047   000966                     u570:
  2048   000966                     l1287:
  2049   000966  90D8               	bcf	status,0,c
  2050   000968  3617               	rlcf	___aodiv@quotient^0,f,c
  2051   00096A  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  2052   00096C  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  2053   00096E  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  2054   000970  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  2055   000972  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  2056   000974  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  2057   000976  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  2058   000978  500D               	movf	___aodiv@divisor^0,w,c
  2059   00097A  5C05               	subwf	___aodiv@dividend^0,w,c
  2060   00097C  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2061   00097E  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  2062   000980  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2063   000982  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  2064   000984  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2065   000986  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  2066   000988  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2067   00098A  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  2068   00098C  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2069   00098E  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  2070   000990  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2071   000992  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  2072   000994  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2073   000996  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  2074   000998  A0D8               	btfss	status,0,c
  2075   00099A  EFD1  F004         	goto	u581
  2076   00099E  EFD3  F004         	goto	u580
  2077   0009A2                     u581:
  2078   0009A2  EFE4  F004         	goto	l1295
  2079   0009A6                     u580:
  2080   0009A6  500D               	movf	___aodiv@divisor^0,w,c
  2081   0009A8  5E05               	subwf	___aodiv@dividend^0,f,c
  2082   0009AA  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2083   0009AC  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  2084   0009AE  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2085   0009B0  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  2086   0009B2  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2087   0009B4  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  2088   0009B6  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2089   0009B8  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  2090   0009BA  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2091   0009BC  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  2092   0009BE  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2093   0009C0  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  2094   0009C2  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2095   0009C4  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  2096   0009C6  8017               	bsf	___aodiv@quotient^0,0,c
  2097   0009C8                     l1295:
  2098   0009C8  90D8               	bcf	status,0,c
  2099   0009CA  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  2100   0009CC  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  2101   0009CE  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  2102   0009D0  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  2103   0009D2  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  2104   0009D4  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  2105   0009D6  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  2106   0009D8  320D               	rrcf	___aodiv@divisor^0,f,c
  2107   0009DA  2E15               	decfsz	___aodiv@counter^0,f,c
  2108   0009DC  EFB3  F004         	goto	l1287
  2109   0009E0                     l1299:
  2110   0009E0  5016               	movf	___aodiv@sign^0,w,c
  2111   0009E2  B4D8               	btfsc	status,2,c
  2112   0009E4  EFF6  F004         	goto	u591
  2113   0009E8  EFF8  F004         	goto	u590
  2114   0009EC                     u591:
  2115   0009EC  EF08  F005         	goto	l1303
  2116   0009F0                     u590:
  2117   0009F0  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  2118   0009F2  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  2119   0009F4  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  2120   0009F6  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  2121   0009F8  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  2122   0009FA  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  2123   0009FC  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  2124   0009FE  6C17               	negf	___aodiv@quotient^0,c
  2125   000A00  0E00               	movlw	0
  2126   000A02  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  2127   000A04  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  2128   000A06  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  2129   000A08  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  2130   000A0A  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  2131   000A0C  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  2132   000A0E  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  2133   000A10                     l1303:
  2134   000A10  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2135   000A14  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2136   000A18  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2137   000A1C  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2138   000A20  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2139   000A24  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2140   000A28  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2141   000A2C  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2142   000A30  0012               	return		;funcret
  2143   000A32                     __end_of___aodiv:
  2144                           	callstack 0
  2145                           
  2146 ;; *************** function _lcd_write *****************
  2147 ;; Defined at:
  2148 ;;		line 77 in file "LCD4b_EXSTO.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  lin             1    wreg     unsigned char 
  2151 ;;  col             1   10[COMRAM] unsigned char 
  2152 ;;  str             2   11[COMRAM] PTR unsigned char 
  2153 ;;		 -> bufferLCD(16), STR_4(13), STR_3(7), STR_2(16), 
  2154 ;;		 -> STR_1(16), 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  lin             1   14[COMRAM] unsigned char 
  2157 ;;  end             1   13[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2167 ;;      Params:         3       0       0       0       0       0       0
  2168 ;;      Locals:         2       0       0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0
  2170 ;;      Totals:         5       0       0       0       0       0       0
  2171 ;;Total ram usage:        5 bytes
  2172 ;; Hardware stack levels used: 1
  2173 ;; Hardware stack levels required when called: 4
  2174 ;; This function calls:
  2175 ;;		_lcd_send_byte
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;;		_lcd_clear
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text12
  2183   000E90                     __ptext12:
  2184                           	callstack 0
  2185   000E90                     _lcd_write:
  2186                           	callstack 26
  2187                           
  2188                           ;incstack = 0
  2189                           ;lcd_write@lin stored from wreg
  2190   000E90  6E0F               	movwf	lcd_write@lin^0,c
  2191   000E92                     
  2192                           ;LCD4b_EXSTO.c: 77: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 78: {;L
      +                          CD4b_EXSTO.c: 79:     char end;;LCD4b_EXSTO.c: 81:     if(lin == 1)
  2193   000E92  040F               	decf	lcd_write@lin^0,w,c
  2194   000E94  A4D8               	btfss	status,2,c
  2195   000E96  EF4F  F007         	goto	u861
  2196   000E9A  EF51  F007         	goto	u860
  2197   000E9E                     u861:
  2198   000E9E  EF56  F007         	goto	l1541
  2199   000EA2                     u860:
  2200   000EA2                     
  2201                           ;LCD4b_EXSTO.c: 82:     {;LCD4b_EXSTO.c: 83:         end = col + 0X80 - 1;
  2202   000EA2  500B               	movf	lcd_write@col^0,w,c
  2203   000EA4  0F7F               	addlw	127
  2204   000EA6  6E0E               	movwf	lcd_write@end^0,c
  2205                           
  2206                           ;LCD4b_EXSTO.c: 84:     }
  2207   000EA8  EF62  F007         	goto	l1545
  2208   000EAC                     l1541:
  2209   000EAC  0E02               	movlw	2
  2210   000EAE  180F               	xorwf	lcd_write@lin^0,w,c
  2211   000EB0  A4D8               	btfss	status,2,c
  2212   000EB2  EF5D  F007         	goto	u871
  2213   000EB6  EF5F  F007         	goto	u870
  2214   000EBA                     u871:
  2215   000EBA  EF62  F007         	goto	l1545
  2216   000EBE                     u870:
  2217   000EBE                     
  2218                           ;LCD4b_EXSTO.c: 86:     {;LCD4b_EXSTO.c: 87:         end = col + 0xC0 - 1;
  2219   000EBE  500B               	movf	lcd_write@col^0,w,c
  2220   000EC0  0FBF               	addlw	191
  2221   000EC2  6E0E               	movwf	lcd_write@end^0,c
  2222   000EC4                     l1545:
  2223                           
  2224                           ;LCD4b_EXSTO.c: 89:     lcd_send_byte(0,end);
  2225   000EC4  C00E  F009         	movff	lcd_write@end,lcd_send_byte@data
  2226   000EC8  0E00               	movlw	0
  2227   000ECA  EC0E  F009         	call	_lcd_send_byte
  2228                           
  2229                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2230   000ECE  EF7F  F007         	goto	l1551
  2231   000ED2                     l1547:
  2232                           
  2233                           ;LCD4b_EXSTO.c: 92:     {;LCD4b_EXSTO.c: 93:         lcd_send_byte(1,*str);
  2234   000ED2  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2235   000ED6  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2236   000EDA  6AF8               	clrf	tblptru,c
  2237   000EDC  0E05               	movlw	(high __ramtop+-1)
  2238   000EDE  64F7               	cpfsgt	tblptrh,c
  2239   000EE0  D003               	bra	u887
  2240   000EE2  0008               	tblrd		*
  2241   000EE4  50F5               	movf	tablat,w,c
  2242   000EE6  D005               	bra	u880
  2243   000EE8                     u887:
  2244   000EE8  CFF6 FFE1          	movff	tblptrl,fsr1l
  2245   000EEC  CFF7 FFE2          	movff	tblptrh,fsr1h
  2246   000EF0  50E7               	movf	indf1,w,c
  2247   000EF2                     u880:
  2248   000EF2  6E09               	movwf	lcd_send_byte@data^0,c
  2249   000EF4  0E01               	movlw	1
  2250   000EF6  EC0E  F009         	call	_lcd_send_byte
  2251   000EFA                     
  2252                           ;LCD4b_EXSTO.c: 94:         str++;
  2253   000EFA  4A0C               	infsnz	lcd_write@str^0,f,c
  2254   000EFC  2A0D               	incf	(lcd_write@str+1)^0,f,c
  2255   000EFE                     l1551:
  2256                           
  2257                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2258   000EFE  C00C  FFF6         	movff	lcd_write@str,tblptrl
  2259   000F02  C00D  FFF7         	movff	lcd_write@str+1,tblptrh
  2260   000F06  6AF8               	clrf	tblptru,c
  2261   000F08  0E05               	movlw	(high __ramtop+-1)
  2262   000F0A  64F7               	cpfsgt	tblptrh,c
  2263   000F0C  D003               	bra	u897
  2264   000F0E  0008               	tblrd		*
  2265   000F10  50F5               	movf	tablat,w,c
  2266   000F12  D005               	bra	u890
  2267   000F14                     u897:
  2268   000F14  CFF6 FFE1          	movff	tblptrl,fsr1l
  2269   000F18  CFF7 FFE2          	movff	tblptrh,fsr1h
  2270   000F1C  50E7               	movf	indf1,w,c
  2271   000F1E                     u890:
  2272   000F1E  0900               	iorlw	0
  2273   000F20  A4D8               	btfss	status,2,c
  2274   000F22  EF95  F007         	goto	u901
  2275   000F26  EF97  F007         	goto	u900
  2276   000F2A                     u901:
  2277   000F2A  EF69  F007         	goto	l1547
  2278   000F2E                     u900:
  2279   000F2E  0012               	return		;funcret
  2280   000F30                     __end_of_lcd_write:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _lcd_send_byte *****************
  2284 ;; Defined at:
  2285 ;;		line 63 in file "LCD4b_EXSTO.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  level           1    wreg     unsigned char 
  2288 ;;  data            1    8[COMRAM] unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  level           1    9[COMRAM] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2300 ;;      Params:         1       0       0       0       0       0       0
  2301 ;;      Locals:         1       0       0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0       0       0
  2303 ;;      Totals:         2       0       0       0       0       0       0
  2304 ;;Total ram usage:        2 bytes
  2305 ;; Hardware stack levels used: 1
  2306 ;; Hardware stack levels required when called: 3
  2307 ;; This function calls:
  2308 ;;		_lcd_cmd
  2309 ;; This function is called by:
  2310 ;;		_lcd_write
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text13
  2315   00121C                     __ptext13:
  2316                           	callstack 0
  2317   00121C                     _lcd_send_byte:
  2318                           	callstack 26
  2319                           
  2320                           ;incstack = 0
  2321                           ;lcd_send_byte@level stored from wreg
  2322   00121C  6E0A               	movwf	lcd_send_byte@level^0,c
  2323   00121E                     
  2324                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  2325   00121E  B00A               	btfsc	lcd_send_byte@level^0,0,c
  2326   001220  D002               	bra	u835
  2327   001222  9084               	bcf	132,0,c	;volatile
  2328   001224  D001               	bra	u836
  2329   001226                     u835:
  2330   001226  8084               	bsf	132,0,c	;volatile
  2331   001228                     u836:
  2332   001228                     
  2333                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2334   001228  0E42               	movlw	66
  2335   00122A                     u917:
  2336   00122A  2EE8               	decfsz	wreg,f,c
  2337   00122C  D7FE               	bra	u917
  2338   00122E  D000               	nop2	
  2339   001230                     
  2340                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  2341   001230  9484               	bcf	132,2,c	;volatile
  2342   001232                     
  2343                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  2344   001232  5009               	movf	lcd_send_byte@data^0,w,c
  2345   001234  EC71  F006         	call	_lcd_cmd
  2346   001238  0012               	return		;funcret
  2347   00123A                     __end_of_lcd_send_byte:
  2348                           	callstack 0
  2349                           
  2350 ;; *************** function _lcd_init *****************
  2351 ;; Defined at:
  2352 ;;		line 3 in file "LCD4b_EXSTO.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  i               1    9[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2366 ;;      Params:         0       0       0       0       0       0       0
  2367 ;;      Locals:         1       0       0       0       0       0       0
  2368 ;;      Temps:          1       0       0       0       0       0       0
  2369 ;;      Totals:         2       0       0       0       0       0       0
  2370 ;;Total ram usage:        2 bytes
  2371 ;; Hardware stack levels used: 1
  2372 ;; Hardware stack levels required when called: 3
  2373 ;; This function calls:
  2374 ;;		_lcd_cmd
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text14
  2381   000F30                     __ptext14:
  2382                           	callstack 0
  2383   000F30                     _lcd_init:
  2384                           	callstack 27
  2385   000F30                     
  2386                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  2387   000F30  0E00               	movlw	0
  2388   000F32  6E95               	movwf	149,c	;volatile
  2389   000F34                     
  2390                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  2391   000F34  9496               	bcf	150,2,c	;volatile
  2392   000F36                     
  2393                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  2394   000F36  9296               	bcf	150,1,c	;volatile
  2395   000F38                     
  2396                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  2397   000F38  9096               	bcf	150,0,c	;volatile
  2398                           
  2399                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  2400   000F3A  0E00               	movlw	0
  2401   000F3C  6E83               	movwf	131,c	;volatile
  2402   000F3E                     
  2403                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  2404   000F3E  9084               	bcf	132,0,c	;volatile
  2405   000F40                     
  2406                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  2407   000F40  9284               	bcf	132,1,c	;volatile
  2408   000F42                     
  2409                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  2410   000F42  9484               	bcf	132,2,c	;volatile
  2411   000F44                     
  2412                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  2413   000F44  0E27               	movlw	39
  2414   000F46  6E09               	movwf	??_lcd_init^0,c
  2415   000F48  0EF5               	movlw	245
  2416   000F4A                     u927:
  2417   000F4A  2EE8               	decfsz	wreg,f,c
  2418   000F4C  D7FE               	bra	u927
  2419   000F4E  2E09               	decfsz	??_lcd_init^0,f,c
  2420   000F50  D7FC               	bra	u927
  2421   000F52  F000               	nop	
  2422   000F54                     
  2423                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  2424   000F54  0E00               	movlw	0
  2425   000F56  6E0A               	movwf	lcd_init@i^0,c
  2426   000F58                     l1515:
  2427                           
  2428                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  2429   000F58  0E30               	movlw	48
  2430   000F5A  EC71  F006         	call	_lcd_cmd
  2431   000F5E                     
  2432                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  2433   000F5E  0E0D               	movlw	13
  2434   000F60  6E09               	movwf	??_lcd_init^0,c
  2435   000F62  0EFC               	movlw	252
  2436   000F64                     u937:
  2437   000F64  2EE8               	decfsz	wreg,f,c
  2438   000F66  D7FE               	bra	u937
  2439   000F68  2E09               	decfsz	??_lcd_init^0,f,c
  2440   000F6A  D7FC               	bra	u937
  2441   000F6C                     
  2442                           ;LCD4b_EXSTO.c: 22:     }
  2443   000F6C  2A0A               	incf	lcd_init@i^0,f,c
  2444   000F6E  0E02               	movlw	2
  2445   000F70  640A               	cpfsgt	lcd_init@i^0,c
  2446   000F72  EFBD  F007         	goto	u851
  2447   000F76  EFBF  F007         	goto	u850
  2448   000F7A                     u851:
  2449   000F7A  EFAC  F007         	goto	l1515
  2450   000F7E                     u850:
  2451   000F7E                     
  2452                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  2453   000F7E  0E02               	movlw	2
  2454   000F80  EC71  F006         	call	_lcd_cmd
  2455   000F84                     
  2456                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2457   000F84  0E1A               	movlw	26
  2458   000F86                     u947:
  2459   000F86  2EE8               	decfsz	wreg,f,c
  2460   000F88  D7FE               	bra	u947
  2461   000F8A  D000               	nop2	
  2462   000F8C                     
  2463                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  2464   000F8C  0E28               	movlw	40
  2465   000F8E  EC71  F006         	call	_lcd_cmd
  2466                           
  2467                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2468   000F92  0E1A               	movlw	26
  2469   000F94                     u957:
  2470   000F94  2EE8               	decfsz	wreg,f,c
  2471   000F96  D7FE               	bra	u957
  2472   000F98  D000               	nop2	
  2473   000F9A                     
  2474                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  2475   000F9A  0E01               	movlw	1
  2476   000F9C  EC71  F006         	call	_lcd_cmd
  2477   000FA0                     
  2478                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  2479   000FA0  0E06               	movlw	6
  2480   000FA2  6E09               	movwf	??_lcd_init^0,c
  2481   000FA4  0E30               	movlw	48
  2482   000FA6                     u967:
  2483   000FA6  2EE8               	decfsz	wreg,f,c
  2484   000FA8  D7FE               	bra	u967
  2485   000FAA  2E09               	decfsz	??_lcd_init^0,f,c
  2486   000FAC  D7FC               	bra	u967
  2487   000FAE  D000               	nop2	
  2488                           
  2489                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  2490   000FB0  0E0C               	movlw	12
  2491   000FB2  EC71  F006         	call	_lcd_cmd
  2492   000FB6                     
  2493                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2494   000FB6  0E1A               	movlw	26
  2495   000FB8                     u977:
  2496   000FB8  2EE8               	decfsz	wreg,f,c
  2497   000FBA  D7FE               	bra	u977
  2498   000FBC  D000               	nop2	
  2499   000FBE                     
  2500                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  2501   000FBE  0E06               	movlw	6
  2502   000FC0  EC71  F006         	call	_lcd_cmd
  2503                           
  2504                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2505   000FC4  0E1A               	movlw	26
  2506   000FC6                     u987:
  2507   000FC6  2EE8               	decfsz	wreg,f,c
  2508   000FC8  D7FE               	bra	u987
  2509   000FCA  D000               	nop2	
  2510   000FCC  0012               	return		;funcret
  2511   000FCE                     __end_of_lcd_init:
  2512                           	callstack 0
  2513                           
  2514 ;; *************** function _lcd_cmd *****************
  2515 ;; Defined at:
  2516 ;;		line 42 in file "LCD4b_EXSTO.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  cmd             1    wreg     unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  cmd             1    7[COMRAM] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2530 ;;      Params:         0       0       0       0       0       0       0
  2531 ;;      Locals:         1       0       0       0       0       0       0
  2532 ;;      Temps:          1       0       0       0       0       0       0
  2533 ;;      Totals:         2       0       0       0       0       0       0
  2534 ;;Total ram usage:        2 bytes
  2535 ;; Hardware stack levels used: 1
  2536 ;; Hardware stack levels required when called: 2
  2537 ;; This function calls:
  2538 ;;		_set_bit
  2539 ;; This function is called by:
  2540 ;;		_lcd_init
  2541 ;;		_lcd_send_byte
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text15
  2546   000CE2                     __ptext15:
  2547                           	callstack 0
  2548   000CE2                     _lcd_cmd:
  2549                           	callstack 26
  2550                           
  2551                           ;incstack = 0
  2552                           ;lcd_cmd@cmd stored from wreg
  2553   000CE2  6E08               	movwf	lcd_cmd@cmd^0,c
  2554   000CE4                     
  2555                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  2556   000CE4  0E10               	movlw	16
  2557   000CE6  6E05               	movwf	set_bit@comp^0,c
  2558   000CE8  5008               	movf	lcd_cmd@cmd^0,w,c
  2559   000CEA  ECFE  F008         	call	_set_bit
  2560   000CEE  6E07               	movwf	??_lcd_cmd^0,c
  2561   000CF0  3A07               	swapf	??_lcd_cmd^0,f,c
  2562   000CF2  5083               	movf	131,w,c	;volatile
  2563   000CF4  1807               	xorwf	??_lcd_cmd^0,w,c
  2564   000CF6  0BEF               	andlw	-17
  2565   000CF8  1807               	xorwf	??_lcd_cmd^0,w,c
  2566   000CFA  6E83               	movwf	131,c	;volatile
  2567                           
  2568                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  2569   000CFC  0E20               	movlw	32
  2570   000CFE  6E05               	movwf	set_bit@comp^0,c
  2571   000D00  5008               	movf	lcd_cmd@cmd^0,w,c
  2572   000D02  ECFE  F008         	call	_set_bit
  2573   000D06  6E07               	movwf	??_lcd_cmd^0,c
  2574   000D08  3A07               	swapf	??_lcd_cmd^0,f,c
  2575   000D0A  4607               	rlncf	??_lcd_cmd^0,f,c
  2576   000D0C  5083               	movf	131,w,c	;volatile
  2577   000D0E  1807               	xorwf	??_lcd_cmd^0,w,c
  2578   000D10  0BDF               	andlw	-33
  2579   000D12  1807               	xorwf	??_lcd_cmd^0,w,c
  2580   000D14  6E83               	movwf	131,c	;volatile
  2581                           
  2582                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  2583   000D16  0E40               	movlw	64
  2584   000D18  6E05               	movwf	set_bit@comp^0,c
  2585   000D1A  5008               	movf	lcd_cmd@cmd^0,w,c
  2586   000D1C  ECFE  F008         	call	_set_bit
  2587   000D20  6E07               	movwf	??_lcd_cmd^0,c
  2588   000D22  3A07               	swapf	??_lcd_cmd^0,f,c
  2589   000D24  4607               	rlncf	??_lcd_cmd^0,f,c
  2590   000D26  4607               	rlncf	??_lcd_cmd^0,f,c
  2591   000D28  5083               	movf	131,w,c	;volatile
  2592   000D2A  1807               	xorwf	??_lcd_cmd^0,w,c
  2593   000D2C  0BBF               	andlw	-65
  2594   000D2E  1807               	xorwf	??_lcd_cmd^0,w,c
  2595   000D30  6E83               	movwf	131,c	;volatile
  2596                           
  2597                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  2598   000D32  0E80               	movlw	128
  2599   000D34  6E05               	movwf	set_bit@comp^0,c
  2600   000D36  5008               	movf	lcd_cmd@cmd^0,w,c
  2601   000D38  ECFE  F008         	call	_set_bit
  2602   000D3C  6E07               	movwf	??_lcd_cmd^0,c
  2603   000D3E  3207               	rrcf	??_lcd_cmd^0,f,c
  2604   000D40  3207               	rrcf	??_lcd_cmd^0,f,c
  2605   000D42  5083               	movf	131,w,c	;volatile
  2606   000D44  1807               	xorwf	??_lcd_cmd^0,w,c
  2607   000D46  0B7F               	andlw	-129
  2608   000D48  1807               	xorwf	??_lcd_cmd^0,w,c
  2609   000D4A  6E83               	movwf	131,c	;volatile
  2610   000D4C                     
  2611                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  2612   000D4C  8484               	bsf	132,2,c	;volatile
  2613   000D4E                     
  2614                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  2615   000D4E  9484               	bcf	132,2,c	;volatile
  2616   000D50                     
  2617                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2618   000D50  0E42               	movlw	66
  2619   000D52                     u997:
  2620   000D52  2EE8               	decfsz	wreg,f,c
  2621   000D54  D7FE               	bra	u997
  2622   000D56  D000               	nop2	
  2623   000D58                     
  2624                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  2625   000D58  0E01               	movlw	1
  2626   000D5A  6E05               	movwf	set_bit@comp^0,c
  2627   000D5C  5008               	movf	lcd_cmd@cmd^0,w,c
  2628   000D5E  ECFE  F008         	call	_set_bit
  2629   000D62  6E07               	movwf	??_lcd_cmd^0,c
  2630   000D64  3A07               	swapf	??_lcd_cmd^0,f,c
  2631   000D66  5083               	movf	131,w,c	;volatile
  2632   000D68  1807               	xorwf	??_lcd_cmd^0,w,c
  2633   000D6A  0BEF               	andlw	-17
  2634   000D6C  1807               	xorwf	??_lcd_cmd^0,w,c
  2635   000D6E  6E83               	movwf	131,c	;volatile
  2636   000D70                     
  2637                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  2638   000D70  0E02               	movlw	2
  2639   000D72  6E05               	movwf	set_bit@comp^0,c
  2640   000D74  5008               	movf	lcd_cmd@cmd^0,w,c
  2641   000D76  ECFE  F008         	call	_set_bit
  2642   000D7A  6E07               	movwf	??_lcd_cmd^0,c
  2643   000D7C  3A07               	swapf	??_lcd_cmd^0,f,c
  2644   000D7E  4607               	rlncf	??_lcd_cmd^0,f,c
  2645   000D80  5083               	movf	131,w,c	;volatile
  2646   000D82  1807               	xorwf	??_lcd_cmd^0,w,c
  2647   000D84  0BDF               	andlw	-33
  2648   000D86  1807               	xorwf	??_lcd_cmd^0,w,c
  2649   000D88  6E83               	movwf	131,c	;volatile
  2650   000D8A                     
  2651                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  2652   000D8A  0E04               	movlw	4
  2653   000D8C  6E05               	movwf	set_bit@comp^0,c
  2654   000D8E  5008               	movf	lcd_cmd@cmd^0,w,c
  2655   000D90  ECFE  F008         	call	_set_bit
  2656   000D94  6E07               	movwf	??_lcd_cmd^0,c
  2657   000D96  3A07               	swapf	??_lcd_cmd^0,f,c
  2658   000D98  4607               	rlncf	??_lcd_cmd^0,f,c
  2659   000D9A  4607               	rlncf	??_lcd_cmd^0,f,c
  2660   000D9C  5083               	movf	131,w,c	;volatile
  2661   000D9E  1807               	xorwf	??_lcd_cmd^0,w,c
  2662   000DA0  0BBF               	andlw	-65
  2663   000DA2  1807               	xorwf	??_lcd_cmd^0,w,c
  2664   000DA4  6E83               	movwf	131,c	;volatile
  2665   000DA6                     
  2666                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  2667   000DA6  0E08               	movlw	8
  2668   000DA8  6E05               	movwf	set_bit@comp^0,c
  2669   000DAA  5008               	movf	lcd_cmd@cmd^0,w,c
  2670   000DAC  ECFE  F008         	call	_set_bit
  2671   000DB0  6E07               	movwf	??_lcd_cmd^0,c
  2672   000DB2  3207               	rrcf	??_lcd_cmd^0,f,c
  2673   000DB4  3207               	rrcf	??_lcd_cmd^0,f,c
  2674   000DB6  5083               	movf	131,w,c	;volatile
  2675   000DB8  1807               	xorwf	??_lcd_cmd^0,w,c
  2676   000DBA  0B7F               	andlw	-129
  2677   000DBC  1807               	xorwf	??_lcd_cmd^0,w,c
  2678   000DBE  6E83               	movwf	131,c	;volatile
  2679   000DC0                     
  2680                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  2681   000DC0  8484               	bsf	132,2,c	;volatile
  2682   000DC2                     
  2683                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  2684   000DC2  9484               	bcf	132,2,c	;volatile
  2685   000DC4  0012               	return		;funcret
  2686   000DC6                     __end_of_lcd_cmd:
  2687                           	callstack 0
  2688                           
  2689 ;; *************** function _set_bit *****************
  2690 ;; Defined at:
  2691 ;;		line 36 in file "LCD4b_EXSTO.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  cmd             1    wreg     unsigned char 
  2694 ;;  comp            1    4[COMRAM] unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  cmd             1    5[COMRAM] unsigned char 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      unsigned char 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2706 ;;      Params:         1       0       0       0       0       0       0
  2707 ;;      Locals:         1       0       0       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0
  2709 ;;      Totals:         2       0       0       0       0       0       0
  2710 ;;Total ram usage:        2 bytes
  2711 ;; Hardware stack levels used: 1
  2712 ;; Hardware stack levels required when called: 1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_lcd_cmd
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text16
  2721   0011FC                     __ptext16:
  2722                           	callstack 0
  2723   0011FC                     _set_bit:
  2724                           	callstack 26
  2725                           
  2726                           ;incstack = 0
  2727                           ;set_bit@cmd stored from wreg
  2728   0011FC  6E06               	movwf	set_bit@cmd^0,c
  2729   0011FE                     
  2730                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  2731   0011FE  5006               	movf	set_bit@cmd^0,w,c
  2732   001200  1405               	andwf	set_bit@comp^0,w,c
  2733   001202  0900               	iorlw	0
  2734   001204  B4D8               	btfsc	status,2,c
  2735   001206  EF07  F009         	goto	u691
  2736   00120A  EF09  F009         	goto	u690
  2737   00120E                     u691:
  2738   00120E  EF0C  F009         	goto	l1369
  2739   001212                     u690:
  2740   001212  0E01               	movlw	1
  2741   001214  EF0D  F009         	goto	l25
  2742   001218                     l1369:
  2743   001218  0E00               	movlw	0
  2744   00121A                     l25:
  2745   00121A  0012               	return		;funcret
  2746   00121C                     __end_of_set_bit:
  2747                           	callstack 0
  2748                           
  2749 ;; *************** function _config_TIMER0 *****************
  2750 ;; Defined at:
  2751 ;;		line 101 in file "Program_main.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2765 ;;      Params:         0       0       0       0       0       0       0
  2766 ;;      Locals:         0       0       0       0       0       0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0
  2768 ;;      Totals:         0       0       0       0       0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used: 1
  2771 ;; Hardware stack levels required when called: 1
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_main
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text17
  2780   00123A                     __ptext17:
  2781                           	callstack 0
  2782   00123A                     _config_TIMER0:
  2783                           	callstack 29
  2784   00123A                     
  2785                           ;Program_main.c: 104:     T0CON = 0X87;
  2786   00123A  0E87               	movlw	135
  2787   00123C  6ED5               	movwf	213,c	;volatile
  2788                           
  2789                           ;Program_main.c: 112:     TMR0H = 0XE1;
  2790   00123E  0EE1               	movlw	225
  2791   001240  6ED7               	movwf	215,c	;volatile
  2792                           
  2793                           ;Program_main.c: 113:     TMR0L = 0X7B;
  2794   001242  0E7B               	movlw	123
  2795   001244  6ED6               	movwf	214,c	;volatile
  2796   001246  0012               	return		;funcret
  2797   001248                     __end_of_config_TIMER0:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function _config_IO *****************
  2801 ;; Defined at:
  2802 ;;		line 76 in file "Program_main.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2816 ;;      Params:         0       0       0       0       0       0       0
  2817 ;;      Locals:         0       0       0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0
  2819 ;;      Totals:         0       0       0       0       0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used: 1
  2822 ;; Hardware stack levels required when called: 1
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_main
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text18
  2831   001248                     __ptext18:
  2832                           	callstack 0
  2833   001248                     _config_IO:
  2834                           	callstack 29
  2835   001248                     
  2836                           ;Program_main.c: 78:     TRISB = 0X00;
  2837   001248  0E00               	movlw	0
  2838   00124A  6E93               	movwf	147,c	;volatile
  2839                           
  2840                           ;Program_main.c: 79:     PORTB = 0X01;
  2841   00124C  0E01               	movlw	1
  2842   00124E  6E81               	movwf	129,c	;volatile
  2843                           
  2844                           ;Program_main.c: 80:     ADCON1 = 0X0F;
  2845   001250  0E0F               	movlw	15
  2846   001252  6EC1               	movwf	193,c	;volatile
  2847   001254  0012               	return		;funcret
  2848   001256                     __end_of_config_IO:
  2849                           	callstack 0
  2850                           
  2851 ;; *************** function _config_INTERRUPT *****************
  2852 ;; Defined at:
  2853 ;;		line 89 in file "Program_main.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         0       0       0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0
  2870 ;;      Totals:         0       0       0       0       0       0       0
  2871 ;;Total ram usage:        0 bytes
  2872 ;; Hardware stack levels used: 1
  2873 ;; Hardware stack levels required when called: 1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text19
  2882   001260                     __ptext19:
  2883                           	callstack 0
  2884   001260                     _config_INTERRUPT:
  2885                           	callstack 29
  2886   001260                     
  2887                           ;Program_main.c: 91:     INTCON = 0xA0;
  2888   001260  0EA0               	movlw	160
  2889   001262  6EF2               	movwf	242,c	;volatile
  2890   001264  0012               	return		;funcret
  2891   001266                     __end_of_config_INTERRUPT:
  2892                           	callstack 0
  2893                           
  2894 ;; *************** function _config_FOSC *****************
  2895 ;; Defined at:
  2896 ;;		line 83 in file "Program_main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; Hardware stack levels required when called: 1
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text20
  2925   001256                     __ptext20:
  2926                           	callstack 0
  2927   001256                     _config_FOSC:
  2928                           	callstack 29
  2929   001256                     
  2930                           ;Program_main.c: 85:     OSCCON = 0X72;
  2931   001256  0E72               	movlw	114
  2932   001258  6ED3               	movwf	211,c	;volatile
  2933                           
  2934                           ;Program_main.c: 86:     OSCTUNE = 0X00;
  2935   00125A  0E00               	movlw	0
  2936   00125C  6E9B               	movwf	155,c	;volatile
  2937   00125E  0012               	return		;funcret
  2938   001260                     __end_of_config_FOSC:
  2939                           	callstack 0
  2940                           
  2941 ;; *************** function _intern_TMR0 *****************
  2942 ;; Defined at:
  2943 ;;		line 124 in file "Program_main.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2957 ;;      Params:         0       0       0       0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0
  2959 ;;      Temps:          4       0       0       0       0       0       0
  2960 ;;      Totals:         4       0       0       0       0       0       0
  2961 ;;Total ram usage:        4 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		Interrupt level 1
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	intcodelo
  2971   000018                     __pintcodelo:
  2972                           	callstack 0
  2973   000018                     _intern_TMR0:
  2974                           	callstack 22
  2975                           
  2976                           ;incstack = 0
  2977   000018  8079               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2978   00001A  CFD8 F002          	movff	status,??_intern_TMR0+1
  2979   00001E  CFE8 F003          	movff	wreg,??_intern_TMR0+2
  2980   000022  CFE0 F004          	movff	bsr,??_intern_TMR0+3
  2981   000026                     
  2982                           ;Program_main.c: 126:     if (INTCONbits.TMR0IF == 1)
  2983   000026  A4F2               	btfss	242,2,c	;volatile
  2984   000028  EF18  F000         	goto	i1u44_21
  2985   00002C  EF1A  F000         	goto	i1u44_20
  2986   000030                     i1u44_21:
  2987   000030  EF5A  F000         	goto	i1l98
  2988   000034                     i1u44_20:
  2989   000034                     
  2990                           ;Program_main.c: 127:     {;Program_main.c: 128:         timer_1seg++;
  2991   000034  4A76               	infsnz	_timer_1seg^0,f,c
  2992   000036  2A77               	incf	(_timer_1seg+1)^0,f,c
  2993   000038                     
  2994                           ;Program_main.c: 129:         if (timer_1seg >= 1)
  2995   000038  BE77               	btfsc	(_timer_1seg+1)^0,7,c
  2996   00003A  EF27  F000         	goto	i1u45_21
  2997   00003E  5077               	movf	(_timer_1seg+1)^0,w,c
  2998   000040  E108               	bnz	i1u45_20
  2999   000042  0476               	decf	_timer_1seg^0,w,c
  3000   000044  A0D8               	btfss	status,0,c
  3001   000046  EF27  F000         	goto	i1u45_21
  3002   00004A  EF29  F000         	goto	i1u45_20
  3003   00004E                     i1u45_21:
  3004   00004E  EF55  F000         	goto	i1l96
  3005   000052                     i1u45_20:
  3006   000052                     
  3007                           ;Program_main.c: 130:         {;Program_main.c: 131:             timer_1seg = 0;
  3008   000052  0E00               	movlw	0
  3009   000054  6E77               	movwf	(_timer_1seg+1)^0,c
  3010   000056  0E00               	movlw	0
  3011   000058  6E76               	movwf	_timer_1seg^0,c
  3012   00005A                     
  3013                           ;Program_main.c: 132:             PORTBbits.RB0 = ~PORTBbits.RB0;
  3014   00005A  B081               	btfsc	129,0,c	;volatile
  3015   00005C  EF32  F000         	goto	i1u46_21
  3016   000060  EF35  F000         	goto	i1u46_20
  3017   000064                     i1u46_21:
  3018   000064  0E01               	movlw	1
  3019   000066  EF36  F000         	goto	i1u46_26
  3020   00006A                     i1u46_20:
  3021   00006A  0E00               	movlw	0
  3022   00006C                     i1u46_26:
  3023   00006C  0AFF               	xorlw	255
  3024   00006E  6E01               	movwf	??_intern_TMR0^0,c
  3025   000070  5081               	movf	129,w,c	;volatile
  3026   000072  1801               	xorwf	??_intern_TMR0^0,w,c
  3027   000074  0BFE               	andlw	-2
  3028   000076  1801               	xorwf	??_intern_TMR0^0,w,c
  3029   000078  6E81               	movwf	129,c	;volatile
  3030   00007A                     
  3031                           ;Program_main.c: 133:             counter++;
  3032   00007A  4A74               	infsnz	_counter^0,f,c
  3033   00007C  2A75               	incf	(_counter+1)^0,f,c
  3034   00007E                     
  3035                           ;Program_main.c: 134:             if (counter > 60)
  3036   00007E  BE75               	btfsc	(_counter+1)^0,7,c
  3037   000080  EF4B  F000         	goto	i1u47_21
  3038   000084  5075               	movf	(_counter+1)^0,w,c
  3039   000086  E109               	bnz	i1u47_20
  3040   000088  0E3D               	movlw	61
  3041   00008A  5C74               	subwf	_counter^0,w,c
  3042   00008C  A0D8               	btfss	status,0,c
  3043   00008E  EF4B  F000         	goto	i1u47_21
  3044   000092  EF4D  F000         	goto	i1u47_20
  3045   000096                     i1u47_21:
  3046   000096  EF55  F000         	goto	i1l96
  3047   00009A                     i1u47_20:
  3048   00009A                     
  3049                           ;Program_main.c: 135:             {;Program_main.c: 136:                 counter = 0;
  3050   00009A  0E00               	movlw	0
  3051   00009C  6E75               	movwf	(_counter+1)^0,c
  3052   00009E  0E00               	movlw	0
  3053   0000A0  6E74               	movwf	_counter^0,c
  3054                           
  3055                           ;Program_main.c: 137:                 timer_1seg = 0;
  3056   0000A2  0E00               	movlw	0
  3057   0000A4  6E77               	movwf	(_timer_1seg+1)^0,c
  3058   0000A6  0E00               	movlw	0
  3059   0000A8  6E76               	movwf	_timer_1seg^0,c
  3060   0000AA                     i1l96:
  3061                           
  3062                           ;Program_main.c: 140:         TMR0H = 0XE1;
  3063   0000AA  0EE1               	movlw	225
  3064   0000AC  6ED7               	movwf	215,c	;volatile
  3065                           
  3066                           ;Program_main.c: 141:         TMR0L = 0X7B;
  3067   0000AE  0E7B               	movlw	123
  3068   0000B0  6ED6               	movwf	214,c	;volatile
  3069   0000B2                     
  3070                           ;Program_main.c: 142:         INTCONbits.TMR0IF = 0;
  3071   0000B2  94F2               	bcf	242,2,c	;volatile
  3072   0000B4                     i1l98:
  3073   0000B4  C004  FFE0         	movff	??_intern_TMR0+3,bsr
  3074   0000B8  C003  FFE8         	movff	??_intern_TMR0+2,wreg
  3075   0000BC  C002  FFD8         	movff	??_intern_TMR0+1,status
  3076   0000C0  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3077   0000C2  0010               	retfie	
  3078   0000C4                     __end_of_intern_TMR0:
  3079                           	callstack 0
  3080                           
  3081                           	psect	rparam
  3082   000000                     
  3083                           	psect	temp
  3084   000079                     btemp:
  3085                           	callstack 0
  3086   000079                     	ds	1
  3087   000000                     int$flags	set	btemp
  3088   000000                     wtemp8	set	btemp+1
  3089   000000                     ttemp5	set	btemp+1
  3090   000000                     ttemp6	set	btemp+4
  3091   000000                     ttemp7	set	btemp+8
  3092                           
  3093                           	psect	idloc
  3094                           
  3095                           ;Config register IDLOC0 @ 0x200000
  3096                           ;	unspecified, using default values
  3097   200000                     	org	2097152
  3098   200000  FF                 	db	255
  3099                           
  3100                           ;Config register IDLOC1 @ 0x200001
  3101                           ;	unspecified, using default values
  3102   200001                     	org	2097153
  3103   200001  FF                 	db	255
  3104                           
  3105                           ;Config register IDLOC2 @ 0x200002
  3106                           ;	unspecified, using default values
  3107   200002                     	org	2097154
  3108   200002  FF                 	db	255
  3109                           
  3110                           ;Config register IDLOC3 @ 0x200003
  3111                           ;	unspecified, using default values
  3112   200003                     	org	2097155
  3113   200003  FF                 	db	255
  3114                           
  3115                           ;Config register IDLOC4 @ 0x200004
  3116                           ;	unspecified, using default values
  3117   200004                     	org	2097156
  3118   200004  FF                 	db	255
  3119                           
  3120                           ;Config register IDLOC5 @ 0x200005
  3121                           ;	unspecified, using default values
  3122   200005                     	org	2097157
  3123   200005  FF                 	db	255
  3124                           
  3125                           ;Config register IDLOC6 @ 0x200006
  3126                           ;	unspecified, using default values
  3127   200006                     	org	2097158
  3128   200006  FF                 	db	255
  3129                           
  3130                           ;Config register IDLOC7 @ 0x200007
  3131                           ;	unspecified, using default values
  3132   200007                     	org	2097159
  3133   200007  FF                 	db	255
  3134                           
  3135                           	psect	config
  3136                           
  3137                           ; Padding undefined space
  3138   300000                     	org	3145728
  3139   300000  FF                 	db	255
  3140                           
  3141                           ;Config register CONFIG1H @ 0x300001
  3142                           ;	Oscillator Selection bits
  3143                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3144                           ;	Fail-Safe Clock Monitor Enable bit
  3145                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3146                           ;	Internal/External Oscillator Switchover bit
  3147                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3148   300001                     	org	3145729
  3149   300001  08                 	db	8
  3150                           
  3151                           ;Config register CONFIG2L @ 0x300002
  3152                           ;	Power-up Timer Enable bit
  3153                           ;	PWRT = OFF, PWRT disabled
  3154                           ;	Brown-out Reset Enable bits
  3155                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3156                           ;	Brown Out Reset Voltage bits
  3157                           ;	BORV = 3, Minimum setting
  3158   300002                     	org	3145730
  3159   300002  19                 	db	25
  3160                           
  3161                           ;Config register CONFIG2H @ 0x300003
  3162                           ;	Watchdog Timer Enable bit
  3163                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3164                           ;	Watchdog Timer Postscale Select bits
  3165                           ;	WDTPS = 32768, 1:32768
  3166   300003                     	org	3145731
  3167   300003  1E                 	db	30
  3168                           
  3169                           ; Padding undefined space
  3170   300004                     	org	3145732
  3171   300004  FF                 	db	255
  3172                           
  3173                           ;Config register CONFIG3H @ 0x300005
  3174                           ;	CCP2 MUX bit
  3175                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3176                           ;	PORTB A/D Enable bit
  3177                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3178                           ;	Low-Power Timer1 Oscillator Enable bit
  3179                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3180                           ;	MCLR Pin Enable bit
  3181                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3182   300005                     	org	3145733
  3183   300005  81                 	db	129
  3184                           
  3185                           ;Config register CONFIG4L @ 0x300006
  3186                           ;	Stack Full/Underflow Reset Enable bit
  3187                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3188                           ;	Single-Supply ICSP Enable bit
  3189                           ;	LVP = OFF, Single-Supply ICSP disabled
  3190                           ;	Extended Instruction Set Enable bit
  3191                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3192                           ;	Background Debugger Enable bit
  3193                           ;	DEBUG = 0x1, unprogrammed default
  3194   300006                     	org	3145734
  3195   300006  81                 	db	129
  3196                           
  3197                           ; Padding undefined space
  3198   300007                     	org	3145735
  3199   300007  FF                 	db	255
  3200                           
  3201                           ;Config register CONFIG5L @ 0x300008
  3202                           ;	Code Protection bit
  3203                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3204                           ;	Code Protection bit
  3205                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3206                           ;	Code Protection bit
  3207                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3208                           ;	Code Protection bit
  3209                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3210   300008                     	org	3145736
  3211   300008  0F                 	db	15
  3212                           
  3213                           ;Config register CONFIG5H @ 0x300009
  3214                           ;	Boot Block Code Protection bit
  3215                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3216                           ;	Data EEPROM Code Protection bit
  3217                           ;	CPD = OFF, Data EEPROM not code-protected
  3218   300009                     	org	3145737
  3219   300009  C0                 	db	192
  3220                           
  3221                           ;Config register CONFIG6L @ 0x30000A
  3222                           ;	Write Protection bit
  3223                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3224                           ;	Write Protection bit
  3225                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3226                           ;	Write Protection bit
  3227                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3228                           ;	Write Protection bit
  3229                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3230   30000A                     	org	3145738
  3231   30000A  0F                 	db	15
  3232                           
  3233                           ;Config register CONFIG6H @ 0x30000B
  3234                           ;	Configuration Register Write Protection bit
  3235                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3236                           ;	Boot Block Write Protection bit
  3237                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3238                           ;	Data EEPROM Write Protection bit
  3239                           ;	WRTD = OFF, Data EEPROM not write-protected
  3240   30000B                     	org	3145739
  3241   30000B  E0                 	db	224
  3242                           
  3243                           ;Config register CONFIG7L @ 0x30000C
  3244                           ;	Table Read Protection bit
  3245                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3246                           ;	Table Read Protection bit
  3247                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3248                           ;	Table Read Protection bit
  3249                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3250                           ;	Table Read Protection bit
  3251                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3252   30000C                     	org	3145740
  3253   30000C  0F                 	db	15
  3254                           
  3255                           ;Config register CONFIG7H @ 0x30000D
  3256                           ;	Boot Block Table Read Protection bit
  3257                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3258   30000D                     	org	3145741
  3259   30000D  40                 	db	64
  3260                           tosu	equ	0xFFF
  3261                           tosh	equ	0xFFE
  3262                           tosl	equ	0xFFD
  3263                           stkptr	equ	0xFFC
  3264                           pclatu	equ	0xFFB
  3265                           pclath	equ	0xFFA
  3266                           pcl	equ	0xFF9
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           indf0	equ	0xFEF
  3274                           postinc0	equ	0xFEE
  3275                           postdec0	equ	0xFED
  3276                           preinc0	equ	0xFEC
  3277                           plusw0	equ	0xFEB
  3278                           fsr0h	equ	0xFEA
  3279                           fsr0l	equ	0xFE9
  3280                           wreg	equ	0xFE8
  3281                           indf1	equ	0xFE7
  3282                           postinc1	equ	0xFE6
  3283                           postdec1	equ	0xFE5
  3284                           preinc1	equ	0xFE4
  3285                           plusw1	equ	0xFE3
  3286                           fsr1h	equ	0xFE2
  3287                           fsr1l	equ	0xFE1
  3288                           bsr	equ	0xFE0
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           preinc2	equ	0xFDC
  3293                           plusw2	equ	0xFDB
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8

Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     120
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S936$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S883$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S883$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_4(CODE[13]), STR_3(CODE[7]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _intern_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _intern_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intern_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intern_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intern_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intern_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intern_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8385
                        _config_FOSC
                   _config_INTERRUPT
                          _config_IO
                      _config_TIMER0
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    5570
                                             92 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5219
                                             84 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           23    17      6    4869
                                             66 COMRAM    18    12      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3649
                                             31 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1941
                                             10 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              8 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              8 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              6 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_TIMER0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _intern_TMR0                                          4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_INTERRUPT
   _config_IO
   _config_TIMER0
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc

 _intern_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      78       1       95.2%
BITBIGSFRhlh        25      0       0      20        0.0%
BITBIGSFRhhhlhh     1A      0       0      17        0.0%
BITBIGSFRhhl        11      0       0      19        0.0%
BITBIGSFRlhl         E      0       0      23        0.0%
BITBIGSFRhhhh        D      0       0      16        0.0%
BITBIGSFRhll         4      0       0      21        0.0%
BITBIGSFRhhhll       1      0       0      18        0.0%
BITBIGSFRllh         1      0       0      24        0.0%
BITBIGSFRlhh         1      0       0      22        0.0%
BITBIGSFRlll         1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      26        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 10 15:56:14 2023

                      l21 0FCC                        l32 1238                        l25 121A  
                      l44 0F2E                        l29 0DC4                        l81 1254  
                      l90 1246                        l84 125E                        l87 1264  
          ?_lcd_send_byte 0009                        bsr 000FE0                       l223 0A30  
                     l236 0B94                       l820 06C0                       l813 1046  
                     l821 0706                       l832 08A8                       l809 0FF0  
                     l818 06B8                       l852 11D4                       l845 1150  
                     l839 0CE0                       l864 0E8E                       l872 1194  
                     l849 11CC                       l875 1266                       l787 1102  
                     u500 0E12                       u501 0E0E                       u510 0E48  
                     u511 0E44                       u600 0A44                       u520 1194  
                     u601 0A40                       u521 1190                       u530 08BC  
                     u610 0A76                       u531 08B8                       u611 0A72  
                     u540 08EE                       u620 0AB4                       u700 065E  
                     u541 08EA                       u621 0AB0                       u701 0658  
                     u630 0ADE                       u710 0660                       u551 0918  
                     u631 0ADA                       u560 093C                       u640 0B0C  
                     u480 0DD8                       u720 0672                       u800 0BBA  
                     u561 0938                       u641 0B08                       u481 0DD4  
                     u721 066E                       u801 0BB6                       u570 0966  
                     u650 0B54                       u490 0DEA                       u730 06AC  
                     u810 0C04                       u571 0962                       u651 0B50  
                     u491 0DE6                       u731 06A8                       u811 0C00  
                     u900 0F2E                       u580 09A6                       u660 0FDC  
                     u740 06D8                       u820 0C20                       u901 0F2A  
                     u581 09A2                       u661 0FD8                       u741 06D4  
                     u821 0C1C                       u590 09F0                       u670 1032  
                     u750 06EE                       u591 09EC                       u671 102E  
                     u751 06EA                       u680 11B0                       u760 082A  
                     u840 1148                       u681 11AC                       u761 0826  
                     u841 1144                       u690 1212                       u850 0F7E  
                     u770 0848                       u691 120E                       u851 0F7A  
                     u835 1226                       u771 0844                       u836 1228  
                     u860 0EA2                       u780 0862                       u917 122A  
                     u861 0E9E                       u781 085E                       u870 0EBE  
                     u790 0872                       u927 0F4A                       u871 0EBA  
                     u791 086E                       u880 0EF2                       u937 0F64  
                     u890 0F1E                       u947 0F86                       u957 0F94  
                     u967 0FA6                       u887 0EE8                       u977 0FB8  
                     u897 0F14                       u987 0FC6                       u997 0D52  
                     _abs 1196                       _pad 0FCE                       wreg 000FE8  
                    ?_abs 0017                      l1301 09F0                      l1303 0A10  
                    l1311 0A44                      l1321 0AB4                      l1313 0A64  
                    l1241 0DC6                      l1401 071E                      l1331 0B2C  
                    l1323 0ABC                      l1315 0A68                      l1307 0A32  
                    l1251 0E48                      l1243 0DD8                      l1411 082A  
                    l1403 07A0                      l1501 0F3E                      l1333 0B3E  
                    l1325 0AD0                      l1317 0A76                      l1309 0A36  
                    l1245 0DEA                      l1261 1174                      l1421 0888  
                    l1413 0848                      l1405 07A6                      l1431 0D50  
                    l1503 0F40                      l1271 08E0                      l1263 08AA  
                    l1327 0ADE                      l1335 0B44                      l1319 0A96  
                    l1247 0DF4                      l1255 1152                      l1351 1010  
                    l1343 0FCE                      l1415 0862                      l1407 07AC  
                    l1361 11FE                      l1441 0DC0                      l1433 0D58  
                    l1425 0CE4                      l1521 0F6E                      l1505 0F42  
                    l1281 093C                      l1273 08EE                      l1265 08AE  
                    l1337 0B54                      l1329 0B0C                      l1249 0E12  
                    l1257 115E                      l1353 1014                      l1345 0FDC  
                    l1417 0872                      l1409 0810                      l1363 1212  
                    l1443 0DC2                      l1435 0D70                      l1427 0D4C  
                    l1531 0FA0                      l1523 0F7E                      l1515 0F58  
                    l1507 0F44                      l1291 09A6                      l1283 0944  
                    l1275 090E                      l1267 08BC                      l1339 0B74  
                    l1259 1170                      l1355 1032                      l1347 0FE8  
                    l1419 0878                      l1451 0BD4                      l1437 0D8A  
                    l1429 0D4E                      l1533 0FB6                      l1525 0F84  
                    l1517 0F5E                      l1509 0F54                      l1541 0EAC  
                    l1293 09C6                      l1285 0958                      l1277 0912  
                    l1269 08DC                      l1357 1196                      l1349 0FFC  
                    l1381 0692                      l1373 062E                      l1461 0C76  
                    l1453 0BD8                      l1445 0B96                      l1439 0DA6  
                    l1535 0FBE                      l1527 0F8C                      l1519 0F6C  
                    l1551 0EFE                      l1543 0EBE                      l1295 09C8  
                    l1287 0966                      l1279 091E                      l1359 11B0  
                    l1391 06EE                      l1383 06AC                      l1375 064E  
                    l1455 0BE8                      l1447 0BBA                      l1553 1248  
                    l1369 1218                      l1529 0F9A                      l1481 1232  
                    l1545 0EC4                      l1537 0E92                      l1297 09DA  
                    l1289 0978                      l1393 06FA                      l1385 06C8  
                    l1377 0662                      l1465 0CA6                      l1457 0C04  
                    l1449 0BC8                      l1561 10B6                      l1555 1256  
                    l1475 121E                      l1547 0ED2                      l1539 0EA2  
                    l1299 09E0                      l1395 0702                      l1387 06D8  
                    l1379 0672                      l1459 0C20                      l1483 1104  
                    l1563 10C6                      l1557 1260                      l1493 0F30  
                    l1477 1228                      l1549 0EFA                      l1397 070E  
                    l1389 06DE                      l1469 0CB8                      l1485 1110  
                    l1565 10CE                      l1581 106E                      l1559 123A  
                    l1495 0F34                      l1479 1230                      l1399 0718  
                    l1487 112C                      l1567 10D6                      l1583 1080  
                    l1575 1048                      l1497 0F36                      l1489 1148  
                    l1569 10F2                      l1585 109C                      l1577 1058  
                    l1499 0F38                      l1579 105C                      ?_pad 0015  
                    STR_1 0601                      STR_3 0625                      STR_4 0611  
                    STR_5 061E                      i1l96 00AA                      i1l98 00B4  
                    abs@a 0017                      _dbuf 0080                      _main 1048  
                    _dtoa 062E                      _prec 0072                      pad@i 001C  
                    pad@p 0019                      fsr1h 000FE2                      fsr2h 000FDA  
                    indf1 000FE7                      indf2 000FDF                      fsr1l 000FE1  
                    pad@w 001E                      fsr2l 000FD9                      btemp 0079  
                    start 00C4              ___param_bank 000000                     ??_abs 0019  
                   ??_pad 001B           __end_of___aodiv 0A32                     ?_main 0001  
                   ?_dtoa 0020           __end_of___aomod 0B96           ??_config_TIMER0 0005  
                   _T0CON 000FD5              vfpfcnvrt@fmt 0045                     _TMR0H 000FD7  
                   _TMR0L 000FD6                     _PORTB 000F81                     _PORTD 000F83  
                   _TRISB 000F93                     _TRISD 000F95           __end_of_lcd_cmd 0DC6  
                   _flags 0078                     _fputc 0DC6                     _fputs 1152  
                   pad@fp 0015                     _width 0070                     _putch 1266  
                   dtoa@d 0022                     dtoa@i 0040                     dtoa@n 0038  
                   dtoa@p 0034                     dtoa@s 0042                     dtoa@w 0036  
         __end_of_set_bit 121C                     tablat 000FF5                     ttemp5 007A  
                   ttemp6 007D                     ttemp7 0081                     status 000FD8  
            ?_intern_TMR0 0001                     wtemp8 007A           __end_of_sprintf 1104  
            lcd_write@end 000E              lcd_write@col 000B              lcd_write@lin 000F  
            lcd_write@str 000C           __initialization 11D6              __end_of_main 10B6  
            __end_of_dtoa 08AA           ??_lcd_send_byte 000A                    ??_main 0070  
                  ??_dtoa 002A             __activetblptr 000002          _config_INTERRUPT 1260  
                  _ADCON1 000FC1                    ?_fputc 0005                    ?_fputs 000E  
                  ?_putch 0001                    i1l1211 0026                    i1l1221 007A  
                  i1l1213 0034                    i1l1223 007E                    i1l1215 0038  
                  i1l1225 009A                    i1l1217 0052                    i1l1227 00B2  
                  i1l1219 005A                    _INTCON 000FF2                    _OSCCON 000FD3  
            vfprintf@cfmt 005B          __end_of_lcd_init 0FCE                 ??___aodiv 0015  
               ??___aomod 0015                    clear_0 11DC                    clear_1 11E8  
                  isa$std 000001                    pad@buf 0017                 ??_lcd_cmd 0007  
                  dtoa@fp 0020                    fputc@c 0005                    fputs@c 0012  
                  fputs@i 0013                    fputs@s 000E              __mediumconst 0000  
               ??_set_bit 0006                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    putch@c 0001          __end_of_vfprintf 1152  
               ??_sprintf 0063                __accesstop 0080   __end_of__initialization 11EE  
           ___rparam_used 000001            __pcstackCOMRAM 0001             __end_of_fputc 0E90  
           __end_of_fputs 1196             __end_of_putch 1268                   ??_fputc 0009  
                 ??_fputs 0012                   ??_putch 0005                __pbssBANK0 0080  
      lcd_send_byte@level 000A                   i1u44_20 0034                   i1u44_21 0030  
                 i1u45_20 0052                   i1u45_21 004E                   i1u46_20 006A  
                 i1u46_21 0064                   i1u46_26 006C                   i1u47_20 009A  
                 i1u47_21 0096                   _OSCTUNE 000F9B                 ?_lcd_init 0001  
__end_of_config_INTERRUPT 1266                   __Hparam 0000                   __Lparam 0000  
       __end_of_config_IO 1256                   ___aodiv 08AA                   ___aomod 0A32  
       __end_of_lcd_write 0F30                 ?_vfprintf 0055               set_bit@comp 0005  
            __psmallconst 0600                   __pcinit 11D6                   __ramtop 0600  
                 __ptext0 1048                   __ptext1 10B6                   __ptext2 1104  
                 __ptext3 0B96                   __ptext4 062E                   __ptext5 0FCE  
                 __ptext6 1152                   __ptext7 0DC6                   __ptext8 1266  
                 __ptext9 1196                   _lcd_cmd 0CE2                   _counter 0074  
   __end_of_config_TIMER0 1248                   _set_bit 11FC                   _sprintf 10B6  
              ??_lcd_init 0009      end_of_initialization 11EE                   fputc@fp 0007  
           __Lmediumconst 0000                   fputs@fp 0010         __end_of_vfpfcnvrt 0CE2  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE          vfpfcnvrt@convarg 004B                ??_vfprintf 005B  
              _timer_1seg 0076     __end_of_lcd_send_byte 123A                 _PORTBbits 000F81  
               _PORTDbits 000F83                 _PORTEbits 000F84                 _TRISEbits 000F96  
              lcd_cmd@cmd 0008             ??_config_FOSC 0005               vfpfcnvrt@ap 0047  
             vfpfcnvrt@cp 0053               vfpfcnvrt@fp 0043       start_initialization 11D6  
             __end_of_abs 11D6               __end_of_pad 1048               vfprintf@fmt 0057  
     __end_of_config_FOSC 1260               __pbssCOMRAM 0070          ___aodiv@dividend 0005  
           ??_intern_TMR0 0001         ?_config_INTERRUPT 0001        ??_config_INTERRUPT 0005  
                ?___aodiv 0005                  ?___aomod 0005          ___aodiv@quotient 0017  
               _bufferLCD 00A0               __pintcodelo 0018                 _config_IO 1248  
       lcd_send_byte@data 0009                  ?_lcd_cmd 0001                 _lcd_write 0E90  
             __smallconst 0600                  ?_set_bit 0005                set_bit@cmd 0006  
                ?_sprintf 005D               _config_FOSC 1256       __end_of_intern_TMR0 00C4  
               _vfpfcnvrt 0B96                ?_config_IO 0001                ?_lcd_write 000B  
               lcd_init@i 000A                  __Hrparam 0000                vfprintf@ap 0059  
                __Lrparam 0000                vfprintf@fp 0055                ?_vfpfcnvrt 0043  
         ___aodiv@divisor 000D           ___aodiv@counter 0015                sprintf@fmt 005F  
                _dtoa$964 0032                  __ptext10 0A32                  __ptext11 08AA  
                __ptext20 1256                  __ptext12 0E90                  __ptext13 121C  
                __ptext14 0F30                  __ptext15 0CE2                  __ptext16 11FC  
                __ptext17 123A                  __ptext18 1248                  __ptext19 1260  
                _lcd_init 0F30               _intern_TMR0 0018                  isa$xinst 000000  
                int$flags 0079                  _vfprintf 1104               ??_config_IO 0005  
             ??_lcd_write 000E          ___aomod@dividend 0005                _INTCONbits 000FF2  
           _config_TIMER0 123A                  intlevel1 0000                 sprintf@ap 0063  
         ___aomod@divisor 000D               ??_vfpfcnvrt 0049           ___aomod@counter 0015  
           _lcd_send_byte 121C                  sprintf@f 0065                  sprintf@s 005D  
          ?_config_TIMER0 0001              ___aodiv@sign 0016              ?_config_FOSC 0001  
            ___aomod@sign 0016  
